!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=74)}({0:function(module,__webpack_exports__,__webpack_require__){"use strict";(function(global,Buffer){__webpack_require__.d(__webpack_exports__,"a",function(){return bson_54});var long__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(3),long__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_0__),buffer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),buffer__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_1__),commonjsGlobal="undefined"!=typeof window?window:void 0!==global?global:"undefined"!=typeof self?self:{};function createCommonjsModule(t,e){return t(e={exports:{}},e.exports),e.exports}var map=createCommonjsModule(function(t){if(void 0!==commonjsGlobal.Map)t.exports=commonjsGlobal.Map,t.exports.Map=commonjsGlobal.Map;else{var e=function(t){this._keys=[],this._values={};for(var e=0;e<t.length;e++)if(null!=t[e]){var n=t[e],r=n[0],i=n[1];this._keys.push(r),this._values[r]={v:i,i:this._keys.length-1}}};e.prototype.clear=function(){this._keys=[],this._values={}},e.prototype.delete=function(t){var e=this._values[t];return null!=e&&(delete this._values[t],this._keys.splice(e.i,1),!0)},e.prototype.entries=function(){var t=this,e=0;return{next:function(){var n=t._keys[e++];return{value:void 0!==n?[n,t._values[n].v]:void 0,done:void 0===n}}}},e.prototype.forEach=function(t,e){e=e||this;for(var n=0;n<this._keys.length;n++){var r=this._keys[n];t.call(e,this._values[r].v,r,e)}},e.prototype.get=function(t){return this._values[t]?this._values[t].v:void 0},e.prototype.has=function(t){return null!=this._values[t]},e.prototype.keys=function(){var t=this,e=0;return{next:function(){var n=t._keys[e++];return{value:void 0!==n?n:void 0,done:void 0===n}}}},e.prototype.set=function(t,e){return this._values[t]?(this._values[t].v=e,this):(this._keys.push(t),this._values[t]={v:e,i:this._keys.length-1},this)},e.prototype.values=function(){var t=this,e=0;return{next:function(){var n=t._keys[e++];return{value:void 0!==n?t._values[n].v:void 0,done:void 0===n}}}},Object.defineProperty(e.prototype,"size",{enumerable:!0,get:function(){return this._keys.length}}),t.exports=e}}),map_1=map.Map;long__WEBPACK_IMPORTED_MODULE_0___default.a.prototype.toExtendedJSON=function(t){return t&&t.relaxed?this.toNumber():{$numberLong:this.toString()}},long__WEBPACK_IMPORTED_MODULE_0___default.a.fromExtendedJSON=function(t,e){var n=long__WEBPACK_IMPORTED_MODULE_0___default.a.fromString(t.$numberLong);return e&&e.relaxed?n.toNumber():n},Object.defineProperty(long__WEBPACK_IMPORTED_MODULE_0___default.a.prototype,"_bsontype",{value:"Long"});var long_1=long__WEBPACK_IMPORTED_MODULE_0___default.a;function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}var Double=function(){function t(e){_classCallCheck(this,t),this.value=e}return _createClass(t,[{key:"valueOf",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(t){return t&&t.relaxed&&isFinite(this.value)?this.value:{$numberDouble:this.value.toString()}}}],[{key:"fromExtendedJSON",value:function(e,n){return n&&n.relaxed?parseFloat(e.$numberDouble):new t(parseFloat(e.$numberDouble))}}]),t}();Object.defineProperty(Double.prototype,"_bsontype",{value:"Double"});var double_1=Double;function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck$1(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$1(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$1(t,e,n){return e&&_defineProperties$1(t.prototype,e),n&&_defineProperties$1(t,n),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Timestamp=function(t){function e(t,n){return _classCallCheck$1(this,e),_possibleConstructorReturn(long_1.isLong(t)?_possibleConstructorReturn(this,_getPrototypeOf(e).call(this,t.low,t.high)):_possibleConstructorReturn(this,_getPrototypeOf(e).call(this,t,n)))}return _inherits(e,long_1),_createClass$1(e,[{key:"toJSON",value:function(){return{$timestamp:this.toString()}}},{key:"toExtendedJSON",value:function(){return{$timestamp:{t:this.high,i:this.low}}}}],[{key:"fromInt",value:function(t){return new e(long_1.fromInt(t))}},{key:"fromNumber",value:function(t){return new e(long_1.fromNumber(t))}},{key:"fromBits",value:function(t,n){return new e(t,n)}},{key:"fromString",value:function(t,n){return new e(long_1.fromString(t,n))}},{key:"fromExtendedJSON",value:function(t){return new e(t.$timestamp.i,t.$timestamp.t)}}]),e}();Object.defineProperty(Timestamp.prototype,"_bsontype",{value:"Timestamp"});var timestamp=Timestamp,require$$0={};function normalizedFunctionString(t){return t.toString().replace("function(","function (")}function insecureRandomBytes(t){for(var e=new Uint8Array(t),n=0;n<t;++n)e[n]=Math.floor(256*Math.random());return e}var randomBytes=insecureRandomBytes;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues)randomBytes=function(t){return window.crypto.getRandomValues(new Uint8Array(t))};else{try{randomBytes=require$$0.randomBytes}catch(t){}null==randomBytes&&(randomBytes=insecureRandomBytes)}var utils={normalizedFunctionString:normalizedFunctionString,randomBytes:randomBytes};function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}var cachedSetTimeout=defaultSetTimout,cachedClearTimeout=defaultClearTimeout;function runTimeout(t){if(cachedSetTimeout===setTimeout)return setTimeout(t,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(t,0);try{return cachedSetTimeout(t,0)}catch(e){try{return cachedSetTimeout.call(null,t,0)}catch(e){return cachedSetTimeout.call(this,t,0)}}}function runClearTimeout(t){if(cachedClearTimeout===clearTimeout)return clearTimeout(t);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(t);try{return cachedClearTimeout(t)}catch(e){try{return cachedClearTimeout.call(null,t)}catch(e){return cachedClearTimeout.call(this,t)}}}"function"==typeof global.setTimeout&&(cachedSetTimeout=setTimeout),"function"==typeof global.clearTimeout&&(cachedClearTimeout=clearTimeout);var queue=[],draining=!1,currentQueue,queueIndex=-1;function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var t=runTimeout(cleanUpNextTick);draining=!0;for(var e=queue.length;e;){for(currentQueue=queue,queue=[];++queueIndex<e;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,e=queue.length}currentQueue=null,draining=!1,runClearTimeout(t)}}function nextTick(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];queue.push(new Item(t,e)),1!==queue.length||draining||runTimeout(drainQueue)}function Item(t,e){this.fun=t,this.array=e}Item.prototype.run=function(){this.fun.apply(null,this.array)};var title="browser",platform="browser",browser=!0,env={},argv=[],version="",versions={},release={},config={};function noop(){}var on=noop,addListener=noop,once=noop,off=noop,removeListener=noop,removeAllListeners=noop,emit=noop;function binding(t){throw new Error("process.binding is not supported")}function cwd(){return"/"}function chdir(t){throw new Error("process.chdir is not supported")}function umask(){return 0}var performance=global.performance||{},performanceNow=performance.now||performance.mozNow||performance.msNow||performance.oNow||performance.webkitNow||function(){return(new Date).getTime()};function hrtime(t){var e=.001*performanceNow.call(performance),n=Math.floor(e),r=Math.floor(e%1*1e9);return t&&(n-=t[0],(r-=t[1])<0&&(n--,r+=1e9)),[n,r]}var startTime=new Date;function uptime(){return(new Date-startTime)/1e3}var process={nextTick:nextTick,title:title,browser:browser,env:env,argv:argv,version:version,versions:versions,on:on,addListener:addListener,once:once,off:off,removeListener:removeListener,removeAllListeners:removeAllListeners,emit:emit,binding:binding,cwd:cwd,chdir:chdir,umask:umask,hrtime:hrtime,platform:platform,release:release,config:config,uptime:uptime},inherits;inherits="function"==typeof Object.create?function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t};var inherits$1=inherits;function _typeof$1(t){return(_typeof$1="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var formatRegExp=/%[sdj%]/g;function format(t){if(!isString(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(inspect(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,i=r.length,o=String(t).replace(formatRegExp,function(t){if("%%"===t)return"%";if(n>=i)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}}),s=r[n];n<i;s=r[++n])isNull(s)||!isObject(s)?o+=" "+s:o+=" "+inspect(s);return o}function deprecate(t,e){if(isUndefined(global.process))return function(){return deprecate(t,e).apply(this,arguments)};var n=!1;return function(){return n||(console.error(e),n=!0),t.apply(this,arguments)}}var debugs={},debugEnviron;function debuglog(t){if(isUndefined(debugEnviron)&&(debugEnviron=process.env.NODE_DEBUG||""),t=t.toUpperCase(),!debugs[t])if(new RegExp("\\b"+t+"\\b","i").test(debugEnviron)){debugs[t]=function(){var e=format.apply(null,arguments);console.error("%s %d: %s",t,0,e)}}else debugs[t]=function(){};return debugs[t]}function inspect(t,e){var n={seen:[],stylize:stylizeNoColor};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),isBoolean(e)?n.showHidden=e:e&&_extend(n,e),isUndefined(n.showHidden)&&(n.showHidden=!1),isUndefined(n.depth)&&(n.depth=2),isUndefined(n.colors)&&(n.colors=!1),isUndefined(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=stylizeWithColor),formatValue(n,t,n.depth)}function stylizeWithColor(t,e){var n=inspect.styles[e];return n?"["+inspect.colors[n][0]+"m"+t+"["+inspect.colors[n][1]+"m":t}function stylizeNoColor(t,e){return t}function arrayToHash(t){var e={};return t.forEach(function(t,n){e[t]=!0}),e}function formatValue(t,e,n){if(t.customInspect&&e&&isFunction(e.inspect)&&e.inspect!==inspect&&(!e.constructor||e.constructor.prototype!==e)){var r=e.inspect(n,t);return isString(r)||(r=formatValue(t,r,n)),r}var i=formatPrimitive(t,e);if(i)return i;var o=Object.keys(e),s=arrayToHash(o);if(t.showHidden&&(o=Object.getOwnPropertyNames(e)),isError(e)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return formatError(e);if(0===o.length){if(isFunction(e)){var a=e.name?": "+e.name:"";return t.stylize("[Function"+a+"]","special")}if(isRegExp(e))return t.stylize(RegExp.prototype.toString.call(e),"regexp");if(isDate(e))return t.stylize(Date.prototype.toString.call(e),"date");if(isError(e))return formatError(e)}var u,l="",c=!1,h=["{","}"];(isArray(e)&&(c=!0,h=["[","]"]),isFunction(e))&&(l=" [Function"+(e.name?": "+e.name:"")+"]");return isRegExp(e)&&(l=" "+RegExp.prototype.toString.call(e)),isDate(e)&&(l=" "+Date.prototype.toUTCString.call(e)),isError(e)&&(l=" "+formatError(e)),0!==o.length||c&&0!=e.length?n<0?isRegExp(e)?t.stylize(RegExp.prototype.toString.call(e),"regexp"):t.stylize("[Object]","special"):(t.seen.push(e),u=c?formatArray(t,e,n,s,o):o.map(function(r){return formatProperty(t,e,n,s,r,c)}),t.seen.pop(),reduceToSingleString(u,l,h)):h[0]+l+h[1]}function formatPrimitive(t,e){if(isUndefined(e))return t.stylize("undefined","undefined");if(isString(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}return isNumber(e)?t.stylize(""+e,"number"):isBoolean(e)?t.stylize(""+e,"boolean"):isNull(e)?t.stylize("null","null"):void 0}function formatError(t){return"["+Error.prototype.toString.call(t)+"]"}function formatArray(t,e,n,r,i){for(var o=[],s=0,a=e.length;s<a;++s)hasOwnProperty(e,String(s))?o.push(formatProperty(t,e,n,r,String(s),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(formatProperty(t,e,n,r,i,!0))}),o}function formatProperty(t,e,n,r,i,o){var s,a,u;if((u=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?a=u.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):u.set&&(a=t.stylize("[Setter]","special")),hasOwnProperty(r,i)||(s="["+i+"]"),a||(t.seen.indexOf(u.value)<0?(a=isNull(n)?formatValue(t,u.value,null):formatValue(t,u.value,n-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map(function(t){return"  "+t}).join("\n").substr(2):"\n"+a.split("\n").map(function(t){return"   "+t}).join("\n")):a=t.stylize("[Circular]","special")),isUndefined(s)){if(o&&i.match(/^\d+$/))return a;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=t.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=t.stylize(s,"string"))}return s+": "+a}function reduceToSingleString(t,e,n){return t.reduce(function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60?n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1]:n[0]+e+" "+t.join(", ")+" "+n[1]}function isArray(t){return Array.isArray(t)}function isBoolean(t){return"boolean"==typeof t}function isNull(t){return null===t}function isNullOrUndefined(t){return null==t}function isNumber(t){return"number"==typeof t}function isString(t){return"string"==typeof t}function isSymbol(t){return"symbol"===_typeof$1(t)}function isUndefined(t){return void 0===t}function isRegExp(t){return isObject(t)&&"[object RegExp]"===objectToString(t)}function isObject(t){return"object"===_typeof$1(t)&&null!==t}function isDate(t){return isObject(t)&&"[object Date]"===objectToString(t)}function isError(t){return isObject(t)&&("[object Error]"===objectToString(t)||t instanceof Error)}function isFunction(t){return"function"==typeof t}function isPrimitive(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"===_typeof$1(t)||void 0===t}function isBuffer(t){return Buffer.isBuffer(t)}function objectToString(t){return Object.prototype.toString.call(t)}function pad(t){return t<10?"0"+t.toString(10):t.toString(10)}inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},inspect.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function timestamp$1(){var t=new Date,e=[pad(t.getHours()),pad(t.getMinutes()),pad(t.getSeconds())].join(":");return[t.getDate(),months[t.getMonth()],e].join(" ")}function log(){console.log("%s - %s",timestamp$1(),format.apply(null,arguments))}function _extend(t,e){if(!e||!isObject(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t}function hasOwnProperty(t,e){return Object.prototype.hasOwnProperty.call(t,e)}var util={inherits:inherits$1,_extend:_extend,log:log,isBuffer:isBuffer,isPrimitive:isPrimitive,isFunction:isFunction,isError:isError,isDate:isDate,isObject:isObject,isRegExp:isRegExp,isUndefined:isUndefined,isSymbol:isSymbol,isString:isString,isNumber:isNumber,isNullOrUndefined:isNullOrUndefined,isNull:isNull,isBoolean:isBoolean,isArray:isArray,inspect:inspect,deprecate:deprecate,format:format,debuglog:debuglog};function _classCallCheck$2(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$2(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$2(t,e,n){return e&&_defineProperties$2(t.prototype,e),n&&_defineProperties$2(t,n),t}var Buffer$1=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,randomBytes$1=utils.randomBytes,deprecate$1=util.deprecate,PROCESS_UNIQUE=randomBytes$1(5),checkForHexRegExp=new RegExp("^[0-9a-fA-F]{24}$"),hasBufferType=!1;try{Buffer$1&&Buffer$1.from&&(hasBufferType=!0)}catch(t){hasBufferType=!1}for(var hexTable=[],_i=0;_i<256;_i++)hexTable[_i]=(_i<=15?"0":"")+_i.toString(16);for(var decodeLookup=[],i=0;i<10;)decodeLookup[48+i]=i++;for(;i<16;)decodeLookup[55+i]=decodeLookup[87+i]=i++;var _Buffer=Buffer$1;function convertToHex(t){return t.toString("hex")}function makeObjectIdError(t,e){var n=t[e];return new TypeError('ObjectId string "'.concat(t,'" contains invalid character "').concat(n,'" with character code (').concat(t.charCodeAt(e),"). All character codes for a non-hex string must be less than 256."))}var ObjectId=function(){function t(e){if(_classCallCheck$2(this,t),e instanceof t)return e;if(null==e||"number"==typeof e)return this.id=t.generate(e),void(t.cacheHexString&&(this.__id=this.toString("hex")));var n=t.isValid(e);if(!n&&null!=e)throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(n&&"string"==typeof e&&24===e.length&&hasBufferType)return new t(Buffer$1.from(e,"hex"));if(n&&"string"==typeof e&&24===e.length)return t.createFromHexString(e);if(null==e||12!==e.length){if(null!=e&&e.toHexString)return t.createFromHexString(e.toHexString());throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters")}this.id=e,t.cacheHexString&&(this.__id=this.toString("hex"))}return _createClass$2(t,[{key:"toHexString",value:function(){if(t.cacheHexString&&this.__id)return this.__id;var e="";if(!this.id||!this.id.length)throw new TypeError("invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is ["+JSON.stringify(this.id)+"]");if(this.id instanceof _Buffer)return e=convertToHex(this.id),t.cacheHexString&&(this.__id=e),e;for(var n=0;n<this.id.length;n++){var r=hexTable[this.id.charCodeAt(n)];if("string"!=typeof r)throw makeObjectIdError(this.id,n);e+=r}return t.cacheHexString&&(this.__id=e),e}},{key:"toString",value:function(t){return this.id&&this.id.copy?this.id.toString("string"==typeof t?t:"hex"):this.toHexString()}},{key:"toJSON",value:function(){return this.toHexString()}},{key:"equals",value:function(e){return e instanceof t?this.toString()===e.toString():"string"==typeof e&&t.isValid(e)&&12===e.length&&this.id instanceof _Buffer?e===this.id.toString("binary"):"string"==typeof e&&t.isValid(e)&&24===e.length?e.toLowerCase()===this.toHexString():"string"==typeof e&&t.isValid(e)&&12===e.length?e===this.id:!(null==e||!(e instanceof t||e.toHexString))&&e.toHexString()===this.toHexString()}},{key:"getTimestamp",value:function(){var t=new Date,e=this.id.readUInt32BE(0);return t.setTime(1e3*Math.floor(e)),t}},{key:"toExtendedJSON",value:function(){return this.toHexString?{$oid:this.toHexString()}:{$oid:this.toString("hex")}}}],[{key:"getInc",value:function(){return t.index=(t.index+1)%16777215}},{key:"generate",value:function(e){"number"!=typeof e&&(e=~~(Date.now()/1e3));var n=t.getInc(),r=Buffer$1.alloc(12);return r[3]=255&e,r[2]=e>>8&255,r[1]=e>>16&255,r[0]=e>>24&255,r[4]=PROCESS_UNIQUE[0],r[5]=PROCESS_UNIQUE[1],r[6]=PROCESS_UNIQUE[2],r[7]=PROCESS_UNIQUE[3],r[8]=PROCESS_UNIQUE[4],r[11]=255&n,r[10]=n>>8&255,r[9]=n>>16&255,r}},{key:"createPk",value:function(){return new t}},{key:"createFromTime",value:function(e){var n=Buffer$1.from([0,0,0,0,0,0,0,0,0,0,0,0]);return n[3]=255&e,n[2]=e>>8&255,n[1]=e>>16&255,n[0]=e>>24&255,new t(n)}},{key:"createFromHexString",value:function(e){if(void 0===e||null!=e&&24!==e.length)throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(hasBufferType)return new t(Buffer$1.from(e,"hex"));for(var n=new _Buffer(12),r=0,i=0;i<24;)n[r++]=decodeLookup[e.charCodeAt(i++)]<<4|decodeLookup[e.charCodeAt(i++)];return new t(n)}},{key:"isValid",value:function(e){return null!=e&&("number"==typeof e||("string"==typeof e?12===e.length||24===e.length&&checkForHexRegExp.test(e):e instanceof t||(e instanceof _Buffer&&12===e.length||!!e.toHexString&&(12===e.id.length||24===e.id.length&&checkForHexRegExp.test(e.id)))))}},{key:"fromExtendedJSON",value:function(e){return new t(e.$oid)}}]),t}();ObjectId.get_inc=deprecate$1(function(){return ObjectId.getInc()},"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.get_inc=deprecate$1(function(){return ObjectId.getInc()},"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.getInc=deprecate$1(function(){return ObjectId.getInc()},"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.generate=deprecate$1(function(t){return ObjectId.generate(t)},"Please use the static `ObjectId.generate(time)` instead"),Object.defineProperty(ObjectId.prototype,"generationTime",{enumerable:!0,get:function(){return this.id[3]|this.id[2]<<8|this.id[1]<<16|this.id[0]<<24},set:function(t){this.id[3]=255&t,this.id[2]=t>>8&255,this.id[1]=t>>16&255,this.id[0]=t>>24&255}}),ObjectId.prototype[util.inspect.custom||"inspect"]=ObjectId.prototype.toString,ObjectId.index=~~(16777215*Math.random()),Object.defineProperty(ObjectId.prototype,"_bsontype",{value:"ObjectID"});var objectid=ObjectId;function _classCallCheck$3(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$3(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$3(t,e,n){return e&&_defineProperties$3(t.prototype,e),n&&_defineProperties$3(t,n),t}function alphabetize(t){return t.split("").sort().join("")}var BSONRegExp=function(){function t(e,n){_classCallCheck$3(this,t),this.pattern=e||"",this.options=n?alphabetize(n):"";for(var r=0;r<this.options.length;r++)if("i"!==this.options[r]&&"m"!==this.options[r]&&"x"!==this.options[r]&&"l"!==this.options[r]&&"s"!==this.options[r]&&"u"!==this.options[r])throw new Error("The regular expression option [".concat(this.options[r],"] is not supported"))}return _createClass$3(t,[{key:"toExtendedJSON",value:function(){return{$regularExpression:{pattern:this.pattern,options:this.options}}}}],[{key:"fromExtendedJSON",value:function(e){return new t(e.$regularExpression.pattern,e.$regularExpression.options.split("").sort().join(""))}}]),t}();Object.defineProperty(BSONRegExp.prototype,"_bsontype",{value:"BSONRegExp"});var regexp=BSONRegExp;function _classCallCheck$4(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$4(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$4(t,e,n){return e&&_defineProperties$4(t.prototype,e),n&&_defineProperties$4(t,n),t}var BSONSymbol=function(){function t(e){_classCallCheck$4(this,t),this.value=e}return _createClass$4(t,[{key:"valueOf",value:function(){return this.value}},{key:"toString",value:function(){return this.value}},{key:"inspect",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(){return{$symbol:this.value}}}],[{key:"fromExtendedJSON",value:function(e){return new t(e.$symbol)}}]),t}();Object.defineProperty(BSONSymbol.prototype,"_bsontype",{value:"Symbol"});var symbol=BSONSymbol;function _classCallCheck$5(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$5(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$5(t,e,n){return e&&_defineProperties$5(t.prototype,e),n&&_defineProperties$5(t,n),t}var Int32=function(){function t(e){_classCallCheck$5(this,t),this.value=e}return _createClass$5(t,[{key:"valueOf",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(t){return t&&t.relaxed?this.value:{$numberInt:this.value.toString()}}}],[{key:"fromExtendedJSON",value:function(e,n){return n&&n.relaxed?parseInt(e.$numberInt,10):new t(e.$numberInt)}}]),t}();Object.defineProperty(Int32.prototype,"_bsontype",{value:"Int32"});var int_32=Int32;function _classCallCheck$6(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$6(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$6(t,e,n){return e&&_defineProperties$6(t.prototype,e),n&&_defineProperties$6(t,n),t}var Code=function(){function t(e,n){_classCallCheck$6(this,t),this.code=e,this.scope=n}return _createClass$6(t,[{key:"toJSON",value:function(){return{scope:this.scope,code:this.code}}},{key:"toExtendedJSON",value:function(){return this.scope?{$code:this.code,$scope:this.scope}:{$code:this.code}}}],[{key:"fromExtendedJSON",value:function(e){return new t(e.$code,e.$scope)}}]),t}();Object.defineProperty(Code.prototype,"_bsontype",{value:"Code"});var code=Code,Buffer$2=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,PARSE_STRING_REGEXP=/^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/,PARSE_INF_REGEXP=/^(\+|-)?(Infinity|inf)$/i,PARSE_NAN_REGEXP=/^(\+|-)?NaN$/i,EXPONENT_MAX=6111,EXPONENT_MIN=-6176,EXPONENT_BIAS=6176,MAX_DIGITS=34,NAN_BUFFER=[124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),INF_NEGATIVE_BUFFER=[248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),INF_POSITIVE_BUFFER=[120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),EXPONENT_REGEX=/^([-+])?(\d+)?$/;function isDigit(t){return!isNaN(parseInt(t,10))}function divideu128(t){var e=long_1.fromNumber(1e9),n=long_1.fromNumber(0);if(!(t.parts[0]||t.parts[1]||t.parts[2]||t.parts[3]))return{quotient:t,rem:n};for(var r=0;r<=3;r++)n=(n=n.shiftLeft(32)).add(new long_1(t.parts[r],0)),t.parts[r]=n.div(e).low,n=n.modulo(e);return{quotient:t,rem:n}}function multiply64x2(t,e){if(!t&&!e)return{high:long_1.fromNumber(0),low:long_1.fromNumber(0)};var n=t.shiftRightUnsigned(32),r=new long_1(t.getLowBits(),0),i=e.shiftRightUnsigned(32),o=new long_1(e.getLowBits(),0),s=n.multiply(i),a=n.multiply(o),u=r.multiply(i),l=r.multiply(o);return s=s.add(a.shiftRightUnsigned(32)),a=new long_1(a.getLowBits(),0).add(u).add(l.shiftRightUnsigned(32)),{high:s=s.add(a.shiftRightUnsigned(32)),low:l=a.shiftLeft(32).add(new long_1(l.getLowBits(),0))}}function lessThan(t,e){var n=t.high>>>0,r=e.high>>>0;return n<r||n===r&&t.low>>>0<e.low>>>0}function invalidErr(t,e){throw new TypeError('"'.concat(t,'" is not a valid Decimal128 string - ').concat(e))}function Decimal128(t){this.bytes=t}Decimal128.fromString=function(t){var e,n=!1,r=!1,i=!1,o=0,s=0,a=0,u=0,l=0,c=[0],h=0,f=0,d=0,p=0,_=0,y=0,m=[0,0],g=[0,0],v=0;if(t.length>=7e3)throw new TypeError(t+" not a valid Decimal128 string");var b=t.match(PARSE_STRING_REGEXP),w=t.match(PARSE_INF_REGEXP),E=t.match(PARSE_NAN_REGEXP);if(!b&&!w&&!E||0===t.length)throw new TypeError(t+" not a valid Decimal128 string");if(b){var S=b[2],A=b[4],N=b[5],T=b[6];A&&void 0===T&&invalidErr(t,"missing exponent power"),A&&void 0===S&&invalidErr(t,"missing exponent base"),void 0===A&&(N||T)&&invalidErr(t,"missing e before exponent")}if("+"!==t[v]&&"-"!==t[v]||(n="-"===t[v++]),!isDigit(t[v])&&"."!==t[v]){if("i"===t[v]||"I"===t[v])return new Decimal128(Buffer$2.from(n?INF_NEGATIVE_BUFFER:INF_POSITIVE_BUFFER));if("N"===t[v])return new Decimal128(Buffer$2.from(NAN_BUFFER))}for(;isDigit(t[v])||"."===t[v];)"."!==t[v]?(h<34&&("0"!==t[v]||i)&&(i||(l=s),i=!0,c[f++]=parseInt(t[v],10),h+=1),i&&(a+=1),r&&(u+=1),s+=1,v+=1):(r&&invalidErr(t,"contains multiple periods"),r=!0,v+=1);if(r&&!s)throw new TypeError(t+" not a valid Decimal128 string");if("e"===t[v]||"E"===t[v]){var O=t.substr(++v).match(EXPONENT_REGEX);if(!O||!O[2])return new Decimal128(Buffer$2.from(NAN_BUFFER));_=parseInt(O[0],10),v+=O[0].length}if(t[v])return new Decimal128(Buffer$2.from(NAN_BUFFER));if(d=0,h){if(p=h-1,1!==(o=a))for(;"0"===t[l+o-1];)o-=1}else d=0,p=0,c[0]=0,a=1,h=1,o=0;for(_<=u&&u-_>16384?_=EXPONENT_MIN:_-=u;_>EXPONENT_MAX;){if((p+=1)-d>MAX_DIGITS){if(c.join("").match(/^0+$/)){_=EXPONENT_MAX;break}invalidErr(t,"overflow")}_-=1}for(;_<EXPONENT_MIN||h<a;){if(0===p&&o<h){_=EXPONENT_MIN,o=0;break}if(h<a?a-=1:p-=1,_<EXPONENT_MAX)_+=1;else{if(c.join("").match(/^0+$/)){_=EXPONENT_MAX;break}invalidErr(t,"overflow")}}if(p-d+1<o){var P=s;r&&(l+=1,P+=1),n&&(l+=1,P+=1);var C=parseInt(t[l+p+1],10),x=0;if(C>=5&&(x=1,5===C))for(x=c[p]%2==1,y=l+p+2;y<P;y++)if(parseInt(t[y],10)){x=1;break}if(x)for(var I=p;I>=0;I--)if(++c[I]>9&&(c[I]=0,0===I)){if(!(_<EXPONENT_MAX))return new Decimal128(Buffer$2.from(n?INF_NEGATIVE_BUFFER:INF_POSITIVE_BUFFER));_+=1,c[I]=1}}if(m=long_1.fromNumber(0),g=long_1.fromNumber(0),0===o)m=long_1.fromNumber(0),g=long_1.fromNumber(0);else if(p-d<17){var R=d;for(g=long_1.fromNumber(c[R++]),m=new long_1(0,0);R<=p;R++)g=(g=g.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(c[R]))}else{var B=d;for(m=long_1.fromNumber(c[B++]);B<=p-17;B++)m=(m=m.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(c[B]));for(g=long_1.fromNumber(c[B++]);B<=p;B++)g=(g=g.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(c[B]))}var D=multiply64x2(m,long_1.fromString("100000000000000000"));D.low=D.low.add(g),lessThan(D.low,g)&&(D.high=D.high.add(long_1.fromNumber(1))),e=_+EXPONENT_BIAS;var M={low:long_1.fromNumber(0),high:long_1.fromNumber(0)};D.high.shiftRightUnsigned(49).and(long_1.fromNumber(1)).equals(long_1.fromNumber(1))?(M.high=M.high.or(long_1.fromNumber(3).shiftLeft(61)),M.high=M.high.or(long_1.fromNumber(e).and(long_1.fromNumber(16383).shiftLeft(47))),M.high=M.high.or(D.high.and(long_1.fromNumber(0x7fffffffffff)))):(M.high=M.high.or(long_1.fromNumber(16383&e).shiftLeft(49)),M.high=M.high.or(D.high.and(long_1.fromNumber(562949953421311)))),M.low=D.low,n&&(M.high=M.high.or(long_1.fromString("9223372036854775808")));var U=Buffer$2.alloc(16);return v=0,U[v++]=255&M.low.low,U[v++]=M.low.low>>8&255,U[v++]=M.low.low>>16&255,U[v++]=M.low.low>>24&255,U[v++]=255&M.low.high,U[v++]=M.low.high>>8&255,U[v++]=M.low.high>>16&255,U[v++]=M.low.high>>24&255,U[v++]=255&M.high.low,U[v++]=M.high.low>>8&255,U[v++]=M.high.low>>16&255,U[v++]=M.high.low>>24&255,U[v++]=255&M.high.high,U[v++]=M.high.high>>8&255,U[v++]=M.high.high>>16&255,U[v++]=M.high.high>>24&255,new Decimal128(U)};var COMBINATION_MASK=31,EXPONENT_MASK=16383,COMBINATION_INFINITY=30,COMBINATION_NAN=31;Decimal128.prototype.toString=function(){for(var t,e,n,r,i,o,s=0,a=new Array(36),u=0;u<a.length;u++)a[u]=0;var l,c,h,f,d,p=0,_=!1,y={parts:new Array(4)},m=[];p=0;var g=this.bytes;if(r=g[p++]|g[p++]<<8|g[p++]<<16|g[p++]<<24,n=g[p++]|g[p++]<<8|g[p++]<<16|g[p++]<<24,e=g[p++]|g[p++]<<8|g[p++]<<16|g[p++]<<24,t=g[p++]|g[p++]<<8|g[p++]<<16|g[p++]<<24,p=0,{low:new long_1(r,n),high:new long_1(e,t)}.high.lessThan(long_1.ZERO)&&m.push("-"),(i=t>>26&COMBINATION_MASK)>>3==3){if(i===COMBINATION_INFINITY)return m.join("")+"Infinity";if(i===COMBINATION_NAN)return"NaN";o=t>>15&EXPONENT_MASK,h=8+(t>>14&1)}else h=t>>14&7,o=t>>17&EXPONENT_MASK;if(l=o-EXPONENT_BIAS,y.parts[0]=(16383&t)+((15&h)<<14),y.parts[1]=e,y.parts[2]=n,y.parts[3]=r,0===y.parts[0]&&0===y.parts[1]&&0===y.parts[2]&&0===y.parts[3])_=!0;else for(d=3;d>=0;d--){var v=0,b=divideu128(y);if(y=b.quotient,v=b.rem.low)for(f=8;f>=0;f--)a[9*d+f]=v%10,v=Math.floor(v/10)}if(_)s=1,a[p]=0;else for(s=36;!a[p];)s-=1,p+=1;if((c=s-1+l)>=34||c<=-7||l>0){if(s>34)return m.push(0),l>0?m.push("E+"+l):l<0&&m.push("E"+l),m.join("");m.push(a[p++]),(s-=1)&&m.push(".");for(var w=0;w<s;w++)m.push(a[p++]);m.push("E"),c>0?m.push("+"+c):m.push(c)}else if(l>=0)for(var E=0;E<s;E++)m.push(a[p++]);else{var S=s+l;if(S>0)for(var A=0;A<S;A++)m.push(a[p++]);else m.push("0");for(m.push(".");S++<0;)m.push("0");for(var N=0;N<s-Math.max(S-1,0);N++)m.push(a[p++])}return m.join("")},Decimal128.prototype.toJSON=function(){return{$numberDecimal:this.toString()}},Decimal128.prototype.toExtendedJSON=function(){return{$numberDecimal:this.toString()}},Decimal128.fromExtendedJSON=function(t){return Decimal128.fromString(t.$numberDecimal)},Object.defineProperty(Decimal128.prototype,"_bsontype",{value:"Decimal128"});var decimal128=Decimal128;function _classCallCheck$7(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$7(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$7(t,e,n){return e&&_defineProperties$7(t.prototype,e),n&&_defineProperties$7(t,n),t}var MinKey=function(){function t(){_classCallCheck$7(this,t)}return _createClass$7(t,[{key:"toExtendedJSON",value:function(){return{$minKey:1}}}],[{key:"fromExtendedJSON",value:function(){return new t}}]),t}();Object.defineProperty(MinKey.prototype,"_bsontype",{value:"MinKey"});var min_key=MinKey;function _classCallCheck$8(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$8(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$8(t,e,n){return e&&_defineProperties$8(t.prototype,e),n&&_defineProperties$8(t,n),t}var MaxKey=function(){function t(){_classCallCheck$8(this,t)}return _createClass$8(t,[{key:"toExtendedJSON",value:function(){return{$maxKey:1}}}],[{key:"fromExtendedJSON",value:function(){return new t}}]),t}();Object.defineProperty(MaxKey.prototype,"_bsontype",{value:"MaxKey"});var max_key=MaxKey;function _classCallCheck$9(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$9(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$9(t,e,n){return e&&_defineProperties$9(t.prototype,e),n&&_defineProperties$9(t,n),t}var DBRef=function(){function t(e,n,r,i){_classCallCheck$9(this,t);var o=e.split(".");2===o.length&&(r=o.shift(),e=o.shift()),this.collection=e,this.oid=n,this.db=r,this.fields=i||{}}return _createClass$9(t,[{key:"toJSON",value:function(){var t=Object.assign({$ref:this.collection,$id:this.oid},this.fields);return null!=this.db&&(t.$db=this.db),t}},{key:"toExtendedJSON",value:function(){var t={$ref:this.collection,$id:this.oid};return this.db&&(t.$db=this.db),t=Object.assign(t,this.fields)}}],[{key:"fromExtendedJSON",value:function(e){var n=Object.assign({},e);return["$ref","$id","$db"].forEach(function(t){return delete n[t]}),new t(e.$ref,e.$id,e.$db,n)}}]),t}();Object.defineProperty(DBRef.prototype,"_bsontype",{value:"DBRef"}),Object.defineProperty(DBRef.prototype,"namespace",{get:function(){return this.collection},set:function(t){this.collection=t},configurable:!1});var db_ref=DBRef;function _classCallCheck$a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$a(t,e,n){return e&&_defineProperties$a(t.prototype,e),n&&_defineProperties$a(t,n),t}var Buffer$3=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,Binary=function(){function t(e,n){if(_classCallCheck$a(this,t),!(null==e||"string"==typeof e||Buffer$3.isBuffer(e)||e instanceof Uint8Array||Array.isArray(e)))throw new TypeError("only String, Buffer, Uint8Array or Array accepted");if(this.sub_type=null==n?BSON_BINARY_SUBTYPE_DEFAULT:n,this.position=0,null==e||e instanceof Number)void 0!==Buffer$3?this.buffer=Buffer$3.alloc(t.BUFFER_SIZE):"undefined"!=typeof Uint8Array?this.buffer=new Uint8Array(new ArrayBuffer(t.BUFFER_SIZE)):this.buffer=new Array(t.BUFFER_SIZE);else{if("string"==typeof e)if(void 0!==Buffer$3)this.buffer=Buffer$3.from(e);else{if("undefined"==typeof Uint8Array&&!Array.isArray(e))throw new TypeError("only String, Buffer, Uint8Array or Array accepted");this.buffer=writeStringToArray(e)}else this.buffer=e;this.position=e.length}}return _createClass$a(t,[{key:"put",value:function(e){if(null!=e.length&&"number"!=typeof e&&1!==e.length)throw new TypeError("only accepts single character String, Uint8Array or Array");if("number"!=typeof e&&e<0||e>255)throw new TypeError("only accepts number in a valid unsigned byte range 0-255");var n=null;if(n="string"==typeof e?e.charCodeAt(0):null!=e.length?e[0]:e,this.buffer.length>this.position)this.buffer[this.position++]=n;else if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer)){var r=Buffer$3.alloc(t.BUFFER_SIZE+this.buffer.length);this.buffer.copy(r,0,0,this.buffer.length),this.buffer=r,this.buffer[this.position++]=n}else{var i=null;i=isUint8Array(this.buffer)?new Uint8Array(new ArrayBuffer(t.BUFFER_SIZE+this.buffer.length)):new Array(t.BUFFER_SIZE+this.buffer.length);for(var o=0;o<this.buffer.length;o++)i[o]=this.buffer[o];this.buffer=i,this.buffer[this.position++]=n}}},{key:"write",value:function(t,e){if(e="number"==typeof e?e:this.position,this.buffer.length<e+t.length){var n=null;if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer))n=Buffer$3.alloc(this.buffer.length+t.length),this.buffer.copy(n,0,0,this.buffer.length);else if(isUint8Array(this.buffer)){n=new Uint8Array(new ArrayBuffer(this.buffer.length+t.length));for(var r=0;r<this.position;r++)n[r]=this.buffer[r]}this.buffer=n}if(void 0!==Buffer$3&&Buffer$3.isBuffer(t)&&Buffer$3.isBuffer(this.buffer))t.copy(this.buffer,e,0,t.length),this.position=e+t.length>this.position?e+t.length:this.position;else if(void 0!==Buffer$3&&"string"==typeof t&&Buffer$3.isBuffer(this.buffer))this.buffer.write(t,e,"binary"),this.position=e+t.length>this.position?e+t.length:this.position;else if(isUint8Array(t)||Array.isArray(t)&&"string"!=typeof t){for(var i=0;i<t.length;i++)this.buffer[e++]=t[i];this.position=e>this.position?e:this.position}else if("string"==typeof t){for(var o=0;o<t.length;o++)this.buffer[e++]=t.charCodeAt(o);this.position=e>this.position?e:this.position}}},{key:"read",value:function(t,e){if(e=e&&e>0?e:this.position,this.buffer.slice)return this.buffer.slice(t,t+e);for(var n="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(e)):new Array(e),r=0;r<e;r++)n[r]=this.buffer[t++];return n}},{key:"value",value:function(t){if((t=null!=t&&t)&&void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer)&&this.buffer.length===this.position)return this.buffer;if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer))return t?this.buffer.slice(0,this.position):this.buffer.toString("binary",0,this.position);if(t){if(null!=this.buffer.slice)return this.buffer.slice(0,this.position);for(var e=isUint8Array(this.buffer)?new Uint8Array(new ArrayBuffer(this.position)):new Array(this.position),n=0;n<this.position;n++)e[n]=this.buffer[n];return e}return convertArraytoUtf8BinaryString(this.buffer,0,this.position)}},{key:"length",value:function(){return this.position}},{key:"toJSON",value:function(){return null!=this.buffer?this.buffer.toString("base64"):""}},{key:"toString",value:function(t){return null!=this.buffer?this.buffer.slice(0,this.position).toString(t):""}},{key:"toExtendedJSON",value:function(){var t=Buffer$3.isBuffer(this.buffer)?this.buffer.toString("base64"):Buffer$3.from(this.buffer).toString("base64"),e=Number(this.sub_type).toString(16);return{$binary:{base64:t,subType:1===e.length?"0"+e:e}}}}],[{key:"fromExtendedJSON",value:function(e){var n=e.$binary.subType?parseInt(e.$binary.subType,16):0;return new t(Buffer$3.from(e.$binary.base64,"base64"),n)}}]),t}(),BSON_BINARY_SUBTYPE_DEFAULT=0;function isUint8Array(t){return"[object Uint8Array]"===Object.prototype.toString.call(t)}function writeStringToArray(t){for(var e="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(t.length)):new Array(t.length),n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}function convertArraytoUtf8BinaryString(t,e,n){for(var r="",i=e;i<n;i++)r+=String.fromCharCode(t[i]);return r}Binary.BUFFER_SIZE=256,Binary.SUBTYPE_DEFAULT=0,Binary.SUBTYPE_FUNCTION=1,Binary.SUBTYPE_BYTE_ARRAY=2,Binary.SUBTYPE_UUID_OLD=3,Binary.SUBTYPE_UUID=4,Binary.SUBTYPE_MD5=5,Binary.SUBTYPE_USER_DEFINED=128,Object.defineProperty(Binary.prototype,"_bsontype",{value:"Binary"});var binary=Binary,constants={BSON_INT32_MAX:2147483647,BSON_INT32_MIN:-2147483648,BSON_INT64_MAX:Math.pow(2,63)-1,BSON_INT64_MIN:-Math.pow(2,63),JS_INT_MAX:9007199254740992,JS_INT_MIN:-9007199254740992,BSON_DATA_NUMBER:1,BSON_DATA_STRING:2,BSON_DATA_OBJECT:3,BSON_DATA_ARRAY:4,BSON_DATA_BINARY:5,BSON_DATA_UNDEFINED:6,BSON_DATA_OID:7,BSON_DATA_BOOLEAN:8,BSON_DATA_DATE:9,BSON_DATA_NULL:10,BSON_DATA_REGEXP:11,BSON_DATA_DBPOINTER:12,BSON_DATA_CODE:13,BSON_DATA_SYMBOL:14,BSON_DATA_CODE_W_SCOPE:15,BSON_DATA_INT:16,BSON_DATA_TIMESTAMP:17,BSON_DATA_LONG:18,BSON_DATA_DECIMAL128:19,BSON_DATA_MIN_KEY:255,BSON_DATA_MAX_KEY:127,BSON_BINARY_SUBTYPE_DEFAULT:0,BSON_BINARY_SUBTYPE_FUNCTION:1,BSON_BINARY_SUBTYPE_BYTE_ARRAY:2,BSON_BINARY_SUBTYPE_UUID:3,BSON_BINARY_SUBTYPE_MD5:4,BSON_BINARY_SUBTYPE_USER_DEFINED:128};function _typeof$2(t){return(_typeof$2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var keysToCodecs={$oid:objectid,$binary:binary,$symbol:symbol,$numberInt:int_32,$numberDecimal:decimal128,$numberDouble:double_1,$numberLong:long_1,$minKey:min_key,$maxKey:max_key,$regularExpression:regexp,$timestamp:timestamp};function deserializeValue(t,e,n,r){if("number"==typeof n){if(r.relaxed)return n;if(Math.floor(n)===n){if(n>=BSON_INT32_MIN&&n<=BSON_INT32_MAX)return new int_32(n);if(n>=BSON_INT64_MIN&&n<=BSON_INT64_MAX)return new long_1.fromNumber(n)}return new double_1(n)}if(null==n||"object"!==_typeof$2(n))return n;if(n.$undefined)return null;for(var i=Object.keys(n).filter(function(t){return t.startsWith("$")&&null!=n[t]}),o=0;o<i.length;o++){var s=keysToCodecs[i[o]];if(s)return s.fromExtendedJSON(n,r)}if(null!=n.$date){var a=n.$date,u=new Date;return"string"==typeof a?u.setTime(Date.parse(a)):long_1.isLong(a)?u.setTime(a.toNumber()):"number"==typeof a&&r.relaxed&&u.setTime(a),u}if(null!=n.$code){var l=Object.assign({},n);return n.$scope&&(l.$scope=deserializeValue(t,null,n.$scope)),code.fromExtendedJSON(n)}if(null!=n.$ref||null!=n.$dbPointer){var c=n.$ref?n:n.$dbPointer;if(c instanceof db_ref)return c;var h=!0;if(Object.keys(c).filter(function(t){return t.startsWith("$")}).forEach(function(t){-1===["$ref","$id","$db"].indexOf(t)&&(h=!1)}),h)return db_ref.fromExtendedJSON(c)}return n}function parse(t,e){var n=this;return"boolean"==typeof(e=Object.assign({},{relaxed:!0},e)).relaxed&&(e.strict=!e.relaxed),"boolean"==typeof e.strict&&(e.relaxed=!e.strict),JSON.parse(t,function(t,r){return deserializeValue(n,t,r,e)})}var BSON_INT32_MAX=2147483647,BSON_INT32_MIN=-2147483648,BSON_INT64_MAX=0x8000000000000000,BSON_INT64_MIN=-0x8000000000000000;function stringify(t,e,n,r){null!=n&&"object"===_typeof$2(n)&&(r=n,n=0),null==e||"object"!==_typeof$2(e)||Array.isArray(e)||(r=e,e=null,n=0),r=Object.assign({},{relaxed:!0},r);var i=Array.isArray(t)?serializeArray(t,r):serializeDocument(t,r);return JSON.stringify(i,e,n)}function serialize(t,e){return e=e||{},JSON.parse(stringify(t,e))}function deserialize(t,e){return e=e||{},parse(JSON.stringify(t),e)}function serializeArray(t,e){return t.map(function(t){return serializeValue(t,e)})}function getISOString(t){var e=t.toISOString();return 0!==t.getUTCMilliseconds()?e:e.slice(0,-5)+"Z"}function serializeValue(t,e){if(Array.isArray(t))return serializeArray(t,e);if(void 0===t)return null;if(t instanceof Date){var n=t.getTime(),r=n>-1&&n<2534023188e5;return e.relaxed&&r?{$date:getISOString(t)}:{$date:{$numberLong:t.getTime().toString()}}}if("number"==typeof t&&!e.relaxed){if(Math.floor(t)===t){var i=t>=BSON_INT64_MIN&&t<=BSON_INT64_MAX;if(t>=BSON_INT32_MIN&&t<=BSON_INT32_MAX)return{$numberInt:t.toString()};if(i)return{$numberLong:t.toString()}}return{$numberDouble:t.toString()}}if(t instanceof RegExp){var o=t.flags;return void 0===o&&(o=t.toString().match(/[gimuy]*$/)[0]),new regexp(t.source,o).toExtendedJSON()}return null!=t&&"object"===_typeof$2(t)?serializeDocument(t,e):t}var BSON_TYPE_MAPPINGS={Binary:function(t){return new binary(t.value(),t.subtype)},Code:function(t){return new code(t.code,t.scope)},DBRef:function(t){return new db_ref(t.collection||t.namespace,t.oid,t.db,t.fields)},Decimal128:function(t){return new decimal128(t.bytes)},Double:function(t){return new double_1(t.value)},Int32:function(t){return new int_32(t.value)},Long:function(t){return long_1.fromBits(null!=t.low?t.low:t.low_,null!=t.low?t.high:t.high_,null!=t.low?t.unsigned:t.unsigned_)},MaxKey:function(){return new max_key},MinKey:function(){return new min_key},ObjectID:function(t){return new objectid(t)},ObjectId:function(t){return new objectid(t)},BSONRegExp:function(t){return new regexp(t.pattern,t.options)},Symbol:function(t){return new symbol(t.value)},Timestamp:function(t){return timestamp.fromBits(t.low,t.high)}};function serializeDocument(t,e){if(null==t||"object"!==_typeof$2(t))throw new Error("not an object instance");var n=t._bsontype;if(void 0===n){var r={};for(var i in t)r[i]=serializeValue(t[i],e);return r}if("string"==typeof n){var o=t;if("function"!=typeof o.toExtendedJSON){var s=BSON_TYPE_MAPPINGS[n];if(!s)throw new TypeError("Unrecognized or invalid _bsontype: "+n);o=s(o)}return"Code"===n&&o.scope?o=new code(o.code,serializeValue(o.scope,e)):"DBRef"===n&&o.oid&&(o=new db_ref(o.collection,serializeValue(o.oid,e),o.db,o.fields)),o.toExtendedJSON(e)}throw new Error("_bsontype must be a string, but was: "+_typeof$2(n))}var extended_json={parse:parse,deserialize:deserialize,serialize:serialize,stringify:stringify},FIRST_BIT=128,FIRST_TWO_BITS=192,FIRST_THREE_BITS=224,FIRST_FOUR_BITS=240,FIRST_FIVE_BITS=248,TWO_BIT_CHAR=192,THREE_BIT_CHAR=224,FOUR_BIT_CHAR=240,CONTINUING_CHAR=128;function validateUtf8(t,e,n){for(var r=0,i=e;i<n;i+=1){var o=t[i];if(r){if((o&FIRST_TWO_BITS)!==CONTINUING_CHAR)return!1;r-=1}else if(o&FIRST_BIT)if((o&FIRST_THREE_BITS)===TWO_BIT_CHAR)r=1;else if((o&FIRST_FOUR_BITS)===THREE_BIT_CHAR)r=2;else{if((o&FIRST_FIVE_BITS)!==FOUR_BIT_CHAR)return!1;r=3}}return!r}var validateUtf8_1=validateUtf8,validate_utf8={validateUtf8:validateUtf8_1},Buffer$4=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,validateUtf8$1=validate_utf8.validateUtf8,JS_INT_MAX_LONG=long_1.fromNumber(constants.JS_INT_MAX),JS_INT_MIN_LONG=long_1.fromNumber(constants.JS_INT_MIN),functionCache={};function deserialize$1(t,e,n){var r=(e=null==e?{}:e)&&e.index?e.index:0,i=t[r]|t[r+1]<<8|t[r+2]<<16|t[r+3]<<24;if(i<5)throw new Error("bson size must be >= 5, is ".concat(i));if(e.allowObjectSmallerThanBufferSize&&t.length<i)throw new Error("buffer length ".concat(t.length," must be >= bson size ").concat(i));if(!e.allowObjectSmallerThanBufferSize&&t.length!==i)throw new Error("buffer length ".concat(t.length," must === bson size ").concat(i));if(i+r>t.length)throw new Error("(bson size ".concat(i," + options.index ").concat(r," must be <= buffer length ").concat(Buffer$4.byteLength(t),")"));if(0!==t[r+i-1])throw new Error("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");return deserializeObject(t,r,e,n)}function deserializeObject(t,e,n,r){var i=null!=n.evalFunctions&&n.evalFunctions,o=null!=n.cacheFunctions&&n.cacheFunctions,s=null!=n.cacheFunctionsCrc32&&n.cacheFunctionsCrc32;if(!s)var a=null;var u=null==n.fieldsAsRaw?null:n.fieldsAsRaw,l=null!=n.raw&&n.raw,c="boolean"==typeof n.bsonRegExp&&n.bsonRegExp,h=null!=n.promoteBuffers&&n.promoteBuffers,f=null==n.promoteLongs||n.promoteLongs,d=null==n.promoteValues||n.promoteValues,p=e;if(t.length<5)throw new Error("corrupt bson message < 5 bytes long");var _=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;if(_<5||_>t.length)throw new Error("corrupt bson message");for(var y=r?[]:{},m=0;;){var g=t[e++];if(0===g)break;for(var v=e;0!==t[v]&&v<t.length;)v++;if(v>=Buffer$4.byteLength(t))throw new Error("Bad BSON Document: illegal CString");var b=r?m++:t.toString("utf8",e,v);if(e=v+1,g===constants.BSON_DATA_STRING){var w=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;if(w<=0||w>t.length-e||0!==t[e+w-1])throw new Error("bad string length in bson");if(!validateUtf8$1(t,e,e+w-1))throw new Error("Invalid UTF-8 string in BSON document");var E=t.toString("utf8",e,e+w-1);y[b]=E,e+=w}else if(g===constants.BSON_DATA_OID){var S=Buffer$4.alloc(12);t.copy(S,0,e,e+12),y[b]=new objectid(S),e+=12}else if(g===constants.BSON_DATA_INT&&!1===d)y[b]=new int_32(t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24);else if(g===constants.BSON_DATA_INT)y[b]=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;else if(g===constants.BSON_DATA_NUMBER&&!1===d)y[b]=new double_1(t.readDoubleLE(e)),e+=8;else if(g===constants.BSON_DATA_NUMBER)y[b]=t.readDoubleLE(e),e+=8;else if(g===constants.BSON_DATA_DATE){var A=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24,N=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;y[b]=new Date(new long_1(A,N).toNumber())}else if(g===constants.BSON_DATA_BOOLEAN){if(0!==t[e]&&1!==t[e])throw new Error("illegal boolean type value");y[b]=1===t[e++]}else if(g===constants.BSON_DATA_OBJECT){var T=e,O=t[e]|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24;if(O<=0||O>t.length-e)throw new Error("bad embedded document length in bson");y[b]=l?t.slice(e,e+O):deserializeObject(t,T,n,!1),e+=O}else if(g===constants.BSON_DATA_ARRAY){var P=e,C=t[e]|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24,x=n,I=e+C;if(u&&u[b]){for(var R in x={},n)x[R]=n[R];x.raw=!0}if(y[b]=deserializeObject(t,P,x,!0),0!==t[(e+=C)-1])throw new Error("invalid array terminator byte");if(e!==I)throw new Error("corrupted array bson")}else if(g===constants.BSON_DATA_UNDEFINED)y[b]=void 0;else if(g===constants.BSON_DATA_NULL)y[b]=null;else if(g===constants.BSON_DATA_LONG){var B=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24,D=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24,M=new long_1(B,D);y[b]=f&&!0===d&&M.lessThanOrEqual(JS_INT_MAX_LONG)&&M.greaterThanOrEqual(JS_INT_MIN_LONG)?M.toNumber():M}else if(g===constants.BSON_DATA_DECIMAL128){var U=Buffer$4.alloc(16);t.copy(U,0,e,e+16),e+=16;var k=new decimal128(U);y[b]=k.toObject?k.toObject():k}else if(g===constants.BSON_DATA_BINARY){var L=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24,F=L,j=t[e++];if(L<0)throw new Error("Negative binary type element size found");if(L>Buffer$4.byteLength(t))throw new Error("Binary type size larger than document size");if(null!=t.slice){if(j===binary.SUBTYPE_BYTE_ARRAY){if((L=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(L>F-4)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(L<F-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}y[b]=h&&d?t.slice(e,e+L):new binary(t.slice(e,e+L),j)}else{var $="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(L)):new Array(L);if(j===binary.SUBTYPE_BYTE_ARRAY){if((L=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(L>F-4)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(L<F-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}for(v=0;v<L;v++)$[v]=t[e+v];y[b]=h&&d?$:new binary($,j)}e+=L}else if(g===constants.BSON_DATA_REGEXP&&!1===c){for(v=e;0!==t[v]&&v<t.length;)v++;if(v>=t.length)throw new Error("Bad BSON Document: illegal CString");var z=t.toString("utf8",e,v);for(v=e=v+1;0!==t[v]&&v<t.length;)v++;if(v>=t.length)throw new Error("Bad BSON Document: illegal CString");var Y=t.toString("utf8",e,v);e=v+1;var V=new Array(Y.length);for(v=0;v<Y.length;v++)switch(Y[v]){case"m":V[v]="m";break;case"s":V[v]="g";break;case"i":V[v]="i"}y[b]=new RegExp(z,V.join(""))}else if(g===constants.BSON_DATA_REGEXP&&!0===c){for(v=e;0!==t[v]&&v<t.length;)v++;if(v>=t.length)throw new Error("Bad BSON Document: illegal CString");var q=t.toString("utf8",e,v);for(v=e=v+1;0!==t[v]&&v<t.length;)v++;if(v>=t.length)throw new Error("Bad BSON Document: illegal CString");var H=t.toString("utf8",e,v);e=v+1,y[b]=new regexp(q,H)}else if(g===constants.BSON_DATA_SYMBOL){var W=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;if(W<=0||W>t.length-e||0!==t[e+W-1])throw new Error("bad string length in bson");y[b]=t.toString("utf8",e,e+W-1),e+=W}else if(g===constants.BSON_DATA_TIMESTAMP){var J=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24,K=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;y[b]=new timestamp(J,K)}else if(g===constants.BSON_DATA_MIN_KEY)y[b]=new min_key;else if(g===constants.BSON_DATA_MAX_KEY)y[b]=new max_key;else if(g===constants.BSON_DATA_CODE){var G=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;if(G<=0||G>t.length-e||0!==t[e+G-1])throw new Error("bad string length in bson");var X=t.toString("utf8",e,e+G-1);if(i)if(o){var Z=s?a(X):X;y[b]=isolateEvalWithHash(functionCache,Z,X,y)}else y[b]=isolateEval(X);else y[b]=new code(X);e+=G}else if(g===constants.BSON_DATA_CODE_W_SCOPE){var Q=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;if(Q<13)throw new Error("code_w_scope total size shorter minimum expected length");var tt=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;if(tt<=0||tt>t.length-e||0!==t[e+tt-1])throw new Error("bad string length in bson");var et=t.toString("utf8",e,e+tt-1),nt=e+=tt,rt=t[e]|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24,it=deserializeObject(t,nt,n,!1);if(e+=rt,Q<8+rt+tt)throw new Error("code_w_scope total size is to short, truncating scope");if(Q>8+rt+tt)throw new Error("code_w_scope total size is to long, clips outer document");if(i){if(o){var ot=s?a(et):et;y[b]=isolateEvalWithHash(functionCache,ot,et,y)}else y[b]=isolateEval(et);y[b].scope=it}else y[b]=new code(et,it)}else{if(g!==constants.BSON_DATA_DBPOINTER)throw new Error("Detected unknown BSON type "+g.toString(16)+' for fieldname "'+b+'", are you using the latest BSON parser?');var st=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;if(st<=0||st>t.length-e||0!==t[e+st-1])throw new Error("bad string length in bson");if(!validateUtf8$1(t,e,e+st-1))throw new Error("Invalid UTF-8 string in BSON document");var at=t.toString("utf8",e,e+st-1);e+=st;var ut=Buffer$4.alloc(12);t.copy(ut,0,e,e+12);var lt=new objectid(ut);e+=12,y[b]=new db_ref(at,lt)}}if(_!==e-p){if(r)throw new Error("corrupt array bson");throw new Error("corrupt object bson")}var ct=!0;if(Object.keys(y).filter(function(t){return t.startsWith("$")}).forEach(function(t){-1===["$ref","$id","$db"].indexOf(t)&&(ct=!1)}),!ct)return y;if(null!=y.$id&&null!=y.$ref){var ht=Object.assign({},y);return delete ht.$ref,delete ht.$id,delete ht.$db,new db_ref(y.$ref,y.$id,y.$db||null,ht)}return y}function isolateEvalWithHash(functionCache,hash,functionString,object){var value=null;return null==functionCache[hash]&&(eval("value = "+functionString),functionCache[hash]=value),functionCache[hash].bind(object)}function isolateEval(functionString){var value=null;return eval("value = "+functionString),value}var deserializer=deserialize$1;function readIEEE754(t,e,n,r,i){var o,s,a="big"===n,u=8*i-r-1,l=(1<<u)-1,c=l>>1,h=-7,f=a?0:i-1,d=a?1:-1,p=t[e+f];for(f+=d,o=p&(1<<-h)-1,p>>=-h,h+=u;h>0;o=256*o+t[e+f],f+=d,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=r;h>0;s=256*s+t[e+f],f+=d,h-=8);if(0===o)o=1-c;else{if(o===l)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,r),o-=c}return(p?-1:1)*s*Math.pow(2,o-r)}function writeIEEE754(t,e,n,r,i,o){var s,a,u,l="big"===r,c=8*o-i-1,h=(1<<c)-1,f=h>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=l?o-1:0,_=l?-1:1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+f>=1?d/u:d*Math.pow(2,1-f))*u>=2&&(s++,u/=2),s+f>=h?(a=0,s=h):s+f>=1?(a=(e*u-1)*Math.pow(2,i),s+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,i),s=0)),isNaN(e)&&(a=0);i>=8;)t[n+p]=255&a,p+=_,a/=256,i-=8;for(s=s<<i|a,isNaN(e)&&(s+=8),c+=i;c>0;)t[n+p]=255&s,p+=_,s/=256,c-=8;t[n+p-_]|=128*y}var float_parser={readIEEE754:readIEEE754,writeIEEE754:writeIEEE754};function _typeof$3(t){return(_typeof$3="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var Buffer$5=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,writeIEEE754$1=float_parser.writeIEEE754,normalizedFunctionString$1=utils.normalizedFunctionString,regexp$1=/\x00/,ignoreKeys=new Set(["$db","$ref","$id","$clusterTime"]),isDate$1=function(t){return"object"===_typeof$3(t)&&"[object Date]"===Object.prototype.toString.call(t)},isRegExp$1=function(t){return"[object RegExp]"===Object.prototype.toString.call(t)};function serializeString(t,e,n,r,i){t[r++]=constants.BSON_DATA_STRING,t[(r=r+(i?t.write(e,r,"ascii"):t.write(e,r,"utf8"))+1)-1]=0;var o=t.write(n,r+4,"utf8");return t[r+3]=o+1>>24&255,t[r+2]=o+1>>16&255,t[r+1]=o+1>>8&255,t[r]=o+1&255,r=r+4+o,t[r++]=0,r}function serializeNumber(t,e,n,r,i){if(Math.floor(n)===n&&n>=constants.JS_INT_MIN&&n<=constants.JS_INT_MAX)if(n>=constants.BSON_INT32_MIN&&n<=constants.BSON_INT32_MAX)t[r++]=constants.BSON_DATA_INT,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,t[r++]=255&n,t[r++]=n>>8&255,t[r++]=n>>16&255,t[r++]=n>>24&255;else if(n>=constants.JS_INT_MIN&&n<=constants.JS_INT_MAX){t[r++]=constants.BSON_DATA_NUMBER,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,writeIEEE754$1(t,n,r,"little",52,8),r+=8}else{t[r++]=constants.BSON_DATA_LONG,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var o=long_1.fromNumber(n),s=o.getLowBits(),a=o.getHighBits();t[r++]=255&s,t[r++]=s>>8&255,t[r++]=s>>16&255,t[r++]=s>>24&255,t[r++]=255&a,t[r++]=a>>8&255,t[r++]=a>>16&255,t[r++]=a>>24&255}else t[r++]=constants.BSON_DATA_NUMBER,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,writeIEEE754$1(t,n,r,"little",52,8),r+=8;return r}function serializeNull(t,e,n,r,i){return t[r++]=constants.BSON_DATA_NULL,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,r}function serializeBoolean(t,e,n,r,i){return t[r++]=constants.BSON_DATA_BOOLEAN,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,t[r++]=n?1:0,r}function serializeDate(t,e,n,r,i){t[r++]=constants.BSON_DATA_DATE,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var o=long_1.fromNumber(n.getTime()),s=o.getLowBits(),a=o.getHighBits();return t[r++]=255&s,t[r++]=s>>8&255,t[r++]=s>>16&255,t[r++]=s>>24&255,t[r++]=255&a,t[r++]=a>>8&255,t[r++]=a>>16&255,t[r++]=a>>24&255,r}function serializeRegExp(t,e,n,r,i){if(t[r++]=constants.BSON_DATA_REGEXP,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,n.source&&null!=n.source.match(regexp$1))throw Error("value "+n.source+" must not contain null bytes");return r+=t.write(n.source,r,"utf8"),t[r++]=0,n.ignoreCase&&(t[r++]=105),n.global&&(t[r++]=115),n.multiline&&(t[r++]=109),t[r++]=0,r}function serializeBSONRegExp(t,e,n,r,i){if(t[r++]=constants.BSON_DATA_REGEXP,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,null!=n.pattern.match(regexp$1))throw Error("pattern "+n.pattern+" must not contain null bytes");return r+=t.write(n.pattern,r,"utf8"),t[r++]=0,r+=t.write(n.options.split("").sort().join(""),r,"utf8"),t[r++]=0,r}function serializeMinMax(t,e,n,r,i){return null===n?t[r++]=constants.BSON_DATA_NULL:"MinKey"===n._bsontype?t[r++]=constants.BSON_DATA_MIN_KEY:t[r++]=constants.BSON_DATA_MAX_KEY,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,r}function serializeObjectId(t,e,n,r,i){if(t[r++]=constants.BSON_DATA_OID,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,"string"==typeof n.id)t.write(n.id,r,"binary");else{if(!n.id||!n.id.copy)throw new TypeError("object ["+JSON.stringify(n)+"] is not a valid ObjectId");n.id.copy(t,r,0,12)}return r+12}function serializeBuffer(t,e,n,r,i){t[r++]=constants.BSON_DATA_BINARY,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var o=n.length;return t[r++]=255&o,t[r++]=o>>8&255,t[r++]=o>>16&255,t[r++]=o>>24&255,t[r++]=constants.BSON_BINARY_SUBTYPE_DEFAULT,n.copy(t,r,0,o),r+=o}function serializeObject(t,e,n,r,i,o,s,a,u,l){for(var c=0;c<l.length;c++)if(l[c]===n)throw new Error("cyclic dependency detected");l.push(n),t[r++]=Array.isArray(n)?constants.BSON_DATA_ARRAY:constants.BSON_DATA_OBJECT,r+=u?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var h=serializeInto(t,n,i,r,o+1,s,a,l);return l.pop(),h}function serializeDecimal128(t,e,n,r,i){return t[r++]=constants.BSON_DATA_DECIMAL128,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,n.bytes.copy(t,r,0,16),r+16}function serializeLong(t,e,n,r,i){t[r++]="Long"===n._bsontype?constants.BSON_DATA_LONG:constants.BSON_DATA_TIMESTAMP,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var o=n.getLowBits(),s=n.getHighBits();return t[r++]=255&o,t[r++]=o>>8&255,t[r++]=o>>16&255,t[r++]=o>>24&255,t[r++]=255&s,t[r++]=s>>8&255,t[r++]=s>>16&255,t[r++]=s>>24&255,r}function serializeInt32(t,e,n,r,i){return t[r++]=constants.BSON_DATA_INT,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,t[r++]=255&n,t[r++]=n>>8&255,t[r++]=n>>16&255,t[r++]=n>>24&255,r}function serializeDouble(t,e,n,r,i){return t[r++]=constants.BSON_DATA_NUMBER,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,writeIEEE754$1(t,n.value,r,"little",52,8),r+=8}function serializeFunction(t,e,n,r,i,o,s){t[r++]=constants.BSON_DATA_CODE,r+=s?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var a=normalizedFunctionString$1(n),u=t.write(a,r+4,"utf8")+1;return t[r]=255&u,t[r+1]=u>>8&255,t[r+2]=u>>16&255,t[r+3]=u>>24&255,r=r+4+u-1,t[r++]=0,r}function serializeCode(t,e,n,r,i,o,s,a,u){if(n.scope&&"object"===_typeof$3(n.scope)){t[r++]=constants.BSON_DATA_CODE_W_SCOPE,r+=u?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var l=r,c="string"==typeof n.code?n.code:n.code.toString();r+=4;var h=t.write(c,r+4,"utf8")+1;t[r]=255&h,t[r+1]=h>>8&255,t[r+2]=h>>16&255,t[r+3]=h>>24&255,t[r+4+h-1]=0,r=r+h+4;var f=serializeInto(t,n.scope,i,r,o+1,s,a);r=f-1;var d=f-l;t[l++]=255&d,t[l++]=d>>8&255,t[l++]=d>>16&255,t[l++]=d>>24&255,t[r++]=0}else{t[r++]=constants.BSON_DATA_CODE,r+=u?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var p=n.code.toString(),_=t.write(p,r+4,"utf8")+1;t[r]=255&_,t[r+1]=_>>8&255,t[r+2]=_>>16&255,t[r+3]=_>>24&255,r=r+4+_-1,t[r++]=0}return r}function serializeBinary(t,e,n,r,i){t[r++]=constants.BSON_DATA_BINARY,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var o=n.value(!0),s=n.position;return n.sub_type===binary.SUBTYPE_BYTE_ARRAY&&(s+=4),t[r++]=255&s,t[r++]=s>>8&255,t[r++]=s>>16&255,t[r++]=s>>24&255,t[r++]=n.sub_type,n.sub_type===binary.SUBTYPE_BYTE_ARRAY&&(s-=4,t[r++]=255&s,t[r++]=s>>8&255,t[r++]=s>>16&255,t[r++]=s>>24&255),o.copy(t,r,0,n.position),r+=n.position}function serializeSymbol(t,e,n,r,i){t[r++]=constants.BSON_DATA_SYMBOL,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var o=t.write(n.value,r+4,"utf8")+1;return t[r]=255&o,t[r+1]=o>>8&255,t[r+2]=o>>16&255,t[r+3]=o>>24&255,r=r+4+o-1,t[r++]=0,r}function serializeDBRef(t,e,n,r,i,o,s){t[r++]=constants.BSON_DATA_OBJECT,r+=s?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var a,u=r,l={$ref:n.collection||n.namespace,$id:n.oid};null!=n.db&&(l.$db=n.db);var c=(a=serializeInto(t,l=Object.assign(l,n.fields),!1,r,i+1,o))-u;return t[u++]=255&c,t[u++]=c>>8&255,t[u++]=c>>16&255,t[u++]=c>>24&255,a}function serializeInto(t,e,n,r,i,o,s,a){r=r||0,(a=a||[]).push(e);var u=r+4;if(Array.isArray(e))for(var l=0;l<e.length;l++){var c=""+l,h=e[l];if(h&&h.toBSON){if("function"!=typeof h.toBSON)throw new TypeError("toBSON is not a function");h=h.toBSON()}var f=_typeof$3(h);if("string"===f)u=serializeString(t,c,h,u,!0);else if("number"===f)u=serializeNumber(t,c,h,u,!0);else if("boolean"===f)u=serializeBoolean(t,c,h,u,!0);else if(h instanceof Date||isDate$1(h))u=serializeDate(t,c,h,u,!0);else if(void 0===h)u=serializeNull(t,c,h,u,!0);else if(null===h)u=serializeNull(t,c,h,u,!0);else if("ObjectId"===h._bsontype||"ObjectID"===h._bsontype)u=serializeObjectId(t,c,h,u,!0);else if(Buffer$5.isBuffer(h))u=serializeBuffer(t,c,h,u,!0);else if(h instanceof RegExp||isRegExp$1(h))u=serializeRegExp(t,c,h,u,!0);else if("object"===f&&null==h._bsontype)u=serializeObject(t,c,h,u,n,i,o,s,!0,a);else if("object"===f&&"Decimal128"===h._bsontype)u=serializeDecimal128(t,c,h,u,!0);else if("Long"===h._bsontype||"Timestamp"===h._bsontype)u=serializeLong(t,c,h,u,!0);else if("Double"===h._bsontype)u=serializeDouble(t,c,h,u,!0);else if("function"==typeof h&&o)u=serializeFunction(t,c,h,u,n,i,o,!0);else if("Code"===h._bsontype)u=serializeCode(t,c,h,u,n,i,o,s,!0);else if("Binary"===h._bsontype)u=serializeBinary(t,c,h,u,!0);else if("Symbol"===h._bsontype)u=serializeSymbol(t,c,h,u,!0);else if("DBRef"===h._bsontype)u=serializeDBRef(t,c,h,u,i,o,!0);else if("BSONRegExp"===h._bsontype)u=serializeBSONRegExp(t,c,h,u,!0);else if("Int32"===h._bsontype)u=serializeInt32(t,c,h,u,!0);else if("MinKey"===h._bsontype||"MaxKey"===h._bsontype)u=serializeMinMax(t,c,h,u,!0);else if(void 0!==h._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+h._bsontype)}else if(e instanceof map)for(var d=e.entries(),p=!1;!p;){var _=d.next();if(!(p=_.done)){var y=_.value[0],m=_.value[1],g=_typeof$3(m);if("string"==typeof y&&!ignoreKeys.has(y)){if(null!=y.match(regexp$1))throw Error("key "+y+" must not contain null bytes");if(n){if("$"===y[0])throw Error("key "+y+" must not start with '$'");if(~y.indexOf("."))throw Error("key "+y+" must not contain '.'")}}if("string"===g)u=serializeString(t,y,m,u);else if("number"===g)u=serializeNumber(t,y,m,u);else if("boolean"===g)u=serializeBoolean(t,y,m,u);else if(m instanceof Date||isDate$1(m))u=serializeDate(t,y,m,u);else if(null===m||void 0===m&&!1===s)u=serializeNull(t,y,m,u);else if("ObjectId"===m._bsontype||"ObjectID"===m._bsontype)u=serializeObjectId(t,y,m,u);else if(Buffer$5.isBuffer(m))u=serializeBuffer(t,y,m,u);else if(m instanceof RegExp||isRegExp$1(m))u=serializeRegExp(t,y,m,u);else if("object"===g&&null==m._bsontype)u=serializeObject(t,y,m,u,n,i,o,s,!1,a);else if("object"===g&&"Decimal128"===m._bsontype)u=serializeDecimal128(t,y,m,u);else if("Long"===m._bsontype||"Timestamp"===m._bsontype)u=serializeLong(t,y,m,u);else if("Double"===m._bsontype)u=serializeDouble(t,y,m,u);else if("Code"===m._bsontype)u=serializeCode(t,y,m,u,n,i,o,s);else if("function"==typeof m&&o)u=serializeFunction(t,y,m,u,n,i,o);else if("Binary"===m._bsontype)u=serializeBinary(t,y,m,u);else if("Symbol"===m._bsontype)u=serializeSymbol(t,y,m,u);else if("DBRef"===m._bsontype)u=serializeDBRef(t,y,m,u,i,o);else if("BSONRegExp"===m._bsontype)u=serializeBSONRegExp(t,y,m,u);else if("Int32"===m._bsontype)u=serializeInt32(t,y,m,u);else if("MinKey"===m._bsontype||"MaxKey"===m._bsontype)u=serializeMinMax(t,y,m,u);else if(void 0!==m._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+m._bsontype)}}else{if(e.toBSON){if("function"!=typeof e.toBSON)throw new TypeError("toBSON is not a function");if(null!=(e=e.toBSON())&&"object"!==_typeof$3(e))throw new TypeError("toBSON function did not return an object")}for(var v in e){var b=e[v];if(b&&b.toBSON){if("function"!=typeof b.toBSON)throw new TypeError("toBSON is not a function");b=b.toBSON()}var w=_typeof$3(b);if("string"==typeof v&&!ignoreKeys.has(v)){if(null!=v.match(regexp$1))throw Error("key "+v+" must not contain null bytes");if(n){if("$"===v[0])throw Error("key "+v+" must not start with '$'");if(~v.indexOf("."))throw Error("key "+v+" must not contain '.'")}}if("string"===w)u=serializeString(t,v,b,u);else if("number"===w)u=serializeNumber(t,v,b,u);else if("boolean"===w)u=serializeBoolean(t,v,b,u);else if(b instanceof Date||isDate$1(b))u=serializeDate(t,v,b,u);else if(void 0===b)!1===s&&(u=serializeNull(t,v,b,u));else if(null===b)u=serializeNull(t,v,b,u);else if("ObjectId"===b._bsontype||"ObjectID"===b._bsontype)u=serializeObjectId(t,v,b,u);else if(Buffer$5.isBuffer(b))u=serializeBuffer(t,v,b,u);else if(b instanceof RegExp||isRegExp$1(b))u=serializeRegExp(t,v,b,u);else if("object"===w&&null==b._bsontype)u=serializeObject(t,v,b,u,n,i,o,s,!1,a);else if("object"===w&&"Decimal128"===b._bsontype)u=serializeDecimal128(t,v,b,u);else if("Long"===b._bsontype||"Timestamp"===b._bsontype)u=serializeLong(t,v,b,u);else if("Double"===b._bsontype)u=serializeDouble(t,v,b,u);else if("Code"===b._bsontype)u=serializeCode(t,v,b,u,n,i,o,s);else if("function"==typeof b&&o)u=serializeFunction(t,v,b,u,n,i,o);else if("Binary"===b._bsontype)u=serializeBinary(t,v,b,u);else if("Symbol"===b._bsontype)u=serializeSymbol(t,v,b,u);else if("DBRef"===b._bsontype)u=serializeDBRef(t,v,b,u,i,o);else if("BSONRegExp"===b._bsontype)u=serializeBSONRegExp(t,v,b,u);else if("Int32"===b._bsontype)u=serializeInt32(t,v,b,u);else if("MinKey"===b._bsontype||"MaxKey"===b._bsontype)u=serializeMinMax(t,v,b,u);else if(void 0!==b._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+b._bsontype)}}a.pop(),t[u++]=0;var E=u-r;return t[r++]=255&E,t[r++]=E>>8&255,t[r++]=E>>16&255,t[r++]=E>>24&255,u}var serializer=serializeInto;function _typeof$4(t){return(_typeof$4="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var Buffer$6=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,normalizedFunctionString$2=utils.normalizedFunctionString;function isDate$2(t){return"object"===_typeof$4(t)&&"[object Date]"===Object.prototype.toString.call(t)}function calculateObjectSize(t,e,n){var r=5;if(Array.isArray(t))for(var i=0;i<t.length;i++)r+=calculateElement(i.toString(),t[i],e,!0,n);else for(var o in t.toBSON&&(t=t.toBSON()),t)r+=calculateElement(o,t[o],e,!1,n);return r}function calculateElement(t,e,n,r,i){switch(e&&e.toBSON&&(e=e.toBSON()),_typeof$4(e)){case"string":return 1+Buffer$6.byteLength(t,"utf8")+1+4+Buffer$6.byteLength(e,"utf8")+1;case"number":return Math.floor(e)===e&&e>=constants.JS_INT_MIN&&e<=constants.JS_INT_MAX&&e>=constants.BSON_INT32_MIN&&e<=constants.BSON_INT32_MAX?(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+5:(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+9;case"undefined":return r||!i?(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1:0;case"boolean":return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+2;case"object":if(null==e||"MinKey"===e._bsontype||"MaxKey"===e._bsontype)return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1;if("ObjectId"===e._bsontype||"ObjectID"===e._bsontype)return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+13;if(e instanceof Date||isDate$2(e))return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+9;if(void 0!==Buffer$6&&Buffer$6.isBuffer(e))return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+6+e.length;if("Long"===e._bsontype||"Double"===e._bsontype||"Timestamp"===e._bsontype)return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+9;if("Decimal128"===e._bsontype)return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+17;if("Code"===e._bsontype)return null!=e.scope&&Object.keys(e.scope).length>0?(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1+4+4+Buffer$6.byteLength(e.code.toString(),"utf8")+1+calculateObjectSize(e.scope,n,i):(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1+4+Buffer$6.byteLength(e.code.toString(),"utf8")+1;if("Binary"===e._bsontype)return e.sub_type===binary.SUBTYPE_BYTE_ARRAY?(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+(e.position+1+4+1+4):(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+(e.position+1+4+1);if("Symbol"===e._bsontype)return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+Buffer$6.byteLength(e.value,"utf8")+4+1+1;if("DBRef"===e._bsontype){var o=Object.assign({$ref:e.collection,$id:e.oid},e.fields);return null!=e.db&&(o.$db=e.db),(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1+calculateObjectSize(o,n,i)}return e instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(e)?(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1+Buffer$6.byteLength(e.source,"utf8")+1+(e.global?1:0)+(e.ignoreCase?1:0)+(e.multiline?1:0)+1:"BSONRegExp"===e._bsontype?(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1+Buffer$6.byteLength(e.pattern,"utf8")+1+Buffer$6.byteLength(e.options,"utf8")+1:(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+calculateObjectSize(e,n,i)+1;case"function":if(e instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(e)||"[object RegExp]"===String.call(e))return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1+Buffer$6.byteLength(e.source,"utf8")+1+(e.global?1:0)+(e.ignoreCase?1:0)+(e.multiline?1:0)+1;if(n&&null!=e.scope&&Object.keys(e.scope).length>0)return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1+4+4+Buffer$6.byteLength(normalizedFunctionString$2(e),"utf8")+1+calculateObjectSize(e.scope,n,i);if(n)return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1+4+Buffer$6.byteLength(normalizedFunctionString$2(e),"utf8")+1}return 0}var calculate_size=calculateObjectSize,Buffer$7=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,ensure_buffer=function(t){if(t instanceof Buffer$7)return t;if(t instanceof Uint8Array)return Buffer$7.from(t.buffer);throw new TypeError("Must use either Buffer or Uint8Array")},Buffer$8=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,MAXSIZE=17825792,buffer$1=Buffer$8.alloc(MAXSIZE);function setInternalBufferSize(t){buffer$1.length<t&&(buffer$1=Buffer$8.alloc(t))}function serialize$1(t,e){var n="boolean"==typeof(e=e||{}).checkKeys&&e.checkKeys,r="boolean"==typeof e.serializeFunctions&&e.serializeFunctions,i="boolean"!=typeof e.ignoreUndefined||e.ignoreUndefined,o="number"==typeof e.minInternalBufferSize?e.minInternalBufferSize:MAXSIZE;buffer$1.length<o&&(buffer$1=Buffer$8.alloc(o));var s=serializer(buffer$1,t,n,0,0,r,i,[]),a=Buffer$8.alloc(s);return buffer$1.copy(a,0,0,a.length),a}function serializeWithBufferAndIndex(t,e,n){var r="boolean"==typeof(n=n||{}).checkKeys&&n.checkKeys,i="boolean"==typeof n.serializeFunctions&&n.serializeFunctions,o="boolean"!=typeof n.ignoreUndefined||n.ignoreUndefined,s="number"==typeof n.index?n.index:0,a=serializer(buffer$1,t,r,0,0,i,o);return buffer$1.copy(e,s,0,a),s+a-1}function deserialize$2(t,e){return t=ensure_buffer(t),deserializer(t,e)}function calculateObjectSize$1(t,e){var n="boolean"==typeof(e=e||{}).serializeFunctions&&e.serializeFunctions,r="boolean"!=typeof e.ignoreUndefined||e.ignoreUndefined;return calculate_size(t,n,r)}function deserializeStream(t,e,n,r,i,o){o=Object.assign({allowObjectSmallerThanBufferSize:!0},o),t=ensure_buffer(t);for(var s=e,a=0;a<n;a++){var u=t[s]|t[s+1]<<8|t[s+2]<<16|t[s+3]<<24;o.index=s,r[i+a]=deserializer(t,o),s+=u}return s}var bson={BSON_INT32_MAX:constants.BSON_INT32_MAX,BSON_INT32_MIN:constants.BSON_INT32_MIN,BSON_INT64_MAX:constants.BSON_INT64_MAX,BSON_INT64_MIN:constants.BSON_INT64_MIN,JS_INT_MAX:constants.JS_INT_MAX,JS_INT_MIN:constants.JS_INT_MIN,BSON_DATA_NUMBER:constants.BSON_DATA_NUMBER,BSON_DATA_STRING:constants.BSON_DATA_STRING,BSON_DATA_OBJECT:constants.BSON_DATA_OBJECT,BSON_DATA_ARRAY:constants.BSON_DATA_ARRAY,BSON_DATA_BINARY:constants.BSON_DATA_BINARY,BSON_DATA_UNDEFINED:constants.BSON_DATA_UNDEFINED,BSON_DATA_OID:constants.BSON_DATA_OID,BSON_DATA_BOOLEAN:constants.BSON_DATA_BOOLEAN,BSON_DATA_DATE:constants.BSON_DATA_DATE,BSON_DATA_NULL:constants.BSON_DATA_NULL,BSON_DATA_REGEXP:constants.BSON_DATA_REGEXP,BSON_DATA_DBPOINTER:constants.BSON_DATA_DBPOINTER,BSON_DATA_CODE:constants.BSON_DATA_CODE,BSON_DATA_SYMBOL:constants.BSON_DATA_SYMBOL,BSON_DATA_CODE_W_SCOPE:constants.BSON_DATA_CODE_W_SCOPE,BSON_DATA_INT:constants.BSON_DATA_INT,BSON_DATA_TIMESTAMP:constants.BSON_DATA_TIMESTAMP,BSON_DATA_LONG:constants.BSON_DATA_LONG,BSON_DATA_DECIMAL128:constants.BSON_DATA_DECIMAL128,BSON_DATA_MIN_KEY:constants.BSON_DATA_MIN_KEY,BSON_DATA_MAX_KEY:constants.BSON_DATA_MAX_KEY,BSON_BINARY_SUBTYPE_DEFAULT:constants.BSON_BINARY_SUBTYPE_DEFAULT,BSON_BINARY_SUBTYPE_FUNCTION:constants.BSON_BINARY_SUBTYPE_FUNCTION,BSON_BINARY_SUBTYPE_BYTE_ARRAY:constants.BSON_BINARY_SUBTYPE_BYTE_ARRAY,BSON_BINARY_SUBTYPE_UUID:constants.BSON_BINARY_SUBTYPE_UUID,BSON_BINARY_SUBTYPE_MD5:constants.BSON_BINARY_SUBTYPE_MD5,BSON_BINARY_SUBTYPE_USER_DEFINED:constants.BSON_BINARY_SUBTYPE_USER_DEFINED,Code:code,Map:map,BSONSymbol:symbol,DBRef:db_ref,Binary:binary,ObjectId:objectid,Long:long_1,Timestamp:timestamp,Double:double_1,Int32:int_32,MinKey:min_key,MaxKey:max_key,BSONRegExp:regexp,Decimal128:decimal128,serialize:serialize$1,serializeWithBufferAndIndex:serializeWithBufferAndIndex,deserialize:deserialize$2,calculateObjectSize:calculateObjectSize$1,deserializeStream:deserializeStream,setInternalBufferSize:setInternalBufferSize,ObjectID:objectid,EJSON:extended_json},bson_1=bson.BSON_INT32_MAX,bson_2=bson.BSON_INT32_MIN,bson_3=bson.BSON_INT64_MAX,bson_4=bson.BSON_INT64_MIN,bson_5=bson.JS_INT_MAX,bson_6=bson.JS_INT_MIN,bson_7=bson.BSON_DATA_NUMBER,bson_8=bson.BSON_DATA_STRING,bson_9=bson.BSON_DATA_OBJECT,bson_10=bson.BSON_DATA_ARRAY,bson_11=bson.BSON_DATA_BINARY,bson_12=bson.BSON_DATA_UNDEFINED,bson_13=bson.BSON_DATA_OID,bson_14=bson.BSON_DATA_BOOLEAN,bson_15=bson.BSON_DATA_DATE,bson_16=bson.BSON_DATA_NULL,bson_17=bson.BSON_DATA_REGEXP,bson_18=bson.BSON_DATA_DBPOINTER,bson_19=bson.BSON_DATA_CODE,bson_20=bson.BSON_DATA_SYMBOL,bson_21=bson.BSON_DATA_CODE_W_SCOPE,bson_22=bson.BSON_DATA_INT,bson_23=bson.BSON_DATA_TIMESTAMP,bson_24=bson.BSON_DATA_LONG,bson_25=bson.BSON_DATA_DECIMAL128,bson_26=bson.BSON_DATA_MIN_KEY,bson_27=bson.BSON_DATA_MAX_KEY,bson_28=bson.BSON_BINARY_SUBTYPE_DEFAULT,bson_29=bson.BSON_BINARY_SUBTYPE_FUNCTION,bson_30=bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY,bson_31=bson.BSON_BINARY_SUBTYPE_UUID,bson_32=bson.BSON_BINARY_SUBTYPE_MD5,bson_33=bson.BSON_BINARY_SUBTYPE_USER_DEFINED,bson_34=bson.Code,bson_35=bson.BSONSymbol,bson_36=bson.DBRef,bson_37=bson.Binary,bson_38=bson.ObjectId,bson_39=bson.Long,bson_40=bson.Timestamp,bson_41=bson.Double,bson_42=bson.Int32,bson_43=bson.MinKey,bson_44=bson.MaxKey,bson_45=bson.BSONRegExp,bson_46=bson.Decimal128,bson_47=bson.serialize,bson_48=bson.serializeWithBufferAndIndex,bson_49=bson.deserialize,bson_50=bson.calculateObjectSize,bson_51=bson.deserializeStream,bson_52=bson.setInternalBufferSize,bson_53=bson.ObjectID,bson_54=bson.EJSON;__webpack_exports__.b=bson}).call(this,__webpack_require__(8),__webpack_require__(1).Buffer)},1:function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(9),i=n(72),o=n(73);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return l(this,t,e,n)}function l(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=f(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,n),i=(t=a(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|d(e.length);return 0===(t=a(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||function(t){return t!=t}(e.length)?a(t,0):f(t,e);if("Buffer"===e.type&&o(e.data))return f(t,e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(c(e),t=a(t,e<0?0:0|d(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function f(t,e){var n=e.length<0?0:0|d(e.length);t=a(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function d(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function p(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return j(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return $(t).length;default:if(r)return j(t).length;e=(""+e).toLowerCase(),r=!0}}function _(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function y(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:m(t,e,n,r,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):m(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,n,r,i){var o,s=1,a=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,n/=2}function l(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var c=-1;for(o=n;o<a;o++)if(l(t,o)===l(e,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===u)return c*s}else-1!==c&&(o-=o-c),c=-1}else for(n+u>a&&(n=a-u),o=n;o>=0;o--){for(var h=!0,f=0;f<u;f++)if(l(t,o+f)!==l(e,f)){h=!1;break}if(h)return o}return-1}function g(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[n+s]=a}return s}function v(t,e,n,r){return z(j(e,t.length-n),t,n,r)}function b(t,e,n,r){return z(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function w(t,e,n,r){return b(t,e,n,r)}function E(t,e,n,r){return z($(e),t,n,r)}function S(t,e,n,r){return z(function(t,e){for(var n,r,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function A(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function N(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,s,a,u,l=t[i],c=null,h=l>239?4:l>223?3:l>191?2:1;if(i+h<=n)switch(h){case 1:l<128&&(c=l);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&l)<<6|63&o)>127&&(c=u);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(u=(15&l)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&l)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(c=u)}null===c?(c=65533,h=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),i+=h}return function(t){var e=t.length;if(e<=T)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=T));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return l(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return c(e),e<=0?a(t,e):void 0!==n?"string"==typeof r?a(t,e).fill(n,r):a(t,e).fill(n):a(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return h(null,t)},u.allocUnsafeSlow=function(t){return h(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var s=t[n];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,i),i+=s.length}return r},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)_(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)_(this,e,e+3),_(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)_(this,e,e+7),_(this,e+1,e+6),_(this,e+2,e+5),_(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?N(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return C(this,e,n);case"utf8":case"utf-8":return N(this,e,n);case"ascii":return O(this,e,n);case"latin1":case"binary":return P(this,e,n);case"base64":return A(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(e>>>=0,n>>>=0,r>>>=0,i>>>=0,this===t)return 0;for(var o=i-r,s=n-e,a=Math.min(o,s),l=this.slice(r,i),c=t.slice(e,n),h=0;h<a;++h)if(l[h]!==c[h]){o=l[h],s=c[h];break}return o<s?-1:s<o?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return y(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return y(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return g(this,t,e,n);case"utf8":case"utf-8":return v(this,t,e,n);case"ascii":return b(this,t,e,n);case"latin1":case"binary":return w(this,t,e,n);case"base64":return E(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var T=4096;function O(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function P(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function C(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=F(t[o]);return i}function x(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function I(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function R(t,e,n,r,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function B(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function D(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function M(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function U(t,e,n,r,o){return o||M(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function k(t,e,n,r,o){return o||M(t,0,n,8),i.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if(t=~~t,e=void 0===e?r:~~e,t<0?(t+=r)<0&&(t=0):t>r&&(t=r),e<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;n=new u(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||I(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||I(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},u.prototype.readUInt8=function(t,e){return e||I(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||I(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||I(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||I(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||I(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||I(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||I(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return e||I(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||I(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||I(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||I(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||I(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||I(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||I(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||I(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||I(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||R(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||R(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):B(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):B(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):D(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):D(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);R(this,t,e,n,i-1,-i)}var o=0,s=1,a=0;for(this[e]=255&t;++o<n&&(s*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);R(this,t,e,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):B(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):B(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):D(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||R(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):D(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return U(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return U(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return k(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return k(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var s=u.isBuffer(t)?t:j(new u(t,r).toString()),a=s.length;for(o=0;o<n-e;++o)this[o+e]=s[o%a]}return this};var L=/[^+\/0-9A-Za-z-_]/g;function F(t){return t<16?"0"+t.toString(16):t.toString(16)}function j(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],s=0;s<r;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function $(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(L,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function z(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(8))},17:function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var u,l=[],c=!1,h=-1;function f(){c&&u&&(c=!1,u.length?l=u.concat(l):h=-1,l.length&&d())}function d(){if(!c){var t=a(f);c=!0;for(var e=l.length;e;){for(u=l,l=[];++h<e;)u&&u[h].run();h=-1,e=l.length}u=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function _(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new p(t,e)),1!==l.length||c||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=_,i.addListener=_,i.once=_,i.off=_,i.removeListener=_,i.removeAllListeners=_,i.emit=_,i.prependListener=_,i.prependOnceListener=_,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},24:function(t,e,n){"use strict";(function(t,n){class r{constructor(t){this.tasks=[],this.count=t}sched(){if(this.count>0&&this.tasks.length>0){this.count--;let t=this.tasks.shift();if(void 0===t)throw"Unexpected undefined value in tasks list";t()}}acquire(){return new Promise((e,r)=>{this.tasks.push(()=>{var t=!1;e(()=>{t||(t=!0,this.count++,this.sched())})}),t&&t.nextTick?t.nextTick(this.sched.bind(this)):n(this.sched.bind(this))})}use(t){return this.acquire().then(e=>t().then(t=>(e(),t)).catch(t=>{throw e(),t}))}}e.Semaphore=r;e.Mutex=class extends r{constructor(){super(1)}}}).call(this,n(17),n(70).setImmediate)},25:function(t,e,n){(function(e){function n(t){var e=o([["iOS",/iP(hone|od|ad)/],["Android OS",/Android/],["BlackBerry OS",/BlackBerry|BB10/],["Windows Mobile",/IEMobile/],["Amazon OS",/Kindle/],["Windows 3.11",/Win16/],["Windows 95",/(Windows 95)|(Win95)|(Windows_95)/],["Windows 98",/(Windows 98)|(Win98)/],["Windows 2000",/(Windows NT 5.0)|(Windows 2000)/],["Windows XP",/(Windows NT 5.1)|(Windows XP)/],["Windows Server 2003",/(Windows NT 5.2)/],["Windows Vista",/(Windows NT 6.0)/],["Windows 7",/(Windows NT 6.1)/],["Windows 8",/(Windows NT 6.2)/],["Windows 8.1",/(Windows NT 6.3)/],["Windows 10",/(Windows NT 10.0)/],["Windows ME",/Windows ME/],["Open BSD",/OpenBSD/],["Sun OS",/SunOS/],["Linux",/(Linux)|(X11)/],["Mac OS",/(Mac_PowerPC)|(Macintosh)/],["QNX",/QNX/],["BeOS",/BeOS/],["OS/2",/OS\/2/],["Search Bot",/(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\/Teoma)|(ia_archiver)/]]).filter(function(e){return e.rule&&e.rule.test(t)})[0];return e?e.name:null}function r(){return void 0!==e&&e.version&&{name:"node",version:e.version.slice(1),os:e.platform}}function i(t){var e=o([["aol",/AOLShield\/([0-9\._]+)/],["edge",/Edge\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["vivaldi",/Vivaldi\/([0-9\.]+)/],["kakaotalk",/KAKAOTALK\s([0-9\.]+)/],["samsung",/SamsungBrowser\/([0-9\.]+)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["phantomjs",/PhantomJS\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["fxios",/FxiOS\/([0-9\.]+)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)$/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/],["facebook",/FBAV\/([0-9\.]+)/],["instagram",/Instagram\s([0-9\.]+)/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Mobile/]]);if(!t)return null;var r=e.map(function(e){var n=e.rule.exec(t),r=n&&n[1].split(/[._]/).slice(0,3);return r&&r.length<3&&(r=r.concat(1==r.length?[0,0]:[0])),n&&{name:e.name,version:r.join(".")}}).filter(Boolean)[0]||null;return r&&(r.os=n(t)),/alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/i.test(t)&&((r=r||{}).bot=!0),r}function o(t){return t.map(function(t){return{name:t[0],rule:t[1]}})}t.exports={detect:function(){return"undefined"!=typeof navigator?i(navigator.userAgent):r()},detectOS:n,getNodeVersion:r,parseUserAgent:i}}).call(this,n(17))},3:function(t,e){t.exports=r;var n=null;try{n=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(t){}function r(t,e,n){this.low=0|t,this.high=0|e,this.unsigned=!!n}function i(t){return!0===(t&&t.__isLong__)}r.prototype.__isLong__,Object.defineProperty(r.prototype,"__isLong__",{value:!0}),r.isLong=i;var o={},s={};function a(t,e){var n,r,i;return e?(i=0<=(t>>>=0)&&t<256)&&(r=s[t])?r:(n=l(t,(0|t)<0?-1:0,!0),i&&(s[t]=n),n):(i=-128<=(t|=0)&&t<128)&&(r=o[t])?r:(n=l(t,t<0?-1:0,!1),i&&(o[t]=n),n)}function u(t,e){if(isNaN(t))return e?g:m;if(e){if(t<0)return g;if(t>=p)return S}else{if(t<=-_)return A;if(t+1>=_)return E}return t<0?u(-t,e).neg():l(t%d|0,t/d|0,e)}function l(t,e,n){return new r(t,e,n)}r.fromInt=a,r.fromNumber=u,r.fromBits=l;var c=Math.pow;function h(t,e,n){if(0===t.length)throw Error("empty string");if("NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return m;if("number"==typeof e?(n=e,e=!1):e=!!e,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return h(t.substring(1),e,n).neg();for(var i=u(c(n,8)),o=m,s=0;s<t.length;s+=8){var a=Math.min(8,t.length-s),l=parseInt(t.substring(s,s+a),n);if(a<8){var f=u(c(n,a));o=o.mul(f).add(u(l))}else o=(o=o.mul(i)).add(u(l))}return o.unsigned=e,o}function f(t,e){return"number"==typeof t?u(t,e):"string"==typeof t?h(t,e):l(t.low,t.high,"boolean"==typeof e?e:t.unsigned)}r.fromString=h,r.fromValue=f;var d=4294967296,p=d*d,_=p/2,y=a(1<<24),m=a(0);r.ZERO=m;var g=a(0,!0);r.UZERO=g;var v=a(1);r.ONE=v;var b=a(1,!0);r.UONE=b;var w=a(-1);r.NEG_ONE=w;var E=l(-1,2147483647,!1);r.MAX_VALUE=E;var S=l(-1,-1,!0);r.MAX_UNSIGNED_VALUE=S;var A=l(0,-2147483648,!1);r.MIN_VALUE=A;var N=r.prototype;N.toInt=function(){return this.unsigned?this.low>>>0:this.low},N.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0)},N.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(A)){var e=u(t),n=this.div(e),r=n.mul(e).sub(this);return n.toString(t)+r.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var i=u(c(t,6),this.unsigned),o=this,s="";;){var a=o.div(i),l=(o.sub(a.mul(i)).toInt()>>>0).toString(t);if((o=a).isZero())return l+s;for(;l.length<6;)l="0"+l;s=""+l+s}},N.getHighBits=function(){return this.high},N.getHighBitsUnsigned=function(){return this.high>>>0},N.getLowBits=function(){return this.low},N.getLowBitsUnsigned=function(){return this.low>>>0},N.getNumBitsAbs=function(){if(this.isNegative())return this.eq(A)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&0==(t&1<<e);e--);return 0!=this.high?e+33:e+1},N.isZero=function(){return 0===this.high&&0===this.low},N.eqz=N.isZero,N.isNegative=function(){return!this.unsigned&&this.high<0},N.isPositive=function(){return this.unsigned||this.high>=0},N.isOdd=function(){return 1==(1&this.low)},N.isEven=function(){return 0==(1&this.low)},N.equals=function(t){return i(t)||(t=f(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&(this.high===t.high&&this.low===t.low)},N.eq=N.equals,N.notEquals=function(t){return!this.eq(t)},N.neq=N.notEquals,N.ne=N.notEquals,N.lessThan=function(t){return this.comp(t)<0},N.lt=N.lessThan,N.lessThanOrEqual=function(t){return this.comp(t)<=0},N.lte=N.lessThanOrEqual,N.le=N.lessThanOrEqual,N.greaterThan=function(t){return this.comp(t)>0},N.gt=N.greaterThan,N.greaterThanOrEqual=function(t){return this.comp(t)>=0},N.gte=N.greaterThanOrEqual,N.ge=N.greaterThanOrEqual,N.compare=function(t){if(i(t)||(t=f(t)),this.eq(t))return 0;var e=this.isNegative(),n=t.isNegative();return e&&!n?-1:!e&&n?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},N.comp=N.compare,N.negate=function(){return!this.unsigned&&this.eq(A)?A:this.not().add(v)},N.neg=N.negate,N.add=function(t){i(t)||(t=f(t));var e=this.high>>>16,n=65535&this.high,r=this.low>>>16,o=65535&this.low,s=t.high>>>16,a=65535&t.high,u=t.low>>>16,c=0,h=0,d=0,p=0;return d+=(p+=o+(65535&t.low))>>>16,h+=(d+=r+u)>>>16,c+=(h+=n+a)>>>16,c+=e+s,l((d&=65535)<<16|(p&=65535),(c&=65535)<<16|(h&=65535),this.unsigned)},N.subtract=function(t){return i(t)||(t=f(t)),this.add(t.neg())},N.sub=N.subtract,N.multiply=function(t){if(this.isZero())return m;if(i(t)||(t=f(t)),n)return l(n.mul(this.low,this.high,t.low,t.high),n.get_high(),this.unsigned);if(t.isZero())return m;if(this.eq(A))return t.isOdd()?A:m;if(t.eq(A))return this.isOdd()?A:m;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(y)&&t.lt(y))return u(this.toNumber()*t.toNumber(),this.unsigned);var e=this.high>>>16,r=65535&this.high,o=this.low>>>16,s=65535&this.low,a=t.high>>>16,c=65535&t.high,h=t.low>>>16,d=65535&t.low,p=0,_=0,g=0,v=0;return g+=(v+=s*d)>>>16,_+=(g+=o*d)>>>16,g&=65535,_+=(g+=s*h)>>>16,p+=(_+=r*d)>>>16,_&=65535,p+=(_+=o*h)>>>16,_&=65535,p+=(_+=s*c)>>>16,p+=e*d+r*h+o*c+s*a,l((g&=65535)<<16|(v&=65535),(p&=65535)<<16|(_&=65535),this.unsigned)},N.mul=N.multiply,N.divide=function(t){if(i(t)||(t=f(t)),t.isZero())throw Error("division by zero");var e,r,o;if(n)return this.unsigned||-2147483648!==this.high||-1!==t.low||-1!==t.high?l((this.unsigned?n.div_u:n.div_s)(this.low,this.high,t.low,t.high),n.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?g:m;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return g;if(t.gt(this.shru(1)))return b;o=g}else{if(this.eq(A))return t.eq(v)||t.eq(w)?A:t.eq(A)?v:(e=this.shr(1).div(t).shl(1)).eq(m)?t.isNegative()?v:w:(r=this.sub(t.mul(e)),o=e.add(r.div(t)));else if(t.eq(A))return this.unsigned?g:m;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();o=m}for(r=this;r.gte(t);){e=Math.max(1,Math.floor(r.toNumber()/t.toNumber()));for(var s=Math.ceil(Math.log(e)/Math.LN2),a=s<=48?1:c(2,s-48),h=u(e),d=h.mul(t);d.isNegative()||d.gt(r);)d=(h=u(e-=a,this.unsigned)).mul(t);h.isZero()&&(h=v),o=o.add(h),r=r.sub(d)}return o},N.div=N.divide,N.modulo=function(t){return i(t)||(t=f(t)),n?l((this.unsigned?n.rem_u:n.rem_s)(this.low,this.high,t.low,t.high),n.get_high(),this.unsigned):this.sub(this.div(t).mul(t))},N.mod=N.modulo,N.rem=N.modulo,N.not=function(){return l(~this.low,~this.high,this.unsigned)},N.and=function(t){return i(t)||(t=f(t)),l(this.low&t.low,this.high&t.high,this.unsigned)},N.or=function(t){return i(t)||(t=f(t)),l(this.low|t.low,this.high|t.high,this.unsigned)},N.xor=function(t){return i(t)||(t=f(t)),l(this.low^t.low,this.high^t.high,this.unsigned)},N.shiftLeft=function(t){return i(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?l(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):l(0,this.low<<t-32,this.unsigned)},N.shl=N.shiftLeft,N.shiftRight=function(t){return i(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?l(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):l(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},N.shr=N.shiftRight,N.shiftRightUnsigned=function(t){if(i(t)&&(t=t.toInt()),0===(t&=63))return this;var e=this.high;return t<32?l(this.low>>>t|e<<32-t,e>>>t,this.unsigned):l(32===t?e:e>>>t-32,0,this.unsigned)},N.shru=N.shiftRightUnsigned,N.shr_u=N.shiftRightUnsigned,N.toSigned=function(){return this.unsigned?l(this.low,this.high,!1):this},N.toUnsigned=function(){return this.unsigned?this:l(this.low,this.high,!0)},N.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},N.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24,255&t,t>>>8&255,t>>>16&255,t>>>24]},N.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24,t>>>16&255,t>>>8&255,255&t,e>>>24,e>>>16&255,e>>>8&255,255&e]},r.fromBytes=function(t,e,n){return n?r.fromBytesLE(t,e):r.fromBytesBE(t,e)},r.fromBytesLE=function(t,e){return new r(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,e)},r.fromBytesBE=function(t,e){return new r(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],e)}},69:function(t,e,n){},70:function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(71),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(8))},71:function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i=1,o={},s=!1,a=t.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(t);u=u&&u.setTimeout?u:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){c(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?function(){var e="setImmediate$"+Math.random()+"$",n=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(e)&&c(+n.data.slice(e.length))};t.addEventListener?t.addEventListener("message",n,!1):t.attachEvent("onmessage",n),r=function(n){t.postMessage(e+n,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){c(t.data)},r=function(e){t.port2.postMessage(e)}}():a&&"onreadystatechange"in a.createElement("script")?function(){var t=a.documentElement;r=function(e){var n=a.createElement("script");n.onreadystatechange=function(){c(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():r=function(t){setTimeout(c,0,t)},u.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var s={callback:t,args:e};return o[i]=s,r(i),i++},u.clearImmediate=l}function l(t){delete o[t]}function c(t){if(s)setTimeout(c,0,t);else{var e=o[t];if(e){s=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{l(t),s=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(8),n(17))},72:function(t,e){e.read=function(t,e,n,r,i){var o,s,a=8*i-r-1,u=(1<<a)-1,l=u>>1,c=-7,h=n?i-1:0,f=n?-1:1,d=t[e+h];for(h+=f,o=d&(1<<-c)-1,d>>=-c,c+=a;c>0;o=256*o+t[e+h],h+=f,c-=8);for(s=o&(1<<-c)-1,o>>=-c,c+=r;c>0;s=256*s+t[e+h],h+=f,c-=8);if(0===o)o=1-l;else{if(o===u)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,r),o-=l}return(d?-1:1)*s*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var s,a,u,l=8*o-i-1,c=(1<<l)-1,h=c>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,p=r?1:-1,_=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=c):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+h>=1?f/u:f*Math.pow(2,1-h))*u>=2&&(s++,u/=2),s+h>=c?(a=0,s=c):s+h>=1?(a=(e*u-1)*Math.pow(2,i),s+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;t[n+d]=255&a,d+=p,a/=256,i-=8);for(s=s<<i|a,l+=i;l>0;t[n+d]=255&s,d+=p,s/=256,l-=8);t[n+d-p]|=128*_}},73:function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},74:function(t,e,n){"use strict";n.r(e);n(69);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const r="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,i=(t,e,n=null)=>{for(;e!==n;){const n=e.nextSibling;t.removeChild(e),e=n}},o=`{{lit-${String(Math.random()).slice(2)}}}`,s=`\x3c!--${o}--\x3e`,a=new RegExp(`${o}|${s}`),u="$lit$";class l{constructor(t,e){this.parts=[],this.element=e;const n=[],r=[],i=document.createTreeWalker(e.content,133,null,!1);let s=0,l=-1,h=0;const{strings:p,values:{length:_}}=t;for(;h<_;){const t=i.nextNode();if(null!==t){if(l++,1===t.nodeType){if(t.hasAttributes()){const e=t.attributes,{length:n}=e;let r=0;for(let t=0;t<n;t++)c(e[t].name,u)&&r++;for(;r-- >0;){const e=p[h],n=d.exec(e)[2],r=n.toLowerCase()+u,i=t.getAttribute(r);t.removeAttribute(r);const o=i.split(a);this.parts.push({type:"attribute",index:l,name:n,strings:o}),h+=o.length-1}}"TEMPLATE"===t.tagName&&(r.push(t),i.currentNode=t.content)}else if(3===t.nodeType){const e=t.data;if(e.indexOf(o)>=0){const r=t.parentNode,i=e.split(a),o=i.length-1;for(let e=0;e<o;e++){let n,o=i[e];if(""===o)n=f();else{const t=d.exec(o);null!==t&&c(t[2],u)&&(o=o.slice(0,t.index)+t[1]+t[2].slice(0,-u.length)+t[3]),n=document.createTextNode(o)}r.insertBefore(n,t),this.parts.push({type:"node",index:++l})}""===i[o]?(r.insertBefore(f(),t),n.push(t)):t.data=i[o],h+=o}}else if(8===t.nodeType)if(t.data===o){const e=t.parentNode;null!==t.previousSibling&&l!==s||(l++,e.insertBefore(f(),t)),s=l,this.parts.push({type:"node",index:l}),null===t.nextSibling?t.data="":(n.push(t),l--),h++}else{let e=-1;for(;-1!==(e=t.data.indexOf(o,e+1));)this.parts.push({type:"node",index:-1}),h++}}else i.currentNode=r.pop()}for(const t of n)t.parentNode.removeChild(t)}}const c=(t,e)=>{const n=t.length-e.length;return n>=0&&t.slice(n)===e},h=t=>-1!==t.index,f=()=>document.createComment(""),d=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/,p=133;function _(t,e){const{element:{content:n},parts:r}=t,i=document.createTreeWalker(n,p,null,!1);let o=m(r),s=r[o],a=-1,u=0;const l=[];let c=null;for(;i.nextNode();){a++;const t=i.currentNode;for(t.previousSibling===c&&(c=null),e.has(t)&&(l.push(t),null===c&&(c=t)),null!==c&&u++;void 0!==s&&s.index===a;)s.index=null!==c?-1:s.index-u,s=r[o=m(r,o)]}l.forEach(t=>t.parentNode.removeChild(t))}const y=t=>{let e=11===t.nodeType?0:1;const n=document.createTreeWalker(t,p,null,!1);for(;n.nextNode();)e++;return e},m=(t,e=-1)=>{for(let n=e+1;n<t.length;n++){const e=t[n];if(h(e))return n}return-1};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const g=new WeakMap,v=t=>"function"==typeof t&&g.has(t),b={},w={};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class E{constructor(t,e,n){this.__parts=[],this.template=t,this.processor=e,this.options=n}update(t){let e=0;for(const n of this.__parts)void 0!==n&&n.setValue(t[e]),e++;for(const t of this.__parts)void 0!==t&&t.commit()}_clone(){const t=r?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),e=[],n=this.template.parts,i=document.createTreeWalker(t,133,null,!1);let o,s=0,a=0,u=i.nextNode();for(;s<n.length;)if(o=n[s],h(o)){for(;a<o.index;)a++,"TEMPLATE"===u.nodeName&&(e.push(u),i.currentNode=u.content),null===(u=i.nextNode())&&(i.currentNode=e.pop(),u=i.nextNode());if("node"===o.type){const t=this.processor.handleTextExpression(this.options);t.insertAfterNode(u.previousSibling),this.__parts.push(t)}else this.__parts.push(...this.processor.handleAttributeExpressions(u,o.name,o.strings,this.options));s++}else this.__parts.push(void 0),s++;return r&&(document.adoptNode(t),customElements.upgrade(t)),t}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const S=` ${o} `;class A{constructor(t,e,n,r){this.strings=t,this.values=e,this.type=n,this.processor=r}getHTML(){const t=this.strings.length-1;let e="",n=!1;for(let r=0;r<t;r++){const t=this.strings[r],i=t.lastIndexOf("\x3c!--");n=(i>-1||n)&&-1===t.indexOf("--\x3e",i+1);const a=d.exec(t);e+=null===a?t+(n?S:s):t.substr(0,a.index)+a[1]+a[2]+u+a[3]+o}return e+=this.strings[t]}getTemplateElement(){const t=document.createElement("template");return t.innerHTML=this.getHTML(),t}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const N=t=>null===t||!("object"==typeof t||"function"==typeof t),T=t=>Array.isArray(t)||!(!t||!t[Symbol.iterator]);class O{constructor(t,e,n){this.dirty=!0,this.element=t,this.name=e,this.strings=n,this.parts=[];for(let t=0;t<n.length-1;t++)this.parts[t]=this._createPart()}_createPart(){return new P(this)}_getValue(){const t=this.strings,e=t.length-1;let n="";for(let r=0;r<e;r++){n+=t[r];const e=this.parts[r];if(void 0!==e){const t=e.value;if(N(t)||!T(t))n+="string"==typeof t?t:String(t);else for(const e of t)n+="string"==typeof e?e:String(e)}}return n+=t[e]}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class P{constructor(t){this.value=void 0,this.committer=t}setValue(t){t===b||N(t)&&t===this.value||(this.value=t,v(t)||(this.committer.dirty=!0))}commit(){for(;v(this.value);){const t=this.value;this.value=b,t(this)}this.value!==b&&this.committer.commit()}}class C{constructor(t){this.value=void 0,this.__pendingValue=void 0,this.options=t}appendInto(t){this.startNode=t.appendChild(f()),this.endNode=t.appendChild(f())}insertAfterNode(t){this.startNode=t,this.endNode=t.nextSibling}appendIntoPart(t){t.__insert(this.startNode=f()),t.__insert(this.endNode=f())}insertAfterPart(t){t.__insert(this.startNode=f()),this.endNode=t.endNode,t.endNode=this.startNode}setValue(t){this.__pendingValue=t}commit(){if(null===this.startNode.parentNode)return;for(;v(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=b,t(this)}const t=this.__pendingValue;t!==b&&(N(t)?t!==this.value&&this.__commitText(t):t instanceof A?this.__commitTemplateResult(t):t instanceof Node?this.__commitNode(t):T(t)?this.__commitIterable(t):t===w?(this.value=w,this.clear()):this.__commitText(t))}__insert(t){this.endNode.parentNode.insertBefore(t,this.endNode)}__commitNode(t){this.value!==t&&(this.clear(),this.__insert(t),this.value=t)}__commitText(t){const e=this.startNode.nextSibling,n="string"==typeof(t=null==t?"":t)?t:String(t);e===this.endNode.previousSibling&&3===e.nodeType?e.data=n:this.__commitNode(document.createTextNode(n)),this.value=t}__commitTemplateResult(t){const e=this.options.templateFactory(t);if(this.value instanceof E&&this.value.template===e)this.value.update(t.values);else{const n=new E(e,t.processor,this.options),r=n._clone();n.update(t.values),this.__commitNode(r),this.value=n}}__commitIterable(t){Array.isArray(this.value)||(this.value=[],this.clear());const e=this.value;let n,r=0;for(const i of t)void 0===(n=e[r])&&(n=new C(this.options),e.push(n),0===r?n.appendIntoPart(this):n.insertAfterPart(e[r-1])),n.setValue(i),n.commit(),r++;r<e.length&&(e.length=r,this.clear(n&&n.endNode))}clear(t=this.startNode){i(this.startNode.parentNode,t.nextSibling,this.endNode)}}class x{constructor(t,e,n){if(this.value=void 0,this.__pendingValue=void 0,2!==n.length||""!==n[0]||""!==n[1])throw new Error("Boolean attributes can only contain a single expression");this.element=t,this.name=e,this.strings=n}setValue(t){this.__pendingValue=t}commit(){for(;v(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=b,t(this)}if(this.__pendingValue===b)return;const t=!!this.__pendingValue;this.value!==t&&(t?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=t),this.__pendingValue=b}}class I extends O{constructor(t,e,n){super(t,e,n),this.single=2===n.length&&""===n[0]&&""===n[1]}_createPart(){return new R(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class R extends P{}let B=!1;(()=>{try{const t={get capture(){return B=!0,!1}};window.addEventListener("test",t,t),window.removeEventListener("test",t,t)}catch(t){}})();class D{constructor(t,e,n){this.value=void 0,this.__pendingValue=void 0,this.element=t,this.eventName=e,this.eventContext=n,this.__boundHandleEvent=(t=>this.handleEvent(t))}setValue(t){this.__pendingValue=t}commit(){for(;v(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=b,t(this)}if(this.__pendingValue===b)return;const t=this.__pendingValue,e=this.value,n=null==t||null!=e&&(t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive),r=null!=t&&(null==e||n);n&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),r&&(this.__options=M(t),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=t,this.__pendingValue=b}handleEvent(t){"function"==typeof this.value?this.value.call(this.eventContext||this.element,t):this.value.handleEvent(t)}}const M=t=>t&&(B?{capture:t.capture,passive:t.passive,once:t.once}:t.capture);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */function U(t){let e=k.get(t.type);void 0===e&&(e={stringsArray:new WeakMap,keyString:new Map},k.set(t.type,e));let n=e.stringsArray.get(t.strings);if(void 0!==n)return n;const r=t.strings.join(o);return void 0===(n=e.keyString.get(r))&&(n=new l(t,t.getTemplateElement()),e.keyString.set(r,n)),e.stringsArray.set(t.strings,n),n}const k=new Map,L=new WeakMap;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const F=new
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class{handleAttributeExpressions(t,e,n,r){const i=e[0];return"."===i?new I(t,e.slice(1),n).parts:"@"===i?[new D(t,e.slice(1),r.eventContext)]:"?"===i?[new x(t,e.slice(1),n)]:new O(t,e,n).parts}handleTextExpression(t){return new C(t)}};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.2.1");const j=(t,...e)=>new A(t,e,"html",F),$=(t,e)=>`${t}--${e}`;let z=!0;void 0===window.ShadyCSS?z=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1."),z=!1);const Y=["html","svg"],V=new Set,q=(t,e,n)=>{V.add(t);const r=n?n.element:document.createElement("template"),i=e.querySelectorAll("style"),{length:o}=i;if(0===o)return void window.ShadyCSS.prepareTemplateStyles(r,t);const s=document.createElement("style");for(let t=0;t<o;t++){const e=i[t];e.parentNode.removeChild(e),s.textContent+=e.textContent}(t=>{Y.forEach(e=>{const n=k.get($(e,t));void 0!==n&&n.keyString.forEach(t=>{const{element:{content:e}}=t,n=new Set;Array.from(e.querySelectorAll("style")).forEach(t=>{n.add(t)}),_(t,n)})})})(t);const a=r.content;n?function(t,e,n=null){const{element:{content:r},parts:i}=t;if(null===n||void 0===n)return void r.appendChild(e);const o=document.createTreeWalker(r,p,null,!1);let s=m(i),a=0,u=-1;for(;o.nextNode();)for(u++,o.currentNode===n&&(a=y(e),n.parentNode.insertBefore(e,n));-1!==s&&i[s].index===u;){if(a>0){for(;-1!==s;)i[s].index+=a,s=m(i,s);return}s=m(i,s)}}(n,s,a.firstChild):a.insertBefore(s,a.firstChild),window.ShadyCSS.prepareTemplateStyles(r,t);const u=a.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==u)e.insertBefore(u.cloneNode(!0),e.firstChild);else if(n){a.insertBefore(s,a.firstChild);const t=new Set;t.add(s),_(n,t)}};window.JSCompiler_renameProperty=((t,e)=>t);const H={toAttribute(t,e){switch(e){case Boolean:return t?"":null;case Object:case Array:return null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){switch(e){case Boolean:return null!==t;case Number:return null===t?null:Number(t);case Object:case Array:return JSON.parse(t)}return t}},W=(t,e)=>e!==t&&(e==e||t==t),J={attribute:!0,type:String,converter:H,reflect:!1,hasChanged:W},K=1,G=4,X=8,Z=16,Q="finalized";class tt extends HTMLElement{constructor(){super(),this._updateState=0,this._instanceProperties=void 0,this._updatePromise=new Promise(t=>this._enableUpdatingResolver=t),this._changedProperties=new Map,this._reflectingProperties=void 0,this.initialize()}static get observedAttributes(){this.finalize();const t=[];return this._classProperties.forEach((e,n)=>{const r=this._attributeNameForProperty(n,e);void 0!==r&&(this._attributeToPropertyMap.set(r,n),t.push(r))}),t}static _ensureClassProperties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;const t=Object.getPrototypeOf(this)._classProperties;void 0!==t&&t.forEach((t,e)=>this._classProperties.set(e,t))}}static createProperty(t,e=J){if(this._ensureClassProperties(),this._classProperties.set(t,e),e.noAccessor||this.prototype.hasOwnProperty(t))return;const n="symbol"==typeof t?Symbol():`__${t}`,r=this.getPropertyDescriptor(t,n,e);void 0!==r&&Object.defineProperty(this.prototype,t,r)}static getPropertyDescriptor(t,e,n){return{get(){return this[e]},set(n){const r=this[t];this[e]=n,this._requestUpdate(t,r)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this._classProperties&&this._classProperties.get(t)||J}static finalize(){const t=Object.getPrototypeOf(this);if(t.hasOwnProperty(Q)||t.finalize(),this[Q]=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){const t=this.properties,e=[...Object.getOwnPropertyNames(t),..."function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t):[]];for(const n of e)this.createProperty(n,t[n])}}static _attributeNameForProperty(t,e){const n=e.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof t?t.toLowerCase():void 0}static _valueHasChanged(t,e,n=W){return n(t,e)}static _propertyValueFromAttribute(t,e){const n=e.type,r=e.converter||H,i="function"==typeof r?r:r.fromAttribute;return i?i(t,n):t}static _propertyValueToAttribute(t,e){if(void 0===e.reflect)return;const n=e.type,r=e.converter;return(r&&r.toAttribute||H.toAttribute)(t,n)}initialize(){this._saveInstanceProperties(),this._requestUpdate()}_saveInstanceProperties(){this.constructor._classProperties.forEach((t,e)=>{if(this.hasOwnProperty(e)){const t=this[e];delete this[e],this._instanceProperties||(this._instanceProperties=new Map),this._instanceProperties.set(e,t)}})}_applyInstanceProperties(){this._instanceProperties.forEach((t,e)=>this[e]=t),this._instanceProperties=void 0}connectedCallback(){this.enableUpdating()}enableUpdating(){void 0!==this._enableUpdatingResolver&&(this._enableUpdatingResolver(),this._enableUpdatingResolver=void 0)}disconnectedCallback(){}attributeChangedCallback(t,e,n){e!==n&&this._attributeToProperty(t,n)}_propertyToAttribute(t,e,n=J){const r=this.constructor,i=r._attributeNameForProperty(t,n);if(void 0!==i){const t=r._propertyValueToAttribute(e,n);if(void 0===t)return;this._updateState=this._updateState|X,null==t?this.removeAttribute(i):this.setAttribute(i,t),this._updateState=this._updateState&~X}}_attributeToProperty(t,e){if(this._updateState&X)return;const n=this.constructor,r=n._attributeToPropertyMap.get(t);if(void 0!==r){const t=n.getPropertyOptions(r);this._updateState=this._updateState|Z,this[r]=n._propertyValueFromAttribute(e,t),this._updateState=this._updateState&~Z}}_requestUpdate(t,e){let n=!0;if(void 0!==t){const r=this.constructor,i=r.getPropertyOptions(t);r._valueHasChanged(this[t],e,i.hasChanged)?(this._changedProperties.has(t)||this._changedProperties.set(t,e),!0!==i.reflect||this._updateState&Z||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(t,i))):n=!1}!this._hasRequestedUpdate&&n&&(this._updatePromise=this._enqueueUpdate())}requestUpdate(t,e){return this._requestUpdate(t,e),this.updateComplete}async _enqueueUpdate(){this._updateState=this._updateState|G;try{await this._updatePromise}catch(t){}const t=this.performUpdate();return null!=t&&await t,!this._hasRequestedUpdate}get _hasRequestedUpdate(){return this._updateState&G}get hasUpdated(){return this._updateState&K}performUpdate(){this._instanceProperties&&this._applyInstanceProperties();let t=!1;const e=this._changedProperties;try{(t=this.shouldUpdate(e))?this.update(e):this._markUpdated()}catch(e){throw t=!1,this._markUpdated(),e}t&&(this._updateState&K||(this._updateState=this._updateState|K,this.firstUpdated(e)),this.updated(e))}_markUpdated(){this._changedProperties=new Map,this._updateState=this._updateState&~G}get updateComplete(){return this._getUpdateComplete()}_getUpdateComplete(){return this._updatePromise}shouldUpdate(t){return!0}update(t){void 0!==this._reflectingProperties&&this._reflectingProperties.size>0&&(this._reflectingProperties.forEach((t,e)=>this._propertyToAttribute(e,this[e],t)),this._reflectingProperties=void 0),this._markUpdated()}updated(t){}firstUpdated(t){}}tt[Q]=!0;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const et=(t,e)=>"method"!==e.kind||!e.descriptor||"value"in e.descriptor?{kind:"field",key:Symbol(),placement:"own",descriptor:{},initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(n){n.createProperty(e.key,t)}}:Object.assign(Object.assign({},e),{finisher(n){n.createProperty(e.key,t)}}),nt=(t,e,n)=>{e.constructor.createProperty(n,t)};function rt(t){return(e,n)=>void 0!==n?nt(t,e,n):et(t,e)}
/**
@license
Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
const it="adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype;Symbol();
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
(window.litElementVersions||(window.litElementVersions=[])).push("2.3.1");const ot={};class st extends tt{static getStyles(){return this.styles}static _getUniqueStyles(){if(this.hasOwnProperty(JSCompiler_renameProperty("_styles",this)))return;const t=this.getStyles();if(void 0===t)this._styles=[];else if(Array.isArray(t)){const e=(t,n)=>t.reduceRight((t,n)=>Array.isArray(n)?e(n,t):(t.add(n),t),n),n=[];e(t,new Set).forEach(t=>n.unshift(t)),this._styles=n}else this._styles=[t]}initialize(){super.initialize(),this.constructor._getUniqueStyles(),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}createRenderRoot(){return this.attachShadow({mode:"open"})}adoptStyles(){const t=this.constructor._styles;0!==t.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?it?this.renderRoot.adoptedStyleSheets=t.map(t=>t.styleSheet):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(t.map(t=>t.cssText),this.localName))}connectedCallback(){super.connectedCallback(),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}update(t){const e=this.render();super.update(t),e!==ot&&this.constructor.render(e,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._styles.forEach(t=>{const e=document.createElement("style");e.textContent=t.cssText,this.renderRoot.appendChild(e)}))}render(){return ot}}st.finalized=!0,st.render=((t,e,n)=>{if(!n||"object"!=typeof n||!n.scopeName)throw new Error("The `scopeName` option is required.");const r=n.scopeName,s=L.has(e),a=z&&11===e.nodeType&&!!e.host,u=a&&!V.has(r),c=u?document.createDocumentFragment():e;if(((t,e,n)=>{let r=L.get(e);void 0===r&&(i(e,e.firstChild),L.set(e,r=new C(Object.assign({templateFactory:U},n))),r.appendInto(e)),r.setValue(t),r.commit()})(t,c,Object.assign({templateFactory:(t=>e=>{const n=$(e.type,t);let r=k.get(n);void 0===r&&(r={stringsArray:new WeakMap,keyString:new Map},k.set(n,r));let i=r.stringsArray.get(e.strings);if(void 0!==i)return i;const s=e.strings.join(o);if(void 0===(i=r.keyString.get(s))){const n=e.getTemplateElement();z&&window.ShadyCSS.prepareTemplateDom(n,t),i=new l(e,n),r.keyString.set(s,i)}return r.stringsArray.set(e.strings,i),i})(r)},n)),u){const t=L.get(c);L.delete(c);const n=t.value instanceof E?t.value.template:void 0;q(r,c,n),i(e,e.firstChild),e.appendChild(c),L.set(e,t)}!s&&a&&window.ShadyCSS.styleElement(e.host)});var at,ut=n(24);!function(t){t[t.Disconnected=1]="Disconnected",t[t.Connecting=2]="Connecting",t[t.Connected=3]="Connected",t[t.Disconnecting=4]="Disconnecting",t[t.Error=5]="Error"}(at||(at={}));var lt,ct=function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s};!function(t){t[t.read=0]="read",t[t.write=1]="write",t[t.enableNotify=2]="enableNotify",t[t.disableNotify=3]="disableNotify"}(lt||(lt={}));let ht=class extends st{constructor(){super(),this.name="nameit",this.connectedStr="connect",this.connected=!1,this.primaryServiceObject=[[{service:"heart_rate",characteristic:"heart_rate_measurement"}]],this.read=!1,this.btledata=null,this.buttonColour="blue",this.buttonPointer="pointer",this.bluetoothDevice=null,this.bluetoothGatt=null,this.prevConnectedStr="",this._handleBtGattStateChange=this._handleBtGattStateChange.bind(this),this._handleNotifyChanged=this._handleNotifyChanged.bind(this)}bluetoothCallback(t){this.connectedStr=t}render(){if("connected"==this.connectedStr){if(this.buttonColour="green",null!=this.btledata&&(this.processBTLEcommands(),this.btledata=null),null!=this.data){var t=this.data;this.bluetoothGatt.writevalueToService(t[0],0).then(e=>{t.length>1&&this.bluetoothGatt.writevalueToService(t[1],0)}),this.data=null}this.read&&this.readBtle(0)}else"connect"==this.connectedStr?this.buttonColour="#429e9d":"connecting"==this.connectedStr?this.buttonColour="#ad7d73":this.buttonColour="red";return this.prevConnectedStr=this.connectedStr,j`
       <style>
       
        .button {
        background-color: ${this.buttonColour}; 
        border: none;
        color: var(--btn-color, white);
        padding: 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 4px;
        border-radius: 15px 50px 30px;
        cursor: ${this.buttonPointer};
        outline:0;
        }
      </style>
      <button class="button" @click="${this.connect}">${this.connectedStr} ${this.name}</button>`}async connect(){let t=this.connectedStr;if(null!=this.bluetoothGatt&&this.bluetoothGatt.disconnect(this.bluetoothGatt),"connect"==t)try{var e=[this.primaryServiceObject[0][0].service];void 0!==this.primaryServiceObject[1]&&e.push(this.primaryServiceObject[1][0].service),this.bluetoothDevice=await navigator.bluetooth.requestDevice({filters:[{services:e}],optionalServices:e}),this.bluetoothGatt=new class extends EventTarget{constructor(t,e){super(),this.bluetoothDevice=null,this.connectionStr="disconnected",this.gatServer=null,this.currentService=null,this.currentCharacteristics=null,this.notifyCharacteristics=null,this.primaryServiceObject=[],this.semaphore=new ut.Semaphore(1),this.maxretry=0,this.state=at.Disconnected,this.bluetoothDevice=t,this.state=at.Disconnected,this.primaryServiceObject=e,this.SetNotify=this.SetNotify.bind(this),this.handleNotifyChanged=this.handleNotifyChanged.bind(this)}log(t){console.log(t)}setState(t){let e="old state = "+at[this.state]+" new state = "+at[t];switch(this.log(e),this.state=t,this.state){case at.Disconnected:this.currentService=null,this.currentCharacteristics=null,this.connectionStr="connect";break;case at.Connecting:this.connectionStr="connecting";break;case at.Disconnecting:this.connectionStr="disconnecting";break;case at.Connected:this.connectionStr="connected";break;default:this.connectionStr="error"}this.dispatchEvent(new Event("state-change"))}async timeout(){this.maxretry<10&&this.state===at.Connecting&&(this.maxretry++,this.connectit())}connect(){this.state===at.Disconnected&&(this.setState(at.Connecting),this.maxretry=0,this.connectit())}disconnect(t){this.bluetoothDevice&&(this.setState(at.Disconnecting),console.log("Disconnecting from Bluetooth Device..."),this.bluetoothDevice.gatt.connected?this.bluetoothDevice.gatt.disconnect():(console.log("> Bluetooth Device is already disconnected"),this.setState(at.Disconnected)),this.bluetoothDevice=null)}async connectit(){try{this.gatServer=await this.bluetoothDevice.gatt.connect(),this.setState(at.Connected)}catch(t){console.log("connecting failed  \n"),this.state,at.Connecting,console.log("try again over 5 seconds \n"),setTimeout(this.timeout.bind(this),5e3)}}onDisconnected(){switch(console.log("> Bluetooth Device disconnected"),this.state){case at.Disconnecting:case at.Error:this.setState(at.Disconnected);break;default:this.setState(at.Disconnected),this.connect()}}async getCharacteristic(t){this.currentService=await this.gatServer.getPrimaryService(this.primaryServiceObject[t][0].service),this.currentCharacteristics=await this.currentService.getCharacteristic(this.primaryServiceObject[t][0].characteristic)}async readvalueFromService(t){if(this.state===at.Connected){let e=await this.semaphore.acquire();try{await this.getCharacteristic(t);let n=await this.currentCharacteristics.readValue();return n.getUint8(0),e(),n}catch(t){console.log("Argh! "+t),e()}}}async SetNotify(t,e){if(this.state===at.Connected){let n=await this.semaphore.acquire();try{await this.getCharacteristic(e),!0===t?(await this.currentCharacteristics.startNotifications(),this.notifyCharacteristics=this.currentCharacteristics,console.log("notify set"),this.notifyCharacteristics.addEventListener("characteristicvaluechanged",this.handleNotifyChanged)):await this.currentCharacteristics.stopNotifications(),n()}catch(t){console.log("Argh! "+t),n()}}}async writevalueToService(t,e){if(this.state===at.Connected){let n=await this.semaphore.acquire();try{await this.getCharacteristic(e),await this.currentCharacteristics.writeValue(t),n()}catch(t){console.log("Argh! "+t),n()}}}handleNotifyChanged(t){let e=event.target.value;e=e.buffer?e:new DataView(e);let n=new CustomEvent("notify-data-event",{detail:{message:e},bubbles:!0,composed:!0});this.dispatchEvent(n)}}(this.bluetoothDevice,this.primaryServiceObject),this.bluetoothDevice.addEventListener("gattserverdisconnected",this.bluetoothGatt.onDisconnected.bind(this.bluetoothGatt)),this.bluetoothGatt.addEventListener("state-change",this._handleBtGattStateChange),this.bluetoothGatt.addEventListener("notify-data-event",this._handleNotifyChanged),this.bluetoothGatt.connect()}catch(t){console.log("Argh! "+t)}}async readBtle(t){await this.bluetoothGatt.readvalueFromService(t).then(t=>{this.read=!1,console.log(t);let e=new CustomEvent("data-event",{detail:{message:t},bubbles:!0,composed:!0});this.dispatchEvent(e)},t=>{this.read=!1})}async processBTLEcommands(){for(const t of this.btledata)t.action==lt.write&&await this.bluetoothGatt.writevalueToService(t.data,t.serviceNr),t.action==lt.read&&await this.readBtle(t.serviceNr),t.action==lt.enableNotify&&await this.bluetoothGatt.SetNotify(!0,t.serviceNr),t.action==lt.disableNotify&&await this.bluetoothGatt.SetNotify(!1,t.serviceNr)}_handleBtGattStateChange(t){if(this.connectedStr=t.target.connectionStr,"connected"==this.connectedStr){let t=new CustomEvent("data-event",{detail:{message:"connected"},bubbles:!0,composed:!0});this.dispatchEvent(t)}}_handleNotifyChanged(t){if("connected"==this.connectedStr){let e=new CustomEvent("data-event",{detail:{message:t.detail.message},bubbles:!0,composed:!0});this.dispatchEvent(e)}}};ct([rt()],ht.prototype,"name",void 0),ct([rt()],ht.prototype,"connectedStr",void 0),ct([rt()],ht.prototype,"connected",void 0),ct([rt({type:Array})],ht.prototype,"primaryServiceObject",void 0),ct([rt()],ht.prototype,"read",void 0),ct([rt()],ht.prototype,"data",void 0),ct([rt()],ht.prototype,"btledata",void 0),ht=ct([(t=>e=>"function"==typeof e?((t,e)=>(window.customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:n,elements:r}=e;return{kind:n,elements:r,finisher(e){window.customElements.define(t,e)}}})(t,e))("lsg-bluetooth")],ht);var ft=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},dt=function(t){return 1===t.length&&(t=function(t){return function(e,n){return ft(t(e),n)}}(t)),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}};var pt=dt(ft),_t=pt.right,yt=(pt.left,_t);var mt=Array.prototype,gt=(mt.slice,mt.map,Math.sqrt(50)),vt=Math.sqrt(10),bt=Math.sqrt(2),wt=function(t,e,n){var r,i,o,s,a=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(s=Et(t,e,n))||!isFinite(s))return[];if(s>0)for(t=Math.ceil(t/s),e=Math.floor(e/s),o=new Array(i=Math.ceil(e-t+1));++a<i;)o[a]=(t+a)*s;else for(t=Math.floor(t*s),e=Math.ceil(e*s),o=new Array(i=Math.ceil(t-e+1));++a<i;)o[a]=(t-a)/s;return r&&o.reverse(),o};function Et(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=gt?10:o>=vt?5:o>=bt?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=gt?10:o>=vt?5:o>=bt?2:1)}function St(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=gt?i*=10:o>=vt?i*=5:o>=bt&&(i*=2),e<t?-i:i}var At=function(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&n>r&&(r=n);return r},Nt=function(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&r>n&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&r>n&&(r=n);return r};Array.prototype.slice;var Tt={value:function(){}};function Ot(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Pt(r)}function Pt(t){this._=t}function Ct(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function xt(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=Tt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}Pt.prototype=Ot.prototype={constructor:Pt,on:function(t,e){var n,r=this._,i=function(t,e){return t.trim().split(/^|\s+/).map(function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})}(t+"",r),o=-1,s=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<s;)if(n=(t=i[o]).type)r[n]=xt(r[n],t.name,e);else if(null==e)for(n in r)r[n]=xt(r[n],t.name,null);return this}for(;++o<s;)if((n=(t=i[o]).type)&&(n=Ct(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Pt(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var It=Ot;function Rt(){}var Bt=function(t){return null==t?Rt:function(){return this.querySelector(t)}};function Dt(){return[]}var Mt=function(t){return null==t?Dt:function(){return this.querySelectorAll(t)}},Ut=function(t){return function(){return this.matches(t)}},kt=function(t){return new Array(t.length)};function Lt(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}Lt.prototype={constructor:Lt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Ft="$";function jt(t,e,n,r,i,o){for(var s,a=0,u=e.length,l=o.length;a<l;++a)(s=e[a])?(s.__data__=o[a],r[a]=s):n[a]=new Lt(t,o[a]);for(;a<u;++a)(s=e[a])&&(i[a]=s)}function $t(t,e,n,r,i,o,s){var a,u,l,c={},h=e.length,f=o.length,d=new Array(h);for(a=0;a<h;++a)(u=e[a])&&(d[a]=l=Ft+s.call(u,u.__data__,a,e),l in c?i[a]=u:c[l]=u);for(a=0;a<f;++a)(u=c[l=Ft+s.call(t,o[a],a,o)])?(r[a]=u,u.__data__=o[a],c[l]=null):n[a]=new Lt(t,o[a]);for(a=0;a<h;++a)(u=e[a])&&c[d[a]]===u&&(i[a]=u)}function zt(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var Yt="http://www.w3.org/1999/xhtml",Vt={svg:"http://www.w3.org/2000/svg",xhtml:Yt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},qt=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),Vt.hasOwnProperty(e)?{space:Vt[e],local:t}:t};var Ht=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Wt(t,e){return t.style.getPropertyValue(e)||Ht(t).getComputedStyle(t,null).getPropertyValue(e)}function Jt(t){return t.trim().split(/^|\s+/)}function Kt(t){return t.classList||new Gt(t)}function Gt(t){this._node=t,this._names=Jt(t.getAttribute("class")||"")}function Xt(t,e){for(var n=Kt(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function Zt(t,e){for(var n=Kt(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}Gt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Qt(){this.textContent=""}function te(){this.innerHTML=""}function ee(){this.nextSibling&&this.parentNode.appendChild(this)}function ne(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}var re=function(t){var e=qt(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===Yt&&e.documentElement.namespaceURI===Yt?e.createElement(t):e.createElementNS(n,t)}})(e)};function ie(){return null}function oe(){var t=this.parentNode;t&&t.removeChild(this)}function se(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function ae(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}var ue={},le=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(ue={mouseenter:"mouseover",mouseleave:"mouseout"}));function ce(t,e,n){return t=he(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function he(t,e,n){return function(r){var i=le;le=r;try{t.call(this,this.__data__,e,n)}finally{le=i}}}function fe(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function de(t,e,n){var r=ue.hasOwnProperty(t.type)?ce:he;return function(i,o,s){var a,u=this.__on,l=r(e,o,s);if(u)for(var c=0,h=u.length;c<h;++c)if((a=u[c]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=l,a.capture=n),void(a.value=e);this.addEventListener(t.type,l,n),a={type:t.type,name:t.name,value:e,listener:l,capture:n},u?u.push(a):this.__on=[a]}}function pe(t,e,n){var r=Ht(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}var _e=[null];function ye(t,e){this._groups=t,this._parents=e}function me(){return new ye([[document.documentElement]],_e)}ye.prototype=me.prototype={constructor:ye,select:function(t){"function"!=typeof t&&(t=Bt(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,s,a=e[i],u=a.length,l=r[i]=new Array(u),c=0;c<u;++c)(o=a[c])&&(s=t.call(o,o.__data__,c,a))&&("__data__"in o&&(s.__data__=o.__data__),l[c]=s);return new ye(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=Mt(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var s,a=e[o],u=a.length,l=0;l<u;++l)(s=a[l])&&(r.push(t.call(s,s.__data__,l,a)),i.push(s));return new ye(r,i)},filter:function(t){"function"!=typeof t&&(t=Ut(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,s=e[i],a=s.length,u=r[i]=[],l=0;l<a;++l)(o=s[l])&&t.call(o,o.__data__,l,s)&&u.push(o);return new ye(r,this._parents)},data:function(t,e){if(!t)return d=new Array(this.size()),l=-1,this.each(function(t){d[++l]=t}),d;var n=e?$t:jt,r=this._parents,i=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var o=i.length,s=new Array(o),a=new Array(o),u=new Array(o),l=0;l<o;++l){var c=r[l],h=i[l],f=h.length,d=t.call(c,c&&c.__data__,l,r),p=d.length,_=a[l]=new Array(p),y=s[l]=new Array(p);n(c,h,_,y,u[l]=new Array(f),d,e);for(var m,g,v=0,b=0;v<p;++v)if(m=_[v]){for(v>=b&&(b=v+1);!(g=y[b])&&++b<p;);m._next=g||null}}return(s=new ye(s,r))._enter=a,s._exit=u,s},enter:function(){return new ye(this._enter||this._groups.map(kt),this._parents)},exit:function(){return new ye(this._exit||this._groups.map(kt),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),s=new Array(r),a=0;a<o;++a)for(var u,l=e[a],c=n[a],h=l.length,f=s[a]=new Array(h),d=0;d<h;++d)(u=l[d]||c[d])&&(f[d]=u);for(;a<r;++a)s[a]=e[a];return new ye(s,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,s=i[o];--o>=0;)(r=i[o])&&(s&&4^r.compareDocumentPosition(s)&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=zt);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var s,a=n[o],u=a.length,l=i[o]=new Array(u),c=0;c<u;++c)(s=a[c])&&(l[c]=s);l.sort(e)}return new ye(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var s=r[i];if(s)return s}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],s=0,a=o.length;s<a;++s)(i=o[s])&&t.call(i,i.__data__,s,o);return this},attr:function(t,e){var n=qt(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):Wt(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=Jt(t+"");if(arguments.length<2){for(var r=Kt(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?Xt:Zt)(this,t)}}:e?function(t){return function(){Xt(this,t)}}:function(t){return function(){Zt(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?Qt:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?te:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(ee)},lower:function(){return this.each(ne)},append:function(t){var e="function"==typeof t?t:re(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:re(t),r=null==e?ie:"function"==typeof e?e:Bt(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(oe)},clone:function(t){return this.select(t?ae:se)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),s=o.length;if(!(arguments.length<2)){for(a=e?de:fe,null==n&&(n=!1),r=0;r<s;++r)this.each(a(o[r],e,n));return this}var a=this.node().__on;if(a)for(var u,l=0,c=a.length;l<c;++l)for(r=0,u=a[l];r<s;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return pe(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return pe(this,t,e)}})(t,e))}};var ge=me,ve=function(t){return"string"==typeof t?new ye([[document.querySelector(t)]],[document.documentElement]):new ye([[t]],_e)};var be=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function we(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Ee(){}var Se="\\s*([+-]?\\d+)\\s*",Ae="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ne="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Te=/^#([0-9a-f]{3,8})$/,Oe=new RegExp("^rgb\\("+[Se,Se,Se]+"\\)$"),Pe=new RegExp("^rgb\\("+[Ne,Ne,Ne]+"\\)$"),Ce=new RegExp("^rgba\\("+[Se,Se,Se,Ae]+"\\)$"),xe=new RegExp("^rgba\\("+[Ne,Ne,Ne,Ae]+"\\)$"),Ie=new RegExp("^hsl\\("+[Ae,Ne,Ne]+"\\)$"),Re=new RegExp("^hsla\\("+[Ae,Ne,Ne,Ae]+"\\)$"),Be={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function De(){return this.rgb().formatHex()}function Me(){return this.rgb().formatRgb()}function Ue(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=Te.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?ke(e):3===n?new je(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?new je(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?new je(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=Oe.exec(t))?new je(e[1],e[2],e[3],1):(e=Pe.exec(t))?new je(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Ce.exec(t))?Le(e[1],e[2],e[3],e[4]):(e=xe.exec(t))?Le(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Ie.exec(t))?Ve(e[1],e[2]/100,e[3]/100,1):(e=Re.exec(t))?Ve(e[1],e[2]/100,e[3]/100,e[4]):Be.hasOwnProperty(t)?ke(Be[t]):"transparent"===t?new je(NaN,NaN,NaN,0):null}function ke(t){return new je(t>>16&255,t>>8&255,255&t,1)}function Le(t,e,n,r){return r<=0&&(t=e=n=NaN),new je(t,e,n,r)}function Fe(t,e,n,r){return 1===arguments.length?function(t){return t instanceof Ee||(t=Ue(t)),t?new je((t=t.rgb()).r,t.g,t.b,t.opacity):new je}(t):new je(t,e,n,null==r?1:r)}function je(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function $e(){return"#"+Ye(this.r)+Ye(this.g)+Ye(this.b)}function ze(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Ye(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Ve(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new He(t,e,n,r)}function qe(t){if(t instanceof He)return new He(t.h,t.s,t.l,t.opacity);if(t instanceof Ee||(t=Ue(t)),!t)return new He;if(t instanceof He)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),s=NaN,a=o-i,u=(o+i)/2;return a?(s=e===o?(n-r)/a+6*(n<r):n===o?(r-e)/a+2:(e-n)/a+4,a/=u<.5?o+i:2-o-i,s*=60):a=u>0&&u<1?0:s,new He(s,a,u,t.opacity)}function He(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function We(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Je(t,e,n,r,i){var o=t*t,s=o*t;return((1-3*t+3*o-s)*e+(4-6*o+3*s)*n+(1+3*t+3*o-3*s)*r+s*i)/6}be(Ee,Ue,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:De,formatHex:De,formatHsl:function(){return qe(this).formatHsl()},formatRgb:Me,toString:Me}),be(je,Fe,we(Ee,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new je(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new je(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:$e,formatHex:$e,formatRgb:ze,toString:ze})),be(He,function(t,e,n,r){return 1===arguments.length?qe(t):new He(t,e,n,null==r?1:r)},we(Ee,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new He(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new He(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new je(We(t>=240?t-240:t+120,i,r),We(t,i,r),We(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Ke=function(t){return function(){return t}};function Ge(t,e){return function(n){return t+n*e}}function Xe(t){return 1==(t=+t)?Ze:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Ke(isNaN(e)?n:e)}}function Ze(t,e){var n=e-t;return n?Ge(t,n):Ke(isNaN(t)?e:t)}var Qe=function t(e){var n=Xe(e);function r(t,e){var r=n((t=Fe(t)).r,(e=Fe(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),s=Ze(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=s(e),t+""}}return r.gamma=t,r}(1);function tn(t){return function(e){var n,r,i=e.length,o=new Array(i),s=new Array(i),a=new Array(i);for(n=0;n<i;++n)r=Fe(e[n]),o[n]=r.r||0,s[n]=r.g||0,a[n]=r.b||0;return o=t(o),s=t(s),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=s(t),r.b=a(t),r+""}}}tn(function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],s=r>0?t[r-1]:2*i-o,a=r<e-1?t[r+2]:2*o-i;return Je((n-r/e)*e,s,i,o,a)}}),tn(function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],s=t[(r+1)%e],a=t[(r+2)%e];return Je((n-r/e)*e,i,o,s,a)}});var en=function(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}},nn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,rn=new RegExp(nn.source,"g");var on,sn,an=function(t,e){var n,r,i,o=nn.lastIndex=rn.lastIndex=0,s=-1,a=[],u=[];for(t+="",e+="";(n=nn.exec(t))&&(r=rn.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),a[s]?a[s]+=i:a[++s]=i),(n=n[0])===(r=r[0])?a[s]?a[s]+=r:a[++s]=r:(a[++s]=null,u.push({i:s,x:en(n,r)})),o=rn.lastIndex;return o<e.length&&(i=e.slice(o),a[s]?a[s]+=i:a[++s]=i),a.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)a[(n=u[r]).i]=n.x(t);return a.join("")})},un=0,ln=0,cn=0,hn=1e3,fn=0,dn=0,pn=0,_n="object"==typeof performance&&performance.now?performance:Date,yn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function mn(){return dn||(yn(gn),dn=_n.now()+pn)}function gn(){dn=0}function vn(){this._call=this._time=this._next=null}function bn(t,e,n){var r=new vn;return r.restart(t,e,n),r}function wn(){dn=(fn=_n.now())+pn,un=ln=0;try{!function(){mn(),++un;for(var t,e=on;e;)(t=dn-e._time)>=0&&e._call.call(null,t),e=e._next;--un}()}finally{un=0,function(){var t,e,n=on,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:on=e);sn=t,Sn(r)}(),dn=0}}function En(){var t=_n.now(),e=t-fn;e>hn&&(pn-=e,fn=t)}function Sn(t){un||(ln&&(ln=clearTimeout(ln)),t-dn>24?(t<1/0&&(ln=setTimeout(wn,t-_n.now()-pn)),cn&&(cn=clearInterval(cn))):(cn||(fn=_n.now(),cn=setInterval(En,hn)),un=1,yn(wn)))}vn.prototype=bn.prototype={constructor:vn,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?mn():+n)+(null==e?0:+e),this._next||sn===this||(sn?sn._next=this:on=this,sn=this),this._call=t,this._time=n,Sn()},stop:function(){this._call&&(this._call=null,this._time=1/0,Sn())}};var An=function(t,e,n){var r=new vn;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r},Nn=It("start","end","cancel","interrupt"),Tn=[],On=0,Pn=1,Cn=2,xn=3,In=4,Rn=5,Bn=6,Dn=function(t,e,n,r,i,o){var s=t.__transition;if(s){if(n in s)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(u){var l,c,h,f;if(n.state!==Pn)return a();for(l in i)if((f=i[l]).name===n.name){if(f.state===xn)return An(o);f.state===In?(f.state=Bn,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<e&&(f.state=Bn,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete i[l])}if(An(function(){n.state===xn&&(n.state=In,n.timer.restart(s,n.delay,n.time),s(u))}),n.state=Cn,n.on.call("start",t,t.__data__,n.index,n.group),n.state===Cn){for(n.state=xn,r=new Array(h=n.tween.length),l=0,c=-1;l<h;++l)(f=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=f);r.length=c+1}}function s(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(a),n.state=Rn,1),o=-1,s=r.length;++o<s;)r[o].call(t,i);n.state===Rn&&(n.on.call("end",t,t.__data__,n.index,n.group),a())}function a(){for(var r in n.state=Bn,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=bn(function(t){n.state=Pn,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)},0,n.time)}(t,n,{name:e,index:r,group:i,on:Nn,tween:Tn,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:On})};function Mn(t,e){var n=kn(t,e);if(n.state>On)throw new Error("too late; already scheduled");return n}function Un(t,e){var n=kn(t,e);if(n.state>xn)throw new Error("too late; already running");return n}function kn(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var Ln,Fn,jn,$n,zn=function(t,e){var n,r,i,o=t.__transition,s=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>Cn&&n.state<Rn,n.state=Bn,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):s=!1;s&&delete t.__transition}},Yn=180/Math.PI,Vn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},qn=function(t,e,n,r,i,o){var s,a,u;return(s=Math.sqrt(t*t+e*e))&&(t/=s,e/=s),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(a=Math.sqrt(n*n+r*r))&&(n/=a,r/=a,u/=a),t*r<e*n&&(t=-t,e=-e,u=-u,s=-s),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*Yn,skewX:Math.atan(u)*Yn,scaleX:s,scaleY:a}};function Hn(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,s){var a=[],u=[];return o=t(o),s=t(s),function(t,r,i,o,s,a){if(t!==i||r!==o){var u=s.push("translate(",null,e,null,n);a.push({i:u-4,x:en(t,i)},{i:u-2,x:en(r,o)})}else(i||o)&&s.push("translate("+i+e+o+n)}(o.translateX,o.translateY,s.translateX,s.translateY,a,u),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:en(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,s.rotate,a,u),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:en(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,s.skewX,a,u),function(t,e,n,r,o,s){if(t!==n||e!==r){var a=o.push(i(o)+"scale(",null,",",null,")");s.push({i:a-4,x:en(t,n)},{i:a-2,x:en(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,s.scaleX,s.scaleY,a,u),o=s=null,function(t){for(var e,n=-1,r=u.length;++n<r;)a[(e=u[n]).i]=e.x(t);return a.join("")}}}var Wn=Hn(function(t){return"none"===t?Vn:(Ln||(Ln=document.createElement("DIV"),Fn=document.documentElement,jn=document.defaultView),Ln.style.transform=t,t=jn.getComputedStyle(Fn.appendChild(Ln),null).getPropertyValue("transform"),Fn.removeChild(Ln),t=t.slice(7,-1).split(","),qn(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Jn=Hn(function(t){return null==t?Vn:($n||($n=document.createElementNS("http://www.w3.org/2000/svg","g")),$n.setAttribute("transform",t),(t=$n.transform.baseVal.consolidate())?(t=t.matrix,qn(t.a,t.b,t.c,t.d,t.e,t.f)):Vn)},", ",")",")");function Kn(t,e,n){var r=t._id;return t.each(function(){var t=Un(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return kn(t,r).value[e]}}var Gn=function(t,e){var n;return("number"==typeof e?en:e instanceof Ue?Qe:(n=Ue(e))?(e=n,Qe):an)(t,e)};var Xn=ge.prototype.constructor;function Zn(t){return function(){this.style.removeProperty(t)}}var Qn=0;function tr(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function er(){return++Qn}var nr=ge.prototype;tr.prototype=function(t){return ge().transition(t)}.prototype={constructor:tr,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Bt(t));for(var r=this._groups,i=r.length,o=new Array(i),s=0;s<i;++s)for(var a,u,l=r[s],c=l.length,h=o[s]=new Array(c),f=0;f<c;++f)(a=l[f])&&(u=t.call(a,a.__data__,f,l))&&("__data__"in a&&(u.__data__=a.__data__),h[f]=u,Dn(h[f],e,n,f,h,kn(a,n)));return new tr(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Mt(t));for(var r=this._groups,i=r.length,o=[],s=[],a=0;a<i;++a)for(var u,l=r[a],c=l.length,h=0;h<c;++h)if(u=l[h]){for(var f,d=t.call(u,u.__data__,h,l),p=kn(u,n),_=0,y=d.length;_<y;++_)(f=d[_])&&Dn(f,e,n,_,d,p);o.push(d),s.push(u)}return new tr(o,s,e,n)},filter:function(t){"function"!=typeof t&&(t=Ut(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,s=e[i],a=s.length,u=r[i]=[],l=0;l<a;++l)(o=s[l])&&t.call(o,o.__data__,l,s)&&u.push(o);return new tr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),s=new Array(r),a=0;a<o;++a)for(var u,l=e[a],c=n[a],h=l.length,f=s[a]=new Array(h),d=0;d<h;++d)(u=l[d]||c[d])&&(f[d]=u);for(;a<r;++a)s[a]=e[a];return new tr(s,this._parents,this._name,this._id)},selection:function(){return new Xn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=er(),r=this._groups,i=r.length,o=0;o<i;++o)for(var s,a=r[o],u=a.length,l=0;l<u;++l)if(s=a[l]){var c=kn(s,e);Dn(s,t,n,l,a,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new tr(r,this._parents,t,n)},call:nr.call,nodes:nr.nodes,node:nr.node,size:nr.size,empty:nr.empty,each:nr.each,on:function(t,e){var n=this._id;return arguments.length<2?kn(this.node(),n).on.on(t):this.each(function(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?Mn:Un;return function(){var s=o(this,t),a=s.on;a!==r&&(i=(r=a).copy()).on(e,n),s.on=i}}(n,t,e))},attr:function(t,e){var n=qt(t),r="transform"===n?Jn:Gn;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var r,i,o;return function(){var s,a,u=n(this);if(null!=u)return(s=this.getAttributeNS(t.space,t.local))===(a=u+"")?null:s===r&&a===i?o:(i=a,o=e(r=s,u));this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var r,i,o;return function(){var s,a,u=n(this);if(null!=u)return(s=this.getAttribute(t))===(a=u+"")?null:s===r&&a===i?o:(i=a,o=e(r=s,u));this.removeAttribute(t)}})(n,r,Kn(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var r,i,o=n+"";return function(){var s=this.getAttributeNS(t.space,t.local);return s===o?null:s===r?i:i=e(r=s,n)}}:function(t,e,n){var r,i,o=n+"";return function(){var s=this.getAttribute(t);return s===o?null:s===r?i:i=e(r=s,n)}})(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=qt(t);return this.tween(n,(r.local?function(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}(t,i)),n}return i._value=e,i}:function(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}(t,i)),n}return i._value=e,i})(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Wn:Gn;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=Wt(this,t),s=(this.style.removeProperty(t),Wt(this,t));return o===s?null:o===n&&s===r?i:i=e(n=o,r=s)}}(t,r)).on("end.style."+t,Zn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var s=Wt(this,t),a=n(this),u=a+"";return null==a&&(this.style.removeProperty(t),u=a=Wt(this,t)),s===u?null:s===r&&u===i?o:(i=u,o=e(r=s,a))}}(t,r,Kn(this,"style."+t,e))).each(function(t,e){var n,r,i,o,s="style."+e,a="end."+s;return function(){var u=Un(this,t),l=u.on,c=null==u.value[s]?o||(o=Zn(e)):void 0;l===n&&i===c||(r=(n=l).copy()).on(a,i=c),u.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var s=Wt(this,t);return s===o?null:s===r?i:i=e(r=s,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}(t,o,n)),r}return o._value=e,o}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Kn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,function(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&function(t){return function(e){this.textContent=t.call(this,e)}}(r)),e}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=kn(this.node(),n).tween,o=0,s=i.length;o<s;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?function(t,e){var n,r;return function(){var i=Un(this,t),o=i.tween;if(o!==n)for(var s=0,a=(r=n=o).length;s<a;++s)if(r[s].name===e){(r=r.slice()).splice(s,1);break}i.tween=r}}:function(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=Un(this,t),s=o.tween;if(s!==r){i=(r=s).slice();for(var a={name:e,value:n},u=0,l=i.length;u<l;++u)if(i[u].name===e){i[u]=a;break}u===l&&i.push(a)}o.tween=i}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){Mn(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){Mn(this,t).delay=e}})(e,t)):kn(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){Un(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){Un(this,t).duration=e}})(e,t)):kn(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){Un(this,t).ease=e}}(e,t)):kn(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise(function(o,s){var a={value:s},u={value:function(){0==--i&&o()}};n.each(function(){var n=Un(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(a),e._.interrupt.push(a),e._.end.push(u)),n.on=e})})}};var rr={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function ir(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return rr.time=mn(),rr;return n}ge.prototype.interrupt=function(t){return this.each(function(){zn(this,t)})},ge.prototype.transition=function(t){var e,n;t instanceof tr?(e=t._id,t=t._name):(e=er(),(n=rr).time=mn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var s,a=r[o],u=a.length,l=0;l<u;++l)(s=a[l])&&Dn(s,t,e,l,a,n||ir(s,e));return new tr(r,this._parents,t,e)};function or(t){return[+t[0],+t[1]]}function sr(t){return[or(t[0]),or(t[1])]}["w","e"].map(ar),["n","s"].map(ar),["n","w","e","s","nw","ne","sw","se"].map(ar);function ar(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var ur=Math.PI,lr=2*ur,cr=lr-1e-6;function hr(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function fr(){return new hr}hr.prototype=fr.prototype={constructor:hr,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,s=this._y1,a=n-t,u=r-e,l=o-t,c=s-e,h=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(h>1e-6)if(Math.abs(c*a-u*l)>1e-6&&i){var f=n-o,d=r-s,p=a*a+u*u,_=f*f+d*d,y=Math.sqrt(p),m=Math.sqrt(h),g=i*Math.tan((ur-Math.acos((p+h-_)/(2*y*m)))/2),v=g/m,b=g/y;Math.abs(v-1)>1e-6&&(this._+="L"+(t+v*l)+","+(e+v*c)),this._+="A"+i+","+i+",0,0,"+ +(c*f>l*d)+","+(this._x1=t+b*a)+","+(this._y1=e+b*u)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var s=(n=+n)*Math.cos(r),a=n*Math.sin(r),u=t+s,l=e+a,c=1^o,h=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+l:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+u+","+l),n&&(h<0&&(h=h%lr+lr),h>cr?this._+="A"+n+","+n+",0,1,"+c+","+(t-s)+","+(e-a)+"A"+n+","+n+",0,1,"+c+","+(this._x1=u)+","+(this._y1=l):h>1e-6&&(this._+="A"+n+","+n+",0,"+ +(h>=ur)+","+c+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var dr=fr;function pr(){}function _r(t,e){var n=new pr;if(t instanceof pr)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==e)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e(r=t[i],i,t),r)}else if(t)for(var s in t)n.set(s,t[s]);return n}pr.prototype=_r.prototype={constructor:pr,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var yr=_r;function mr(){}var gr=yr.prototype;function vr(t,e){var n=new mr;if(t instanceof mr)t.each(function(t){n.add(t)});else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}mr.prototype=vr.prototype={constructor:mr,has:gr.has,add:function(t){return this["$"+(t+="")]=t,this},remove:gr.remove,clear:gr.clear,values:gr.keys,size:gr.size,empty:gr.empty,each:gr.each};Array.prototype.slice;var br={},wr={},Er=34,Sr=10,Ar=13;function Nr(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+'] || ""'}).join(",")+"}")}function Tr(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}function Or(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function Pr(t){var e=t.getUTCHours(),n=t.getUTCMinutes(),r=t.getUTCSeconds(),i=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":function(t){return t<0?"-"+Or(-t,6):t>9999?"+"+Or(t,6):Or(t,4)}(t.getUTCFullYear())+"-"+Or(t.getUTCMonth()+1,2)+"-"+Or(t.getUTCDate(),2)+(i?"T"+Or(e,2)+":"+Or(n,2)+":"+Or(r,2)+"."+Or(i,3)+"Z":r?"T"+Or(e,2)+":"+Or(n,2)+":"+Or(r,2)+"Z":n||e?"T"+Or(e,2)+":"+Or(n,2)+"Z":"")}var Cr=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,i=[],o=t.length,s=0,a=0,u=o<=0,l=!1;function c(){if(u)return wr;if(l)return l=!1,br;var e,r,i=s;if(t.charCodeAt(i)===Er){for(;s++<o&&t.charCodeAt(s)!==Er||t.charCodeAt(++s)===Er;);return(e=s)>=o?u=!0:(r=t.charCodeAt(s++))===Sr?l=!0:r===Ar&&(l=!0,t.charCodeAt(s)===Sr&&++s),t.slice(i+1,e-1).replace(/""/g,'"')}for(;s<o;){if((r=t.charCodeAt(e=s++))===Sr)l=!0;else if(r===Ar)l=!0,t.charCodeAt(s)===Sr&&++s;else if(r!==n)continue;return t.slice(i,e)}return u=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===Sr&&--o,t.charCodeAt(o-1)===Ar&&--o;(r=c())!==wr;){for(var h=[];r!==br&&r!==wr;)h.push(r),r=c();e&&null==(h=e(h,a++))||i.push(h)}return i}function i(e,n){return e.map(function(e){return n.map(function(t){return s(e[t])}).join(t)})}function o(e){return e.map(s).join(t)}function s(t){return null==t?"":t instanceof Date?Pr(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,i,o=r(t,function(t,r){if(n)return n(t,r-1);i=t,n=e?function(t,e){var n=Nr(t);return function(r,i){return e(n(r),i,t)}}(t,e):Nr(t)});return o.columns=i||[],o},parseRows:r,format:function(e,n){return null==n&&(n=Tr(e)),[n.map(s).join(t)].concat(i(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=Tr(t)),i(t,e).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:s}},xr=Cr(","),Ir=xr.parse,Rr=(xr.parseRows,xr.format,xr.formatBody,xr.formatRows,xr.formatRow,xr.formatValue,Cr("\t")),Br=Rr.parse;Rr.parseRows,Rr.format,Rr.formatBody,Rr.formatRows,Rr.formatRow,Rr.formatValue;function Dr(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Mr=function(t,e){return fetch(t,e).then(Dr)};function Ur(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),Mr(e,n).then(function(e){return t(e,r)})}}Ur(Ir),Ur(Br);function kr(t){return function(e,n){return Mr(e,n).then(function(e){return(new DOMParser).parseFromString(e,t)})}}kr("application/xml"),kr("text/html"),kr("image/svg+xml");function Lr(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var i,o,s,a,u,l,c,h,f,d=t._root,p={data:r},_=t._x0,y=t._y0,m=t._x1,g=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((l=e>=(o=(_+m)/2))?_=o:m=o,(c=n>=(s=(y+g)/2))?y=s:g=s,i=d,!(d=d[h=c<<1|l]))return i[h]=p,t;if(a=+t._x.call(null,d.data),u=+t._y.call(null,d.data),e===a&&n===u)return p.next=d,i?i[h]=p:t._root=p,t;do{i=i?i[h]=new Array(4):t._root=new Array(4),(l=e>=(o=(_+m)/2))?_=o:m=o,(c=n>=(s=(y+g)/2))?y=s:g=s}while((h=c<<1|l)==(f=(u>=s)<<1|a>=o));return i[f]=d,i[h]=p,t}var Fr=function(t,e,n,r,i){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=i};function jr(t){return t[0]}function $r(t){return t[1]}function zr(t,e,n){var r=new Yr(null==e?jr:e,null==n?$r:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Yr(t,e,n,r,i,o){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Vr(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var qr=zr.prototype=Yr.prototype;qr.copy=function(){var t,e,n=new Yr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=Vr(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(e=r.source[i])&&(e.length?t.push({source:e,target:r.target[i]=new Array(4)}):r.target[i]=Vr(e));return n},qr.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return Lr(this.cover(e,n),e,n,t)},qr.addAll=function(t){var e,n,r,i,o=t.length,s=new Array(o),a=new Array(o),u=1/0,l=1/0,c=-1/0,h=-1/0;for(n=0;n<o;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(i=+this._y.call(null,e))||(s[n]=r,a[n]=i,r<u&&(u=r),r>c&&(c=r),i<l&&(l=i),i>h&&(h=i));if(u>c||l>h)return this;for(this.cover(u,l).cover(c,h),n=0;n<o;++n)Lr(this,s[n],a[n],t[n]);return this},qr.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(n))i=(n=Math.floor(t))+1,o=(r=Math.floor(e))+1;else{for(var s,a,u=i-n,l=this._root;n>t||t>=i||r>e||e>=o;)switch(a=(e<r)<<1|t<n,(s=new Array(4))[a]=l,l=s,u*=2,a){case 0:i=n+u,o=r+u;break;case 1:n=i-u,o=r+u;break;case 2:i=n+u,r=o-u;break;case 3:n=i-u,r=o-u}this._root&&this._root.length&&(this._root=l)}return this._x0=n,this._y0=r,this._x1=i,this._y1=o,this},qr.data=function(){var t=[];return this.visit(function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)}),t},qr.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},qr.find=function(t,e,n){var r,i,o,s,a,u,l,c=this._x0,h=this._y0,f=this._x1,d=this._y1,p=[],_=this._root;for(_&&p.push(new Fr(_,c,h,f,d)),null==n?n=1/0:(c=t-n,h=e-n,f=t+n,d=e+n,n*=n);u=p.pop();)if(!(!(_=u.node)||(i=u.x0)>f||(o=u.y0)>d||(s=u.x1)<c||(a=u.y1)<h))if(_.length){var y=(i+s)/2,m=(o+a)/2;p.push(new Fr(_[3],y,m,s,a),new Fr(_[2],i,m,y,a),new Fr(_[1],y,o,s,m),new Fr(_[0],i,o,y,m)),(l=(e>=m)<<1|t>=y)&&(u=p[p.length-1],p[p.length-1]=p[p.length-1-l],p[p.length-1-l]=u)}else{var g=t-+this._x.call(null,_.data),v=e-+this._y.call(null,_.data),b=g*g+v*v;if(b<n){var w=Math.sqrt(n=b);c=t-w,h=e-w,f=t+w,d=e+w,r=_.data}}return r},qr.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(s=+this._y.call(null,t)))return this;var e,n,r,i,o,s,a,u,l,c,h,f,d=this._root,p=this._x0,_=this._y0,y=this._x1,m=this._y1;if(!d)return this;if(d.length)for(;;){if((l=o>=(a=(p+y)/2))?p=a:y=a,(c=s>=(u=(_+m)/2))?_=u:m=u,e=d,!(d=d[h=c<<1|l]))return this;if(!d.length)break;(e[h+1&3]||e[h+2&3]||e[h+3&3])&&(n=e,f=h)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):e?(i?e[h]=i:delete e[h],(d=e[0]||e[1]||e[2]||e[3])&&d===(e[3]||e[2]||e[1]||e[0])&&!d.length&&(n?n[f]=d:this._root=d),this):(this._root=i,this)},qr.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},qr.root=function(){return this._root},qr.size=function(){var t=0;return this.visit(function(e){if(!e.length)do{++t}while(e=e.next)}),t},qr.visit=function(t){var e,n,r,i,o,s,a=[],u=this._root;for(u&&a.push(new Fr(u,this._x0,this._y0,this._x1,this._y1));e=a.pop();)if(!t(u=e.node,r=e.x0,i=e.y0,o=e.x1,s=e.y1)&&u.length){var l=(r+o)/2,c=(i+s)/2;(n=u[3])&&a.push(new Fr(n,l,c,o,s)),(n=u[2])&&a.push(new Fr(n,r,c,l,s)),(n=u[1])&&a.push(new Fr(n,l,i,o,c)),(n=u[0])&&a.push(new Fr(n,r,i,l,c))}return this},qr.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new Fr(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var i=e.node;if(i.length){var o,s=e.x0,a=e.y0,u=e.x1,l=e.y1,c=(s+u)/2,h=(a+l)/2;(o=i[0])&&n.push(new Fr(o,s,a,c,h)),(o=i[1])&&n.push(new Fr(o,c,a,u,h)),(o=i[2])&&n.push(new Fr(o,s,h,c,l)),(o=i[3])&&n.push(new Fr(o,c,h,u,l))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},qr.x=function(t){return arguments.length?(this._x=t,this):this._x},qr.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Hr=function(){return Math.random()},Wr=(function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(Hr),function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*e()-1,o=2*e()-1,i=r*r+o*o}while(!i||i>1);return t+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(Hr)),Jr=(function t(e){function n(){var t=Wr.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(Hr),function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(Hr));(function t(e){function n(t){var n=Jr.source(e)(t);return function(){return n()/t}}return n.source=t,n})(Hr),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(Hr);function Kr(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}var Gr=Array.prototype,Xr=(Gr.map,Gr.slice);var Zr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Qr(t){if(!(e=Zr.exec(t)))throw new Error("invalid format: "+t);var e;return new ti({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function ti(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}Qr.prototype=ti.prototype,ti.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var ei,ni,ri,ii,oi=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},si=function(t){return(t=oi(Math.abs(t)))?t[1]:NaN},ai=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t},ui=function(t,e){var n=oi(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},li={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return ui(100*t,e)},r:ui,s:function(t,e){var n=oi(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(ei=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,s=r.length;return o===s?r:o>s?r+new Array(o-s+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+oi(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},ci=function(t){return t},hi=Array.prototype.map,fi=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],di=function(t){var e=void 0===t.grouping||void 0===t.thousands?ci:function(t,e){return function(n,r){for(var i=n.length,o=[],s=0,a=t[0],u=0;i>0&&a>0&&(u+a+1>r&&(a=Math.max(1,r-u)),o.push(n.substring(i-=a,i+a)),!((u+=a+1)>r));)a=t[s=(s+1)%t.length];return o.reverse().join(e)}}(hi.call(t.grouping,Number),t.thousands+""),n=void 0===t.currency?"":t.currency[0]+"",r=void 0===t.currency?"":t.currency[1]+"",i=void 0===t.decimal?".":t.decimal+"",o=void 0===t.numerals?ci:function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(hi.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",a=void 0===t.minus?"-":t.minus+"",u=void 0===t.nan?"NaN":t.nan+"";function l(t){var l=(t=Qr(t)).fill,c=t.align,h=t.sign,f=t.symbol,d=t.zero,p=t.width,_=t.comma,y=t.precision,m=t.trim,g=t.type;"n"===g?(_=!0,g="g"):li[g]||(void 0===y&&(y=12),m=!0,g="g"),(d||"0"===l&&"="===c)&&(d=!0,l="0",c="=");var v="$"===f?n:"#"===f&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",b="$"===f?r:/[%p]/.test(g)?s:"",w=li[g],E=/[defgprs%]/.test(g);function S(t){var n,r,s,f=v,S=b;if("c"===g)S=w(t)+S,t="";else{var A=(t=+t)<0||1/t<0;if(t=isNaN(t)?u:w(Math.abs(t),y),m&&(t=ai(t)),A&&0==+t&&"+"!==h&&(A=!1),f=(A?"("===h?h:a:"-"===h||"("===h?"":h)+f,S=("s"===g?fi[8+ei/3]:"")+S+(A&&"("===h?")":""),E)for(n=-1,r=t.length;++n<r;)if(48>(s=t.charCodeAt(n))||s>57){S=(46===s?i+t.slice(n+1):t.slice(n))+S,t=t.slice(0,n);break}}_&&!d&&(t=e(t,1/0));var N=f.length+t.length+S.length,T=N<p?new Array(p-N+1).join(l):"";switch(_&&d&&(t=e(T+t,T.length?p-S.length:1/0),T=""),c){case"<":t=f+t+S+T;break;case"=":t=f+T+t+S;break;case"^":t=T.slice(0,N=T.length>>1)+f+t+S+T.slice(N);break;default:t=T+f+t+S}return o(t)}return y=void 0===y?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),S.toString=function(){return t+""},S}return{format:l,formatPrefix:function(t,e){var n=l(((t=Qr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(si(e)/3))),i=Math.pow(10,-r),o=fi[8+r/3];return function(t){return n(i*t)+o}}}};!function(t){ni=di(t),ri=ni.format,ii=ni.formatPrefix}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"});var pi=function(t,e,n,r){var i,o=St(t,e,n);switch((r=Qr(null==r?",f":r)).type){case"s":var s=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(si(e)/3)))-si(Math.abs(t)))}(o,s))||(r.precision=i),ii(r,s);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,si(e)-si(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-si(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return ri(r)};function _i(t){var e=t.domain;return t.ticks=function(t){var n=e();return wt(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return pi(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),o=0,s=i.length-1,a=i[o],u=i[s];return u<a&&(r=a,a=u,u=r,r=o,o=s,s=r),(r=Et(a,u,n))>0?r=Et(a=Math.floor(a/r)*r,u=Math.ceil(u/r)*r,n):r<0&&(r=Et(a=Math.ceil(a*r)/r,u=Math.floor(u*r)/r,n)),r>0?(i[o]=Math.floor(a/r)*r,i[s]=Math.ceil(u/r)*r,e(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[s]=Math.floor(u*r)/r,e(i)),t},t}function yi(){var t,e=0,n=1,r=1,i=[.5],o=[0,1];function s(e){return e<=e?o[yt(i,e,0,r)]:t}function a(){var t=-1;for(i=new Array(r);++t<r;)i[t]=((t+1)*n-(t-r)*e)/(r+1);return s}return s.domain=function(t){return arguments.length?(e=+t[0],n=+t[1],a()):[e,n]},s.range=function(t){return arguments.length?(r=(o=Xr.call(t)).length-1,a()):o.slice()},s.invertExtent=function(t){var s=o.indexOf(t);return s<0?[NaN,NaN]:s<1?[e,i[0]]:s>=r?[i[r-1],n]:[i[s-1],i[s]]},s.unknown=function(e){return arguments.length?(t=e,s):s},s.thresholds=function(){return i.slice()},s.copy=function(){return yi().domain([e,n]).range(o).unknown(t)},Kr.apply(_i(s),arguments)}var mi=new Date,gi=new Date;function vi(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=function(e){return t(e=new Date(+e)),e},i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,o){var s,a=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return a;do{a.push(s=new Date(+n)),e(n,o),t(n)}while(s<n&&n<r);return a},i.filter=function(n){return vi(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})},n&&(i.count=function(e,r){return mi.setTime(+e),gi.setTime(+r),t(mi),t(gi),Math.floor(n(mi,gi))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var bi=vi(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()});bi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?vi(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};var wi=bi,Ei=(bi.range,vi(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),Si=(Ei.range,6e4),Ai=6048e5;function Ni(t){return vi(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Si)/Ai})}var Ti=Ni(0),Oi=Ni(1),Pi=Ni(2),Ci=Ni(3),xi=Ni(4),Ii=Ni(5),Ri=Ni(6),Bi=(Ti.range,Oi.range,Pi.range,Ci.range,xi.range,Ii.range,Ri.range,vi(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Si)/864e5},function(t){return t.getDate()-1})),Di=Bi,Mi=(Bi.range,vi(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Si)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()})),Ui=(Mi.range,vi(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,e){t.setTime(+t+e*Si)},function(t,e){return(e-t)/Si},function(t){return t.getMinutes()})),ki=(Ui.range,vi(function(t){t.setTime(t-t.getMilliseconds())},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()})),Li=(ki.range,vi(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t}));Li.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?vi(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):Li:null};Li.range;function Fi(t){return vi(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/Ai})}var ji=Fi(0),$i=Fi(1),zi=Fi(2),Yi=Fi(3),Vi=Fi(4),qi=Fi(5),Hi=Fi(6),Wi=(ji.range,$i.range,zi.range,Yi.range,Vi.range,qi.range,Hi.range,vi(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1})),Ji=Wi,Ki=(Wi.range,vi(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));Ki.every=function(t){return isFinite(t=Math.floor(t))&&t>0?vi(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var Gi=Ki;Ki.range;function Xi(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Zi(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Qi(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var to,eo={"-":"",_:" ",0:"0"},no=/^\s*\d+/,ro=/^%/,io=/[\\^$*+?|[\]().{}]/g;function oo(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function so(t){return t.replace(io,"\\$&")}function ao(t){return new RegExp("^(?:"+t.map(so).join("|")+")","i")}function uo(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function lo(t,e,n){var r=no.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function co(t,e,n){var r=no.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function ho(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function fo(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function po(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function _o(t,e,n){var r=no.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function yo(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function mo(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function go(t,e,n){var r=no.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function vo(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function bo(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function wo(t,e,n){var r=no.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Eo(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function So(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Ao(t,e,n){var r=no.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function No(t,e,n){var r=no.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function To(t,e,n){var r=no.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Oo(t,e,n){var r=ro.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Po(t,e,n){var r=no.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Co(t,e,n){var r=no.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function xo(t,e){return oo(t.getDate(),e,2)}function Io(t,e){return oo(t.getHours(),e,2)}function Ro(t,e){return oo(t.getHours()%12||12,e,2)}function Bo(t,e){return oo(1+Di.count(wi(t),t),e,3)}function Do(t,e){return oo(t.getMilliseconds(),e,3)}function Mo(t,e){return Do(t,e)+"000"}function Uo(t,e){return oo(t.getMonth()+1,e,2)}function ko(t,e){return oo(t.getMinutes(),e,2)}function Lo(t,e){return oo(t.getSeconds(),e,2)}function Fo(t){var e=t.getDay();return 0===e?7:e}function jo(t,e){return oo(Ti.count(wi(t)-1,t),e,2)}function $o(t,e){var n=t.getDay();return t=n>=4||0===n?xi(t):xi.ceil(t),oo(xi.count(wi(t),t)+(4===wi(t).getDay()),e,2)}function zo(t){return t.getDay()}function Yo(t,e){return oo(Oi.count(wi(t)-1,t),e,2)}function Vo(t,e){return oo(t.getFullYear()%100,e,2)}function qo(t,e){return oo(t.getFullYear()%1e4,e,4)}function Ho(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+oo(e/60|0,"0",2)+oo(e%60,"0",2)}function Wo(t,e){return oo(t.getUTCDate(),e,2)}function Jo(t,e){return oo(t.getUTCHours(),e,2)}function Ko(t,e){return oo(t.getUTCHours()%12||12,e,2)}function Go(t,e){return oo(1+Ji.count(Gi(t),t),e,3)}function Xo(t,e){return oo(t.getUTCMilliseconds(),e,3)}function Zo(t,e){return Xo(t,e)+"000"}function Qo(t,e){return oo(t.getUTCMonth()+1,e,2)}function ts(t,e){return oo(t.getUTCMinutes(),e,2)}function es(t,e){return oo(t.getUTCSeconds(),e,2)}function ns(t){var e=t.getUTCDay();return 0===e?7:e}function rs(t,e){return oo(ji.count(Gi(t)-1,t),e,2)}function is(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Vi(t):Vi.ceil(t),oo(Vi.count(Gi(t),t)+(4===Gi(t).getUTCDay()),e,2)}function os(t){return t.getUTCDay()}function ss(t,e){return oo($i.count(Gi(t)-1,t),e,2)}function as(t,e){return oo(t.getUTCFullYear()%100,e,2)}function us(t,e){return oo(t.getUTCFullYear()%1e4,e,4)}function ls(){return"+0000"}function cs(){return"%"}function hs(t){return+t}function fs(t){return Math.floor(+t/1e3)}!function(t){to=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,o=t.days,s=t.shortDays,a=t.months,u=t.shortMonths,l=ao(i),c=uo(i),h=ao(o),f=uo(o),d=ao(s),p=uo(s),_=ao(a),y=uo(a),m=ao(u),g=uo(u),v={a:function(t){return s[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:xo,e:xo,f:Mo,H:Io,I:Ro,j:Bo,L:Do,m:Uo,M:ko,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:hs,s:fs,S:Lo,u:Fo,U:jo,V:$o,w:zo,W:Yo,x:null,X:null,y:Vo,Y:qo,Z:Ho,"%":cs},b={a:function(t){return s[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:Wo,e:Wo,f:Zo,H:Jo,I:Ko,j:Go,L:Xo,m:Qo,M:ts,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:hs,s:fs,S:es,u:ns,U:rs,V:is,w:os,W:ss,x:null,X:null,y:as,Y:us,Z:ls,"%":cs},w={a:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.w=p[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=h.exec(e.slice(n));return r?(t.w=f[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=m.exec(e.slice(n));return r?(t.m=g[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=_.exec(e.slice(n));return r?(t.m=y[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return A(t,e,n,r)},d:bo,e:bo,f:To,H:Eo,I:Eo,j:wo,L:No,m:vo,M:So,p:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.p=c[r[0].toLowerCase()],n+r[0].length):-1},q:go,Q:Po,s:Co,S:Ao,u:co,U:ho,V:fo,w:lo,W:po,x:function(t,e,r){return A(t,n,e,r)},X:function(t,e,n){return A(t,r,e,n)},y:yo,Y:_o,Z:mo,"%":Oo};function E(t,e){return function(n){var r,i,o,s=[],a=-1,u=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++a<l;)37===t.charCodeAt(a)&&(s.push(t.slice(u,a)),null!=(i=eo[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=e[r])&&(r=o(n,i)),s.push(r),u=a+1);return s.push(t.slice(u,a)),s.join("")}}function S(t,e){return function(n){var r,i,o=Qi(1900,void 0,1);if(A(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(!e||"Z"in o||(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(r=(i=(r=Zi(Qi(o.y,0,1))).getUTCDay())>4||0===i?$i.ceil(r):$i(r),r=Ji.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(r=(i=(r=Xi(Qi(o.y,0,1))).getDay())>4||0===i?Oi.ceil(r):Oi(r),r=Di.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Zi(Qi(o.y,0,1)).getUTCDay():Xi(Qi(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Zi(o)):Xi(o)}}function A(t,e,n,r){for(var i,o,s=0,a=e.length,u=n.length;s<a;){if(r>=u)return-1;if(37===(i=e.charCodeAt(s++))){if(i=e.charAt(s++),!(o=w[i in eo?e.charAt(s++):i])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return v.x=E(n,v),v.X=E(r,v),v.c=E(e,v),b.x=E(n,b),b.X=E(r,b),b.c=E(e,b),{format:function(t){var e=E(t+="",v);return e.toString=function(){return t},e},parse:function(t){var e=S(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=E(t+="",b);return e.toString=function(){return t},e},utcParse:function(t){var e=S(t+="",!0);return e.toString=function(){return t},e}}}(t),to.format,to.parse,to.utcFormat,to.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var ds=vi(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),ps=(ds.range,vi(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()})),_s=(ps.range,vi(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*Si)},function(t,e){return(e-t)/Si},function(t){return t.getUTCMinutes()}));_s.range;var ys=function(t){return function(){return t}},ms=Math.abs,gs=Math.atan2,vs=Math.cos,bs=Math.max,ws=Math.min,Es=Math.sin,Ss=Math.sqrt,As=1e-12,Ns=Math.PI,Ts=Ns/2,Os=2*Ns;function Ps(t){return t>=1?Ts:t<=-1?-Ts:Math.asin(t)}function Cs(t){return t.innerRadius}function xs(t){return t.outerRadius}function Is(t){return t.startAngle}function Rs(t){return t.endAngle}function Bs(t){return t&&t.padAngle}function Ds(t,e,n,r,i,o,s){var a=t-n,u=e-r,l=(s?o:-o)/Ss(a*a+u*u),c=l*u,h=-l*a,f=t+c,d=e+h,p=n+c,_=r+h,y=(f+p)/2,m=(d+_)/2,g=p-f,v=_-d,b=g*g+v*v,w=i-o,E=f*_-p*d,S=(v<0?-1:1)*Ss(bs(0,w*w*b-E*E)),A=(E*v-g*S)/b,N=(-E*g-v*S)/b,T=(E*v+g*S)/b,O=(-E*g+v*S)/b,P=A-y,C=N-m,x=T-y,I=O-m;return P*P+C*C>x*x+I*I&&(A=T,N=O),{cx:A,cy:N,x01:-c,y01:-h,x11:A*(i/w-1),y11:N*(i/w-1)}}var Ms=function(){var t=Cs,e=xs,n=ys(0),r=null,i=Is,o=Rs,s=Bs,a=null;function u(){var u,l,c=+t.apply(this,arguments),h=+e.apply(this,arguments),f=i.apply(this,arguments)-Ts,d=o.apply(this,arguments)-Ts,p=ms(d-f),_=d>f;if(a||(a=u=dr()),h<c&&(l=h,h=c,c=l),h>As)if(p>Os-As)a.moveTo(h*vs(f),h*Es(f)),a.arc(0,0,h,f,d,!_),c>As&&(a.moveTo(c*vs(d),c*Es(d)),a.arc(0,0,c,d,f,_));else{var y,m,g=f,v=d,b=f,w=d,E=p,S=p,A=s.apply(this,arguments)/2,N=A>As&&(r?+r.apply(this,arguments):Ss(c*c+h*h)),T=ws(ms(h-c)/2,+n.apply(this,arguments)),O=T,P=T;if(N>As){var C=Ps(N/c*Es(A)),x=Ps(N/h*Es(A));(E-=2*C)>As?(b+=C*=_?1:-1,w-=C):(E=0,b=w=(f+d)/2),(S-=2*x)>As?(g+=x*=_?1:-1,v-=x):(S=0,g=v=(f+d)/2)}var I=h*vs(g),R=h*Es(g),B=c*vs(w),D=c*Es(w);if(T>As){var M,U=h*vs(v),k=h*Es(v),L=c*vs(b),F=c*Es(b);if(p<Ns&&(M=function(t,e,n,r,i,o,s,a){var u=n-t,l=r-e,c=s-i,h=a-o,f=h*u-c*l;if(!(f*f<As))return[t+(f=(c*(e-o)-h*(t-i))/f)*u,e+f*l]}(I,R,L,F,U,k,B,D))){var j=I-M[0],$=R-M[1],z=U-M[0],Y=k-M[1],V=1/Es(function(t){return t>1?0:t<-1?Ns:Math.acos(t)}((j*z+$*Y)/(Ss(j*j+$*$)*Ss(z*z+Y*Y)))/2),q=Ss(M[0]*M[0]+M[1]*M[1]);O=ws(T,(c-q)/(V-1)),P=ws(T,(h-q)/(V+1))}}S>As?P>As?(y=Ds(L,F,I,R,h,P,_),m=Ds(U,k,B,D,h,P,_),a.moveTo(y.cx+y.x01,y.cy+y.y01),P<T?a.arc(y.cx,y.cy,P,gs(y.y01,y.x01),gs(m.y01,m.x01),!_):(a.arc(y.cx,y.cy,P,gs(y.y01,y.x01),gs(y.y11,y.x11),!_),a.arc(0,0,h,gs(y.cy+y.y11,y.cx+y.x11),gs(m.cy+m.y11,m.cx+m.x11),!_),a.arc(m.cx,m.cy,P,gs(m.y11,m.x11),gs(m.y01,m.x01),!_))):(a.moveTo(I,R),a.arc(0,0,h,g,v,!_)):a.moveTo(I,R),c>As&&E>As?O>As?(y=Ds(B,D,U,k,c,-O,_),m=Ds(I,R,L,F,c,-O,_),a.lineTo(y.cx+y.x01,y.cy+y.y01),O<T?a.arc(y.cx,y.cy,O,gs(y.y01,y.x01),gs(m.y01,m.x01),!_):(a.arc(y.cx,y.cy,O,gs(y.y01,y.x01),gs(y.y11,y.x11),!_),a.arc(0,0,c,gs(y.cy+y.y11,y.cx+y.x11),gs(m.cy+m.y11,m.cx+m.x11),_),a.arc(m.cx,m.cy,O,gs(m.y11,m.x11),gs(m.y01,m.x01),!_))):a.arc(0,0,c,w,b,_):a.lineTo(B,D)}else a.moveTo(0,0);if(a.closePath(),u)return a=null,u+""||null}return u.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-Ns/2;return[vs(r)*n,Es(r)*n]},u.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:ys(+e),u):t},u.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:ys(+t),u):e},u.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:ys(+t),u):n},u.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:ys(+t),u):r},u.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:ys(+t),u):i},u.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:ys(+t),u):o},u.padAngle=function(t){return arguments.length?(s="function"==typeof t?t:ys(+t),u):s},u.context=function(t){return arguments.length?(a=null==t?null:t,u):a},u},Us=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},ks=function(t){return t},Ls=function(){var t=ks,e=Us,n=null,r=ys(0),i=ys(Os),o=ys(0);function s(s){var a,u,l,c,h,f=s.length,d=0,p=new Array(f),_=new Array(f),y=+r.apply(this,arguments),m=Math.min(Os,Math.max(-Os,i.apply(this,arguments)-y)),g=Math.min(Math.abs(m)/f,o.apply(this,arguments)),v=g*(m<0?-1:1);for(a=0;a<f;++a)(h=_[p[a]=a]=+t(s[a],a,s))>0&&(d+=h);for(null!=e?p.sort(function(t,n){return e(_[t],_[n])}):null!=n&&p.sort(function(t,e){return n(s[t],s[e])}),a=0,l=d?(m-f*v)/d:0;a<f;++a,y=c)u=p[a],c=y+((h=_[u])>0?h*l:0)+v,_[u]={data:s[u],index:a,value:h,startAngle:y,endAngle:c,padAngle:g};return _}return s.value=function(e){return arguments.length?(t="function"==typeof e?e:ys(+e),s):t},s.sortValues=function(t){return arguments.length?(e=t,n=null,s):e},s.sort=function(t){return arguments.length?(n=t,e=null,s):n},s.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:ys(+t),s):r},s.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:ys(+t),s):i},s.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:ys(+t),s):o},s};function Fs(){this._=null}function js(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function $s(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function zs(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Ys(t){for(;t.L;)t=t.L;return t}Fs.prototype={constructor:Fs,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Ys(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&($s(this,n),n=(t=n).U),n.C=!1,r.C=!0,zs(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(zs(this,n),n=(t=n).U),n.C=!1,r.C=!0,$s(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,s=t.R;if(n=o?s?Ys(s):o:s,i?i.L===t?i.L=n:i.R=n:this._=n,o&&s?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==s?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=s,s.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,$s(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,zs(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,$s(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,zs(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,$s(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,zs(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Vs=Fs;function qs(t,e,n,r){var i=[null,null],o=da.push(i)-1;return i.left=t,i.right=e,n&&Ws(i,t,e,n),r&&Ws(i,e,t,r),ha[t.index].halfedges.push(o),ha[e.index].halfedges.push(o),i}function Hs(t,e,n){var r=[e,n];return r.left=t,r}function Ws(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function Js(t,e,n,r,i){var o,s=t[0],a=t[1],u=s[0],l=s[1],c=0,h=1,f=a[0]-u,d=a[1]-l;if(o=e-u,f||!(o>0)){if(o/=f,f<0){if(o<c)return;o<h&&(h=o)}else if(f>0){if(o>h)return;o>c&&(c=o)}if(o=r-u,f||!(o<0)){if(o/=f,f<0){if(o>h)return;o>c&&(c=o)}else if(f>0){if(o<c)return;o<h&&(h=o)}if(o=n-l,d||!(o>0)){if(o/=d,d<0){if(o<c)return;o<h&&(h=o)}else if(d>0){if(o>h)return;o>c&&(c=o)}if(o=i-l,d||!(o<0)){if(o/=d,d<0){if(o>h)return;o>c&&(c=o)}else if(d>0){if(o<c)return;o<h&&(h=o)}return!(c>0||h<1)||(c>0&&(t[0]=[u+c*f,l+c*d]),h<1&&(t[1]=[u+h*f,l+h*d]),!0)}}}}}function Ks(t,e,n,r,i){var o=t[1];if(o)return!0;var s,a,u=t[0],l=t.left,c=t.right,h=l[0],f=l[1],d=c[0],p=c[1],_=(h+d)/2,y=(f+p)/2;if(p===f){if(_<e||_>=r)return;if(h>d){if(u){if(u[1]>=i)return}else u=[_,n];o=[_,i]}else{if(u){if(u[1]<n)return}else u=[_,i];o=[_,n]}}else if(a=y-(s=(h-d)/(p-f))*_,s<-1||s>1)if(h>d){if(u){if(u[1]>=i)return}else u=[(n-a)/s,n];o=[(i-a)/s,i]}else{if(u){if(u[1]<n)return}else u=[(i-a)/s,i];o=[(n-a)/s,n]}else if(f<p){if(u){if(u[0]>=r)return}else u=[e,s*e+a];o=[r,s*r+a]}else{if(u){if(u[0]<e)return}else u=[r,s*r+a];o=[e,s*e+a]}return t[0]=u,t[1]=o,!0}function Gs(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Xs(t,e){return e[+(e.left!==t.site)]}function Zs(t,e){return e[+(e.left===t.site)]}var Qs,ta=[];function ea(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var s=i[0],a=i[1],u=r[0]-s,l=r[1]-a,c=o[0]-s,h=o[1]-a,f=2*(u*h-l*c);if(!(f>=-_a)){var d=u*u+l*l,p=c*c+h*h,_=(h*d-l*p)/f,y=(u*p-c*d)/f,m=ta.pop()||new function(){js(this),this.x=this.y=this.arc=this.site=this.cy=null};m.arc=t,m.site=i,m.x=_+s,m.y=(m.cy=y+a)+Math.sqrt(_*_+y*y),t.circle=m;for(var g=null,v=fa._;v;)if(m.y<v.y||m.y===v.y&&m.x<=v.x){if(!v.L){g=v.P;break}v=v.L}else{if(!v.R){g=v;break}v=v.R}fa.insert(g,m),g||(Qs=m)}}}}function na(t){var e=t.circle;e&&(e.P||(Qs=e.N),fa.remove(e),ta.push(e),js(e),t.circle=null)}var ra=[];function ia(t){var e=ra.pop()||new function(){js(this),this.edge=this.site=this.circle=null};return e.site=t,e}function oa(t){na(t),ca.remove(t),ra.push(t),js(t)}function sa(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],o=t.P,s=t.N,a=[t];oa(t);for(var u=o;u.circle&&Math.abs(n-u.circle.x)<pa&&Math.abs(r-u.circle.cy)<pa;)o=u.P,a.unshift(u),oa(u),u=o;a.unshift(u),na(u);for(var l=s;l.circle&&Math.abs(n-l.circle.x)<pa&&Math.abs(r-l.circle.cy)<pa;)s=l.N,a.push(l),oa(l),l=s;a.push(l),na(l);var c,h=a.length;for(c=1;c<h;++c)l=a[c],u=a[c-1],Ws(l.edge,u.site,l.site,i);u=a[0],(l=a[h-1]).edge=qs(u.site,l.site,null,i),ea(u),ea(l)}function aa(t){for(var e,n,r,i,o=t[0],s=t[1],a=ca._;a;)if((r=ua(a,s)-o)>pa)a=a.L;else{if(!((i=o-la(a,s))>pa)){r>-pa?(e=a.P,n=a):i>-pa?(e=a,n=a.N):e=n=a;break}if(!a.R){e=a;break}a=a.R}!function(t){ha[t.index]={site:t,halfedges:[]}}(t);var u=ia(t);if(ca.insert(e,u),e||n){if(e===n)return na(e),n=ia(e.site),ca.insert(u,n),u.edge=n.edge=qs(e.site,u.site),ea(e),void ea(n);if(n){na(e),na(n);var l=e.site,c=l[0],h=l[1],f=t[0]-c,d=t[1]-h,p=n.site,_=p[0]-c,y=p[1]-h,m=2*(f*y-d*_),g=f*f+d*d,v=_*_+y*y,b=[(y*g-d*v)/m+c,(f*v-_*g)/m+h];Ws(n.edge,l,p,b),u.edge=qs(l,t,null,b),n.edge=qs(t,p,null,b),ea(e),ea(n)}else u.edge=qs(e.site,u.site)}}function ua(t,e){var n=t.site,r=n[0],i=n[1],o=i-e;if(!o)return r;var s=t.P;if(!s)return-1/0;var a=(n=s.site)[0],u=n[1],l=u-e;if(!l)return a;var c=a-r,h=1/o-1/l,f=c/l;return h?(-f+Math.sqrt(f*f-2*h*(c*c/(-2*l)-u+l/2+i-o/2)))/h+r:(r+a)/2}function la(t,e){var n=t.N;if(n)return ua(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var ca,ha,fa,da,pa=1e-6,_a=1e-12;function ya(t,e,n){return(t[0]-n[0])*(e[1]-t[1])-(t[0]-e[0])*(n[1]-t[1])}function ma(t,e){return e[1]-t[1]||e[0]-t[0]}function ga(t,e){var n,r,i,o=t.sort(ma).pop();for(da=[],ha=new Array(t.length),ca=new Vs,fa=new Vs;;)if(i=Qs,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(aa(o),n=o[0],r=o[1]),o=t.pop();else{if(!i)break;sa(i.arc)}if(function(){for(var t,e,n,r,i=0,o=ha.length;i<o;++i)if((t=ha[i])&&(r=(e=t.halfedges).length)){var s=new Array(r),a=new Array(r);for(n=0;n<r;++n)s[n]=n,a[n]=Gs(t,da[e[n]]);for(s.sort(function(t,e){return a[e]-a[t]}),n=0;n<r;++n)a[n]=e[s[n]];for(n=0;n<r;++n)e[n]=a[n]}}(),e){var s=+e[0][0],a=+e[0][1],u=+e[1][0],l=+e[1][1];!function(t,e,n,r){for(var i,o=da.length;o--;)Ks(i=da[o],t,e,n,r)&&Js(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>pa||Math.abs(i[0][1]-i[1][1])>pa)||delete da[o]}(s,a,u,l),function(t,e,n,r){var i,o,s,a,u,l,c,h,f,d,p,_,y=ha.length,m=!0;for(i=0;i<y;++i)if(o=ha[i]){for(s=o.site,a=(u=o.halfedges).length;a--;)da[u[a]]||u.splice(a,1);for(a=0,l=u.length;a<l;)p=(d=Zs(o,da[u[a]]))[0],_=d[1],h=(c=Xs(o,da[u[++a%l]]))[0],f=c[1],(Math.abs(p-h)>pa||Math.abs(_-f)>pa)&&(u.splice(a,0,da.push(Hs(s,d,Math.abs(p-t)<pa&&r-_>pa?[t,Math.abs(h-t)<pa?f:r]:Math.abs(_-r)<pa&&n-p>pa?[Math.abs(f-r)<pa?h:n,r]:Math.abs(p-n)<pa&&_-e>pa?[n,Math.abs(h-n)<pa?f:e]:Math.abs(_-e)<pa&&p-t>pa?[Math.abs(f-e)<pa?h:t,e]:null))-1),++l);l&&(m=!1)}if(m){var g,v,b,w=1/0;for(i=0,m=null;i<y;++i)(o=ha[i])&&(b=(g=(s=o.site)[0]-t)*g+(v=s[1]-e)*v)<w&&(w=b,m=o);if(m){var E=[t,e],S=[t,r],A=[n,r],N=[n,e];m.halfedges.push(da.push(Hs(s=m.site,E,S))-1,da.push(Hs(s,S,A))-1,da.push(Hs(s,A,N))-1,da.push(Hs(s,N,E))-1)}}for(i=0;i<y;++i)(o=ha[i])&&(o.halfedges.length||delete ha[i])}(s,a,u,l)}this.edges=da,this.cells=ha,ca=fa=da=ha=null}ga.prototype={constructor:ga,polygons:function(){var t=this.edges;return this.cells.map(function(e){var n=e.halfedges.map(function(n){return Xs(e,t[n])});return n.data=e.site.data,n})},triangles:function(){var t=[],e=this.edges;return this.cells.forEach(function(n,r){if(o=(i=n.halfedges).length)for(var i,o,s,a=n.site,u=-1,l=e[i[o-1]],c=l.left===a?l.right:l.left;++u<o;)s=c,c=(l=e[i[u]]).left===a?l.right:l.left,s&&c&&r<s.index&&r<c.index&&ya(a,s,c)<0&&t.push([a.data,s.data,c.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,e,n){for(var r,i,o=this,s=o._found||0,a=o.cells.length;!(i=o.cells[s]);)if(++s>=a)return null;var u=t-i.site[0],l=e-i.site[1],c=u*u+l*l;do{i=o.cells[r=s],s=null,i.halfedges.forEach(function(n){var r=o.edges[n],a=r.left;if(a!==i.site&&a||(a=r.right)){var u=t-a[0],l=e-a[1],h=u*u+l*l;h<c&&(c=h,s=a.index)}})}while(null!==s);return o._found=r,null==n||c<=n*n?i.site:null}};Math.SQRT2;function va(t,e,n){this.k=t,this.x=e,this.y=n}va.prototype={constructor:va,scale:function(t){return 1===t?this:new va(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new va(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new va(1,0,0);va.prototype;customElements.define("lsg-pie",class extends st{static get properties(){return{dataPoints:{type:Array},curAngle:{type:Number,attribute:"angle"},interval:{type:Number},alarm:{type:Number}}}constructor(){super(),this.firsttime=1,this.degrees=10,this.NR_ELEMENTS=360/this.degrees,this.dataForColering=null,this.dataSizeElements=null,this._handleClick=this._handleClick.bind(this),this.alarm=-1}createRenderRoot(){return this}render(){return 0===this.firsttime&&this.doUpdate(this.dataPoints),j`
            
            `}firstUpdated(t){this.firsttime=0;var e=ve("#chart");e.classed("svg-container",!0).attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","-60 -60 320 320").classed("svg-content-responsive",!0);for(var n=Math.min(175,175)/2,r=10..toString(),i=e.append("g").attr("transform","translate(100,100)"),o=[],s=0;s<this.NR_ELEMENTS;s++)o.push(s);var a=yi().range(["#fff5f0","#fff4ef","#fff4ee","#fff3ed","#fff2ec","#fff2eb","#fff1ea","#fff0e9","#fff0e8","#ffefe7","#ffeee6","#ffeee6","#ffede5","#ffece4","#ffece3","#ffebe2","#feeae1","#fee9e0","#fee9de","#fee8dd","#fee7dc","#fee6db","#fee6da","#fee5d9","#fee4d8","#fee3d7","#fee2d6","#fee2d5","#fee1d4","#fee0d2","#fedfd1","#feded0","#feddcf","#fedccd","#fedbcc","#fedacb","#fed9ca","#fed8c8","#fed7c7","#fdd6c6","#fdd5c4","#fdd4c3","#fdd3c1","#fdd2c0","#fdd1bf","#fdd0bd","#fdcfbc","#fdceba","#fdcdb9","#fdccb7","#fdcbb6","#fdc9b4","#fdc8b3","#fdc7b2","#fdc6b0","#fdc5af","#fdc4ad","#fdc2ac","#fdc1aa","#fdc0a8","#fcbfa7","#fcbea5","#fcbca4","#fcbba2","#fcbaa1","#fcb99f","#fcb89e","#fcb69c","#fcb59b","#fcb499","#fcb398","#fcb196","#fcb095","#fcaf94","#fcae92","#fcac91","#fcab8f","#fcaa8e","#fca98c","#fca78b","#fca689","#fca588","#fca486","#fca285","#fca183","#fca082","#fc9e81","#fc9d7f","#fc9c7e","#fc9b7c","#fc997b","#fc987a","#fc9778","#fc9677","#fc9475","#fc9374","#fc9273","#fc9071","#fc8f70","#fc8e6f","#fc8d6d","#fc8b6c","#fc8a6b","#fc8969","#fc8868","#fc8667","#fc8565","#fc8464","#fb8263","#fb8162","#fb8060","#fb7f5f","#fb7d5e","#fb7c5d","#fb7b5b","#fb795a","#fb7859","#fb7758","#fb7657","#fb7455","#fa7354","#fa7253","#fa7052","#fa6f51","#fa6e50","#fa6c4e","#f96b4d","#f96a4c","#f9684b","#f9674a","#f96549","#f86448","#f86347","#f86146","#f86045","#f75e44","#f75d43","#f75c42","#f65a41","#f65940","#f6573f","#f5563e","#f5553d","#f4533c","#f4523b","#f4503a","#f34f39","#f34e38","#f24c37","#f24b37","#f14936","#f14835","#f04734","#ef4533","#ef4433","#ee4332","#ed4131","#ed4030","#ec3f2f","#eb3d2f","#eb3c2e","#ea3b2d","#e93a2d","#e8382c","#e7372b","#e6362b","#e6352a","#e5342a","#e43229","#e33128","#e23028","#e12f27","#e02e27","#df2d26","#de2c26","#dd2b25","#dc2a25","#db2924","#da2824","#d92723","#d72623","#d62522","#d52422","#d42321","#d32221","#d22121","#d12020","#d01f20","#ce1f1f","#cd1e1f","#cc1d1f","#cb1d1e","#ca1c1e","#c91b1e","#c71b1d","#c61a1d","#c5191d","#c4191c","#c3181c","#c2181c","#c0171b","#bf171b","#be161b","#bd161a","#bb151a","#ba151a","#b91419","#b81419","#b61419","#b51319","#b41318","#b21218","#b11218","#b01218","#ae1117","#ad1117","#ac1117","#aa1017","#a91016","#a71016","#a60f16","#a40f16","#a30e15","#a10e15","#a00e15","#9e0d15","#9c0d14","#9b0c14","#990c14","#970c14","#960b13","#940b13","#920a13","#900a13","#8f0a12","#8d0912","#8b0912","#890812","#870811","#860711","#840711","#820711","#800610","#7e0610","#7c0510","#7a0510","#78040f","#76040f","#75030f","#73030f","#71020e","#6f020e","#6d010e","#6b010e","#69000d","#67000d"]);a.domain([Nt(o,function(t){return t}),At(o,function(t){return t})]);var u=Array(this.NR_ELEMENTS).fill(this.degrees),l=Ls().sort(null).value(function(t){return t}),c=Ms().outerRadius(n-10).innerRadius(n-200/12),h=Ms().outerRadius(n).innerRadius(n);console.log(h);var f=h({startAngle:0,endAngle:2*Math.PI});console.log(f),e.append("path").attr("id","wavy").attr("d",f).style("fill","none").style("stroke","#0AAAAA").style("stroke-opacity",0).attr("transform","translate(100,100)"),e.append("text").append("textPath").attr("xlink:href","#wavy").style("text-anchor","middle").attr("startOffset","12.5%").attr("font-size",r).text("Zijligging rechts"),e.append("text").append("textPath").attr("xlink:href","#wavy").style("text-anchor","middle").attr("startOffset","37.5%").attr("font-size",r).text("Zijligging links"),e.append("text").append("textPath").attr("xlink:href","#wavy").style("text-anchor","middle").attr("startOffset","37.5%").attr("font-size",r).text("Zijligging links"),e.append("text").append("textPath").attr("xlink:href","#wavy").style("text-anchor","right").attr("startOffset","48.2%").attr("font-size",r).text("Rug "),e.append("text").append("textPath").attr("xlink:href","#wavy").style("text-anchor","left").attr("startOffset","0%").attr("font-size",r).text("ligging"),e.append("text").append("textPath").attr("xlink:href","#wavy").style("text-anchor","middle").attr("startOffset","75%").attr("font-size",r).text("Buik ligging");var d=i.selectAll(".arc").data(l(u)).enter().append("g").attr("class","arc");for(d.append("path").attr("d",c).attr("fill",function(t,e){return a(o[e])}).on("click",this._handleClick),s=0;s<this.NR_ELEMENTS;s++)o[s]=0;this.dataForColering=o,this.width=200,this.height=200,this.arc=d,this.path=c,this.color=a;var p=e.append("g").attr("transform","translate(100,100)").append("g");p.append("svg:image").attr("id","feet").attr("width",100).attr("height",100).attr("x",-50).attr("y",-50).attr("xlink:href","./img/icons/feet2.png"),p.attr("transform","rotate(0)")}_handleClick(){this.doUpdate()}doUpdate(t){var e=this.color,n=this.dataForColering,r=t[0],i=r/this.degrees;if(i=Math.floor(i),-1==this.alarm)n[i]=n[i]+1;else{for(var o=0;o<this.NR_ELEMENTS;o++)n[o]=0;n[i]=1}e=yi().range(["#fff5f0","#fff4ef","#fff4ee","#fff3ed","#fff2ec","#fff2eb","#fff1ea","#fff0e9","#fff0e8","#ffefe7","#ffeee6","#ffeee6","#ffede5","#ffece4","#ffece3","#ffebe2","#feeae1","#fee9e0","#fee9de","#fee8dd","#fee7dc","#fee6db","#fee6da","#fee5d9","#fee4d8","#fee3d7","#fee2d6","#fee2d5","#fee1d4","#fee0d2","#fedfd1","#feded0","#feddcf","#fedccd","#fedbcc","#fedacb","#fed9ca","#fed8c8","#fed7c7","#fdd6c6","#fdd5c4","#fdd4c3","#fdd3c1","#fdd2c0","#fdd1bf","#fdd0bd","#fdcfbc","#fdceba","#fdcdb9","#fdccb7","#fdcbb6","#fdc9b4","#fdc8b3","#fdc7b2","#fdc6b0","#fdc5af","#fdc4ad","#fdc2ac","#fdc1aa","#fdc0a8","#fcbfa7","#fcbea5","#fcbca4","#fcbba2","#fcbaa1","#fcb99f","#fcb89e","#fcb69c","#fcb59b","#fcb499","#fcb398","#fcb196","#fcb095","#fcaf94","#fcae92","#fcac91","#fcab8f","#fcaa8e","#fca98c","#fca78b","#fca689","#fca588","#fca486","#fca285","#fca183","#fca082","#fc9e81","#fc9d7f","#fc9c7e","#fc9b7c","#fc997b","#fc987a","#fc9778","#fc9677","#fc9475","#fc9374","#fc9273","#fc9071","#fc8f70","#fc8e6f","#fc8d6d","#fc8b6c","#fc8a6b","#fc8969","#fc8868","#fc8667","#fc8565","#fc8464","#fb8263","#fb8162","#fb8060","#fb7f5f","#fb7d5e","#fb7c5d","#fb7b5b","#fb795a","#fb7859","#fb7758","#fb7657","#fb7455","#fa7354","#fa7253","#fa7052","#fa6f51","#fa6e50","#fa6c4e","#f96b4d","#f96a4c","#f9684b","#f9674a","#f96549","#f86448","#f86347","#f86146","#f86045","#f75e44","#f75d43","#f75c42","#f65a41","#f65940","#f6573f","#f5563e","#f5553d","#f4533c","#f4523b","#f4503a","#f34f39","#f34e38","#f24c37","#f24b37","#f14936","#f14835","#f04734","#ef4533","#ef4433","#ee4332","#ed4131","#ed4030","#ec3f2f","#eb3d2f","#eb3c2e","#ea3b2d","#e93a2d","#e8382c","#e7372b","#e6362b","#e6352a","#e5342a","#e43229","#e33128","#e23028","#e12f27","#e02e27","#df2d26","#de2c26","#dd2b25","#dc2a25","#db2924","#da2824","#d92723","#d72623","#d62522","#d52422","#d42321","#d32221","#d22121","#d12020","#d01f20","#ce1f1f","#cd1e1f","#cc1d1f","#cb1d1e","#ca1c1e","#c91b1e","#c71b1d","#c61a1d","#c5191d","#c4191c","#c3181c","#c2181c","#c0171b","#bf171b","#be161b","#bd161a","#bb151a","#ba151a","#b91419","#b81419","#b61419","#b51319","#b41318","#b21218","#b11218","#b01218","#ae1117","#ad1117","#ac1117","#aa1017","#a91016","#a71016","#a60f16","#a40f16","#a30e15","#a10e15","#a00e15","#9e0d15","#9c0d14","#9b0c14","#990c14","#970c14","#960b13","#940b13","#920a13","#900a13","#8f0a12","#8d0912","#8b0912","#890812","#870811","#860711","#840711","#820711","#800610","#7e0610","#7c0510","#7a0510","#78040f","#76040f","#75030f","#73030f","#71020e","#6f020e","#6d010e","#6b010e","#69000d","#67000d"]),-1==this.alarm?e.domain([Nt(n,function(t){return t}),14400/this.interval]):e.domain([Nt(n,function(t){return t}),240/this.alarm]),ve("#chart").selectAll("path").attr("fill",function(t,r){return e(n[r])}),ve("#chart").select("#feet").attr("transform","rotate("+r+")")}});customElements.define("vaadin-lumo-styles",class extends HTMLElement{static get version(){return"1.5.0"}});
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let ba,wa=null,Ea=window.HTMLImports&&window.HTMLImports.whenReady||null;function Sa(t){requestAnimationFrame(function(){Ea?Ea(t):(wa||(wa=new Promise(t=>{ba=t}),"complete"===document.readyState?ba():document.addEventListener("readystatechange",()=>{"complete"===document.readyState&&ba()})),wa.then(function(){t&&t()}))})}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Aa="__seenByShadyCSS",Na="__shadyCSSCachedStyle";let Ta=null,Oa=null;class Pa{constructor(){this.customStyles=[],this.enqueued=!1,Sa(()=>{window.ShadyCSS.flushCustomStyles&&window.ShadyCSS.flushCustomStyles()})}enqueueDocumentValidation(){!this.enqueued&&Oa&&(this.enqueued=!0,Sa(Oa))}addCustomStyle(t){t[Aa]||(t[Aa]=!0,this.customStyles.push(t),this.enqueueDocumentValidation())}getStyleForCustomStyle(t){if(t[Na])return t[Na];let e;return e=t.getStyle?t.getStyle():t}processStyles(){const t=this.customStyles;for(let e=0;e<t.length;e++){const n=t[e];if(n[Na])continue;const r=this.getStyleForCustomStyle(n);if(r){const t=r.__appliedElement||r;Ta&&Ta(t),n[Na]=t}}return t}}Pa.prototype.addCustomStyle=Pa.prototype.addCustomStyle,Pa.prototype.getStyleForCustomStyle=Pa.prototype.getStyleForCustomStyle,Pa.prototype.processStyles=Pa.prototype.processStyles,Object.defineProperties(Pa.prototype,{transformCallback:{get:()=>Ta,set(t){Ta=t}},validateCallback:{get:()=>Oa,set(t){let e=!1;Oa||(e=!0),Oa=t,e&&this.enqueueDocumentValidation()}}});
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
const Ca=/(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi,xa=/(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi,Ia=/@media\s(.*)/;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
function Ra(t,e){for(let n in e)null===n?t.style.removeProperty(n):t.style.setProperty(n,e[n])}function Ba(t,e){const n=window.getComputedStyle(t).getPropertyValue(e);return n?n.trim():""}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
const Da=!(window.ShadyDOM&&window.ShadyDOM.inUse);let Ma,Ua;function ka(t){Ma=(!t||!t.shimcssproperties)&&(Da||Boolean(!navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/)&&window.CSS&&CSS.supports&&CSS.supports("box-shadow","0 0 0 var(--foo)")))}window.ShadyCSS&&void 0!==window.ShadyCSS.cssBuild&&(Ua=window.ShadyCSS.cssBuild);const La=Boolean(window.ShadyCSS&&window.ShadyCSS.disableRuntime);window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?Ma=window.ShadyCSS.nativeCss:window.ShadyCSS?(ka(window.ShadyCSS),window.ShadyCSS=void 0):ka(window.WebComponents&&window.WebComponents.flags);const Fa=Ma,ja=new Pa;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/window.ShadyCSS||(window.ShadyCSS={prepareTemplate(t,e,n){},prepareTemplateDom(t,e){},prepareTemplateStyles(t,e,n){},styleSubtree(t,e){ja.processStyles(),Ra(t,e)},styleElement(t){ja.processStyles()},styleDocument(t){ja.processStyles(),Ra(document.body,t)},getComputedStyleValue:(t,e)=>Ba(t,e),flushCustomStyles(){},nativeCss:Fa,nativeShadow:Da,cssBuild:Ua,disableRuntime:La}),window.ShadyCSS.CustomStyleInterface=ja,
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
window.JSCompiler_renameProperty=function(t,e){return t};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let $a,za,Ya=/(url\()([^)]*)(\))/g,Va=/(^\/[^\/])|(^#)|(^[\w-\d]*:)/;function qa(t,e){if(t&&Va.test(t))return t;if("//"===t)return t;if(void 0===$a){$a=!1;try{const t=new URL("b","http://a");t.pathname="c%20d",$a="http://a/c%20d"===t.href}catch(t){}}if(e||(e=document.baseURI||window.location.href),$a)try{return new URL(t,e).href}catch(e){return t}return za||((za=document.implementation.createHTMLDocument("temp")).base=za.createElement("base"),za.head.appendChild(za.base),za.anchor=za.createElement("a"),za.body.appendChild(za.anchor)),za.base.href=e,za.anchor.href=t,za.anchor.href||t}function Ha(t,e){return t.replace(Ya,function(t,n,r,i){return n+"'"+qa(r.replace(/["']/g,""),e)+"'"+i})}function Wa(t){return t.substring(0,t.lastIndexOf("/")+1)}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Ja=!window.ShadyDOM;Boolean(!window.ShadyCSS||window.ShadyCSS.nativeCss),window.customElements.polyfillWrapFlushCallback;let Ka=Wa(document.baseURI||window.location.href);let Ga=window.Polymer&&window.Polymer.sanitizeDOMValue||void 0;let Xa=!1;let Za=!1;let Qa=!1;let tu=!1;let eu=!1;let nu=!0;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let ru={},iu={};function ou(t,e){ru[t]=iu[t.toLowerCase()]=e}function su(t){return ru[t]||iu[t.toLowerCase()]}class au extends HTMLElement{static get observedAttributes(){return["id"]}static import(t,e){if(t){let n=su(t);return n&&e?n.querySelector(e):n}return null}attributeChangedCallback(t,e,n,r){e!==n&&this.register()}get assetpath(){if(!this.__assetpath){const t=window.HTMLImports&&HTMLImports.importForElement?HTMLImports.importForElement(this)||document:this.ownerDocument,e=qa(this.getAttribute("assetpath")||"",t.baseURI);this.__assetpath=Wa(e)}return this.__assetpath}register(t){if(t=t||this.id){if(Za&&void 0!==su(t))throw ou(t,null),new Error(`strictTemplatePolicy: dom-module ${t} re-registered`);this.id=t,ou(t,this),function(t){t.querySelector("style")&&console.warn("dom-module %s has style outside template",t.id)}(this)}}}au.prototype.modules=ru,customElements.define("dom-module",au);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
const uu="link[rel=import][type~=css]",lu="include",cu="shady-unscoped";function hu(t){return au.import(t)}function fu(t){const e=Ha((t.body?t.body:t).textContent,t.baseURI),n=document.createElement("style");return n.textContent=e,n}function du(t){const e=t.trim().split(/\s+/),n=[];for(let t=0;t<e.length;t++)n.push(...pu(e[t]));return n}function pu(t){const e=hu(t);if(!e)return console.warn("Could not find style data in module named",t),[];if(void 0===e._styles){const t=[];t.push(...yu(e));const n=e.querySelector("template");n&&t.push(..._u(n,e.assetpath)),e._styles=t}return e._styles}function _u(t,e){if(!t._styles){const n=[],r=t.content.querySelectorAll("style");for(let t=0;t<r.length;t++){let i=r[t],o=i.getAttribute(lu);o&&n.push(...du(o).filter(function(t,e,n){return n.indexOf(t)===e})),e&&(i.textContent=Ha(i.textContent,e)),n.push(i)}t._styles=n}return t._styles}function yu(t){const e=[],n=t.querySelectorAll(uu);for(let t=0;t<n.length;t++){let r=n[t];if(r.import){const t=r.import,n=r.hasAttribute(cu);if(n&&!t._unscopedStyle){const e=fu(t);e.setAttribute(cu,""),t._unscopedStyle=e}else t._style||(t._style=fu(t));e.push(n?t._unscopedStyle:t._style)}}return e}function mu(t){let e=hu(t);if(e&&void 0===e._cssText){let t=gu(e),n=e.querySelector("template");n&&(t+=function(t,e){let n="";const r=_u(t,e);for(let t=0;t<r.length;t++){let e=r[t];e.parentNode&&e.parentNode.removeChild(e),n+=e.textContent}return n}(n,e.assetpath)),e._cssText=t||null}return e||console.warn("Could not find style data in module named",t),e&&e._cssText||""}function gu(t){let e="",n=yu(t);for(let t=0;t<n.length;t++)e+=n[t].textContent;return e}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const vu="include",bu=window.ShadyCSS.CustomStyleInterface;window.customElements.define("custom-style",class extends HTMLElement{constructor(){super(),this._style=null,bu.addCustomStyle(this)}getStyle(){if(this._style)return this._style;const t=this.querySelector("style");if(!t)return null;this._style=t;const e=t.getAttribute(vu);return e&&(t.removeAttribute(vu),t.textContent=function(t){let e=t.trim().split(/\s+/),n="";for(let t=0;t<e.length;t++)n+=mu(e[t]);return n}(e)+t.textContent),this.ownerDocument!==window.document&&window.document.head.appendChild(this),this._style}});const wu=document.createElement("template");wu.innerHTML='<custom-style>\n  <style>\n    html {\n      /* Base (background) */\n      --lumo-base-color: #FFF;\n\n      /* Tint */\n      --lumo-tint-5pct: hsla(0, 0%, 100%, 0.3);\n      --lumo-tint-10pct: hsla(0, 0%, 100%, 0.37);\n      --lumo-tint-20pct: hsla(0, 0%, 100%, 0.44);\n      --lumo-tint-30pct: hsla(0, 0%, 100%, 0.5);\n      --lumo-tint-40pct: hsla(0, 0%, 100%, 0.57);\n      --lumo-tint-50pct: hsla(0, 0%, 100%, 0.64);\n      --lumo-tint-60pct: hsla(0, 0%, 100%, 0.7);\n      --lumo-tint-70pct: hsla(0, 0%, 100%, 0.77);\n      --lumo-tint-80pct: hsla(0, 0%, 100%, 0.84);\n      --lumo-tint-90pct: hsla(0, 0%, 100%, 0.9);\n      --lumo-tint: #FFF;\n\n      /* Shade */\n      --lumo-shade-5pct: hsla(214, 61%, 25%, 0.05);\n      --lumo-shade-10pct: hsla(214, 57%, 24%, 0.1);\n      --lumo-shade-20pct: hsla(214, 53%, 23%, 0.16);\n      --lumo-shade-30pct: hsla(214, 50%, 22%, 0.26);\n      --lumo-shade-40pct: hsla(214, 47%, 21%, 0.38);\n      --lumo-shade-50pct: hsla(214, 45%, 20%, 0.5);\n      --lumo-shade-60pct: hsla(214, 43%, 19%, 0.61);\n      --lumo-shade-70pct: hsla(214, 42%, 18%, 0.72);\n      --lumo-shade-80pct: hsla(214, 41%, 17%, 0.83);\n      --lumo-shade-90pct: hsla(214, 40%, 16%, 0.94);\n      --lumo-shade: hsl(214, 35%, 15%);\n\n      /* Contrast */\n      --lumo-contrast-5pct: var(--lumo-shade-5pct);\n      --lumo-contrast-10pct: var(--lumo-shade-10pct);\n      --lumo-contrast-20pct: var(--lumo-shade-20pct);\n      --lumo-contrast-30pct: var(--lumo-shade-30pct);\n      --lumo-contrast-40pct: var(--lumo-shade-40pct);\n      --lumo-contrast-50pct: var(--lumo-shade-50pct);\n      --lumo-contrast-60pct: var(--lumo-shade-60pct);\n      --lumo-contrast-70pct: var(--lumo-shade-70pct);\n      --lumo-contrast-80pct: var(--lumo-shade-80pct);\n      --lumo-contrast-90pct: var(--lumo-shade-90pct);\n      --lumo-contrast: var(--lumo-shade);\n\n      /* Text */\n      --lumo-header-text-color: var(--lumo-contrast);\n      --lumo-body-text-color: var(--lumo-contrast-90pct);\n      --lumo-secondary-text-color: var(--lumo-contrast-70pct);\n      --lumo-tertiary-text-color: var(--lumo-contrast-50pct);\n      --lumo-disabled-text-color: var(--lumo-contrast-30pct);\n\n      /* Primary */\n      --lumo-primary-color: hsl(214, 90%, 52%);\n      --lumo-primary-color-50pct: hsla(214, 90%, 52%, 0.5);\n      --lumo-primary-color-10pct: hsla(214, 90%, 52%, 0.1);\n      --lumo-primary-text-color: var(--lumo-primary-color);\n      --lumo-primary-contrast-color: #FFF;\n\n      /* Error */\n      --lumo-error-color: hsl(3, 100%, 61%);\n      --lumo-error-color-50pct: hsla(3, 100%, 60%, 0.5);\n      --lumo-error-color-10pct: hsla(3, 100%, 60%, 0.1);\n      --lumo-error-text-color: hsl(3, 92%, 53%);\n      --lumo-error-contrast-color: #FFF;\n\n      /* Success */\n      --lumo-success-color: hsl(145, 80%, 42%); /* hsl(144,82%,37%); */\n      --lumo-success-color-50pct: hsla(145, 76%, 44%, 0.55);\n      --lumo-success-color-10pct: hsla(145, 76%, 44%, 0.12);\n      --lumo-success-text-color: hsl(145, 100%, 32%);\n      --lumo-success-contrast-color: #FFF;\n    }\n  </style>\n</custom-style><dom-module id="lumo-color">\n  <template>\n    <style>\n      [theme~="dark"] {\n        /* Base (background) */\n        --lumo-base-color: hsl(214, 35%, 21%);\n\n        /* Tint */\n        --lumo-tint-5pct: hsla(214, 65%, 85%, 0.06);\n        --lumo-tint-10pct: hsla(214, 60%, 80%, 0.14);\n        --lumo-tint-20pct: hsla(214, 64%, 82%, 0.23);\n        --lumo-tint-30pct: hsla(214, 69%, 84%, 0.32);\n        --lumo-tint-40pct: hsla(214, 73%, 86%, 0.41);\n        --lumo-tint-50pct: hsla(214, 78%, 88%, 0.5);\n        --lumo-tint-60pct: hsla(214, 82%, 90%, 0.6);\n        --lumo-tint-70pct: hsla(214, 87%, 92%, 0.7);\n        --lumo-tint-80pct: hsla(214, 91%, 94%, 0.8);\n        --lumo-tint-90pct: hsla(214, 96%, 96%, 0.9);\n        --lumo-tint: hsl(214, 100%, 98%);\n\n        /* Shade */\n        --lumo-shade-5pct: hsla(214, 0%, 0%, 0.07);\n        --lumo-shade-10pct: hsla(214, 4%, 2%, 0.15);\n        --lumo-shade-20pct: hsla(214, 8%, 4%, 0.23);\n        --lumo-shade-30pct: hsla(214, 12%, 6%, 0.32);\n        --lumo-shade-40pct: hsla(214, 16%, 8%, 0.41);\n        --lumo-shade-50pct: hsla(214, 20%, 10%, 0.5);\n        --lumo-shade-60pct: hsla(214, 24%, 12%, 0.6);\n        --lumo-shade-70pct: hsla(214, 28%, 13%, 0.7);\n        --lumo-shade-80pct: hsla(214, 32%, 13%, 0.8);\n        --lumo-shade-90pct: hsla(214, 33%, 13%, 0.9);\n        --lumo-shade: hsl(214, 33%, 13%);\n\n        /* Contrast */\n        --lumo-contrast-5pct: var(--lumo-tint-5pct);\n        --lumo-contrast-10pct: var(--lumo-tint-10pct);\n        --lumo-contrast-20pct: var(--lumo-tint-20pct);\n        --lumo-contrast-30pct: var(--lumo-tint-30pct);\n        --lumo-contrast-40pct: var(--lumo-tint-40pct);\n        --lumo-contrast-50pct: var(--lumo-tint-50pct);\n        --lumo-contrast-60pct: var(--lumo-tint-60pct);\n        --lumo-contrast-70pct: var(--lumo-tint-70pct);\n        --lumo-contrast-80pct: var(--lumo-tint-80pct);\n        --lumo-contrast-90pct: var(--lumo-tint-90pct);\n        --lumo-contrast: var(--lumo-tint);\n\n        /* Text */\n        --lumo-header-text-color: var(--lumo-contrast);\n        --lumo-body-text-color: var(--lumo-contrast-90pct);\n        --lumo-secondary-text-color: var(--lumo-contrast-70pct);\n        --lumo-tertiary-text-color: var(--lumo-contrast-50pct);\n        --lumo-disabled-text-color: var(--lumo-contrast-30pct);\n\n        /* Primary */\n        --lumo-primary-color: hsl(214, 86%, 55%);\n        --lumo-primary-color-50pct: hsla(214, 86%, 55%, 0.5);\n        --lumo-primary-color-10pct: hsla(214, 90%, 63%, 0.1);\n        --lumo-primary-text-color: hsl(214, 100%, 70%);\n        --lumo-primary-contrast-color: #FFF;\n\n        /* Error */\n        --lumo-error-color: hsl(3, 90%, 63%);\n        --lumo-error-color-50pct: hsla(3, 90%, 63%, 0.5);\n        --lumo-error-color-10pct: hsla(3, 90%, 63%, 0.1);\n        --lumo-error-text-color: hsl(3, 100%, 67%);\n\n        /* Success */\n        --lumo-success-color: hsl(145, 65%, 42%);\n        --lumo-success-color-50pct: hsla(145, 65%, 42%, 0.5);\n        --lumo-success-color-10pct: hsla(145, 65%, 42%, 0.1);\n        --lumo-success-text-color: hsl(145, 85%, 47%);\n      }\n\n      html {\n        color: var(--lumo-body-text-color);\n        background-color: var(--lumo-base-color);\n      }\n\n      [theme~="dark"] {\n        color: var(--lumo-body-text-color);\n        background-color: var(--lumo-base-color);\n      }\n\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        color: var(--lumo-header-text-color);\n      }\n\n      a {\n        color: var(--lumo-primary-text-color);\n      }\n\n      blockquote {\n        color: var(--lumo-secondary-text-color);\n      }\n\n      code,\n      pre {\n        background-color: var(--lumo-contrast-10pct);\n        border-radius: var(--lumo-border-radius-m);\n      }\n    </style>\n  </template>\n</dom-module><dom-module id="lumo-color-legacy">\n  <template>\n    <style include="lumo-color">\n      :host {\n        color: var(--lumo-body-text-color) !important;\n        background-color: var(--lumo-base-color) !important;\n      }\n    </style>\n  </template>\n</dom-module>',document.head.appendChild(wu.content);const Eu=document.createElement("template");Eu.innerHTML="<custom-style>\n  <style>\n    html {\n      --lumo-size-xs: 1.625rem;\n      --lumo-size-s: 1.875rem;\n      --lumo-size-m: 2.25rem;\n      --lumo-size-l: 2.75rem;\n      --lumo-size-xl: 3.5rem;\n\n      /* Icons */\n      --lumo-icon-size-s: 1.25em;\n      --lumo-icon-size-m: 1.5em;\n      --lumo-icon-size-l: 2.25em;\n      /* For backwards compatibility */\n      --lumo-icon-size: var(--lumo-icon-size-m);\n    }\n  </style>\n</custom-style>",document.head.appendChild(Eu.content);const Su=document.createElement("template");Su.innerHTML="<custom-style>\n  <style>\n    html {\n      /* Square */\n      --lumo-space-xs: 0.25rem;\n      --lumo-space-s: 0.5rem;\n      --lumo-space-m: 1rem;\n      --lumo-space-l: 1.5rem;\n      --lumo-space-xl: 2.5rem;\n\n      /* Wide */\n      --lumo-space-wide-xs: calc(var(--lumo-space-xs) / 2) var(--lumo-space-xs);\n      --lumo-space-wide-s: calc(var(--lumo-space-s) / 2) var(--lumo-space-s);\n      --lumo-space-wide-m: calc(var(--lumo-space-m) / 2) var(--lumo-space-m);\n      --lumo-space-wide-l: calc(var(--lumo-space-l) / 2) var(--lumo-space-l);\n      --lumo-space-wide-xl: calc(var(--lumo-space-xl) / 2) var(--lumo-space-xl);\n\n      /* Tall */\n      --lumo-space-tall-xs: var(--lumo-space-xs) calc(var(--lumo-space-xs) / 2);\n      --lumo-space-tall-s: var(--lumo-space-s) calc(var(--lumo-space-s) / 2);\n      --lumo-space-tall-m: var(--lumo-space-m) calc(var(--lumo-space-m) / 2);\n      --lumo-space-tall-l: var(--lumo-space-l) calc(var(--lumo-space-l) / 2);\n      --lumo-space-tall-xl: var(--lumo-space-xl) calc(var(--lumo-space-xl) / 2);\n    }\n  </style>\n</custom-style>",document.head.appendChild(Su.content);const Au=document.createElement("template");Au.innerHTML="<custom-style>\n  <style>\n    html {\n      /* Border radius */\n      --lumo-border-radius-s: 0.25em; /* Checkbox, badge, date-picker year indicator, etc */\n      --lumo-border-radius-m: var(--lumo-border-radius, 0.25em); /* Button, text field, menu overlay, etc */\n      --lumo-border-radius-l: 0.5em; /* Dialog, notification, etc */\n      --lumo-border-radius: 0.25em; /* Deprecated */\n\n      /* Shadow */\n      --lumo-box-shadow-xs: 0 1px 4px -1px var(--lumo-shade-50pct);\n      --lumo-box-shadow-s: 0 2px 4px -1px var(--lumo-shade-20pct), 0 3px 12px -1px var(--lumo-shade-30pct);\n      --lumo-box-shadow-m: 0 2px 6px -1px var(--lumo-shade-20pct), 0 8px 24px -4px var(--lumo-shade-40pct);\n      --lumo-box-shadow-l: 0 3px 18px -2px var(--lumo-shade-20pct), 0 12px 48px -6px var(--lumo-shade-40pct);\n      --lumo-box-shadow-xl: 0 4px 24px -3px var(--lumo-shade-20pct), 0 18px 64px -8px var(--lumo-shade-40pct);\n\n      /* Clickable element cursor */\n      --lumo-clickable-cursor: default;\n    }\n  </style>\n</custom-style>",document.head.appendChild(Au.content);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
class Nu{constructor(t){this.value=t.toString()}toString(){return this.value}}function Tu(t){if(t instanceof Nu)return t.value;throw new Error(`non-literal value passed to Polymer's htmlLiteral function: ${t}`)}const Ou=function(t,...e){const n=document.createElement("template");return n.innerHTML=e.reduce((e,n,r)=>e+function(t){if(t instanceof HTMLTemplateElement)return t.innerHTML;if(t instanceof Nu)return Tu(t);throw new Error(`non-template value passed to Polymer's html function: ${t}`)}(n)+t[r+1],t[0]),n},Pu=Ou`<dom-module id="lumo-split-layout" theme-for="vaadin-split-layout">
  <template>
    <style>
      [part="splitter"] {
        min-width: var(--lumo-space-s);
        min-height: var(--lumo-space-s);
        background-color: var(--lumo-contrast-5pct);
        transition: 0.1s background-color;
      }

      [part="handle"] {
        display: flex;
        align-items: center;
        justify-content: center;
        width: var(--lumo-size-m);
        height: var(--lumo-size-m);
      }

      [part="handle"]::after {
        content: "";
        display: block;
        width: 4px;
        height: 100%;
        max-width: 100%;
        max-height: 100%;
        border-radius: var(--lumo-border-radius);
        background-color: var(--lumo-contrast-30pct);
        transition: 0.1s opacity, 0.1s background-color;
      }

      :host([orientation="vertical"]) [part="handle"]::after {
        width: 100%;
        height: 4px;
      }

      /* Hover style */

      [part="splitter"]:hover [part="handle"]::after {
        background-color: var(--lumo-contrast-40pct);
      }

      /* Disable hover for touch devices */
      @media (pointer: coarse) {
        [part="splitter"]:hover [part="handle"]::after {
          background-color: var(--lumo-contrast-30pct);
        }
      }

      /* Active style */

      [part="splitter"]:active [part="handle"]::after {
        background-color: var(--lumo-contrast-50pct);
      }

      /* Small/minimal */

      :host([theme~="small"]) > [part="splitter"] {
        border-left: 1px solid var(--lumo-contrast-10pct);
        border-top: 1px solid var(--lumo-contrast-10pct);
      }

      :host([theme~="small"]) > [part="splitter"],
      :host([theme~="minimal"]) > [part="splitter"] {
        min-width: 0;
        min-height: 0;
        background-color: transparent;
      }

      :host([theme~="small"]) > [part="splitter"]::after,
      :host([theme~="minimal"]) > [part="splitter"]::after {
        content: "";
        position: absolute;
        top: -4px;
        right: -4px;
        bottom: -4px;
        left: -4px;
      }

      :host([theme~="small"]) > [part="splitter"] > [part="handle"]::after,
      :host([theme~="minimal"]) > [part="splitter"] > [part="handle"]::after {
        opacity: 0;
      }

      :host([theme~="small"]) > [part="splitter"]:hover > [part="handle"]::after,
      :host([theme~="small"]) > [part="splitter"]:active > [part="handle"]::after,
      :host([theme~="minimal"]) > [part="splitter"]:hover > [part="handle"]::after,
      :host([theme~="minimal"]) > [part="splitter"]:active > [part="handle"]::after {
        opacity: 1;
      }
    </style>
  </template>
</dom-module>`;document.head.appendChild(Pu.content);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let Cu=0;function xu(){}xu.prototype.__mixinApplications,xu.prototype.__mixinSet;const Iu=function(t){let e=t.__mixinApplications;e||(e=new WeakMap,t.__mixinApplications=e);let n=Cu++;return function(r){let i=r.__mixinSet;if(i&&i[n])return r;let o=e,s=o.get(r);s||(s=t(r),o.set(r,s));let a=Object.create(s.__mixinSet||i||null);return a[n]=!0,s.__mixinSet=a,s}},Ru=window.ShadyDOM&&window.ShadyDOM.noPatch&&window.ShadyDOM.wrap?window.ShadyDOM.wrap:window.ShadyDOM?t=>ShadyDOM.patch(t):t=>t;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
function Bu(t){return t.indexOf(".")>=0}function Du(t){let e=t.indexOf(".");return-1===e?t:t.slice(0,e)}function Mu(t,e){return 0===t.indexOf(e+".")}function Uu(t,e){return 0===e.indexOf(t+".")}function ku(t,e,n){return e+n.slice(t.length)}function Lu(t){if(Array.isArray(t)){let e=[];for(let n=0;n<t.length;n++){let r=t[n].toString().split(".");for(let t=0;t<r.length;t++)e.push(r[t])}return e.join(".")}return t}function Fu(t){return Array.isArray(t)?Lu(t).split("."):t.toString().split(".")}function ju(t,e,n){let r=t,i=Fu(e);for(let t=0;t<i.length;t++){if(!r)return;r=r[i[t]]}return n&&(n.path=i.join(".")),r}function $u(t,e,n){let r=t,i=Fu(e),o=i[i.length-1];if(i.length>1){for(let t=0;t<i.length-1;t++){if(!(r=r[i[t]]))return}r[o]=n}else r[e]=n;return i.join(".")}const zu={},Yu=/-[a-z]/g,Vu=/([A-Z])/g;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function qu(t){return zu[t]||(zu[t]=t.indexOf("-")<0?t:t.replace(Yu,t=>t[1].toUpperCase()))}function Hu(t){return zu[t]||(zu[t]=t.replace(Vu,"-$1").toLowerCase())}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/let Wu=0,Ju=0,Ku=[],Gu=0,Xu=document.createTextNode("");new window.MutationObserver(function(){const t=Ku.length;for(let e=0;e<t;e++){let t=Ku[e];if(t)try{t()}catch(t){setTimeout(()=>{throw t})}}Ku.splice(0,t),Ju+=t}).observe(Xu,{characterData:!0});const Zu={after:t=>({run:e=>window.setTimeout(e,t),cancel(t){window.clearTimeout(t)}}),run:(t,e)=>window.setTimeout(t,e),cancel(t){window.clearTimeout(t)}},Qu={run:t=>window.requestIdleCallback?window.requestIdleCallback(t):window.setTimeout(t,16),cancel(t){window.cancelIdleCallback?window.cancelIdleCallback(t):window.clearTimeout(t)}},tl={run:t=>(Xu.textContent=Gu++,Ku.push(t),Wu++),cancel(t){const e=t-Ju;if(e>=0){if(!Ku[e])throw new Error("invalid async handle: "+t);Ku[e]=null}}},el=tl,nl=Iu(t=>{return class extends t{static createProperties(t){const e=this.prototype;for(let n in t)n in e||e._createPropertyAccessor(n)}static attributeNameForProperty(t){return t.toLowerCase()}static typeForProperty(t){}_createPropertyAccessor(t,e){this._addPropertyToAttributeMap(t),this.hasOwnProperty(JSCompiler_renameProperty("__dataHasAccessor",this))||(this.__dataHasAccessor=Object.assign({},this.__dataHasAccessor)),this.__dataHasAccessor[t]||(this.__dataHasAccessor[t]=!0,this._definePropertyAccessor(t,e))}_addPropertyToAttributeMap(t){if(this.hasOwnProperty(JSCompiler_renameProperty("__dataAttributes",this))||(this.__dataAttributes=Object.assign({},this.__dataAttributes)),!this.__dataAttributes[t]){const e=this.constructor.attributeNameForProperty(t);this.__dataAttributes[e]=t}}_definePropertyAccessor(t,e){Object.defineProperty(this,t,{get(){return this._getProperty(t)},set:e?function(){}:function(e){this._setProperty(t,e)}})}constructor(){super(),this.__dataEnabled=!1,this.__dataReady=!1,this.__dataInvalid=!1,this.__data={},this.__dataPending=null,this.__dataOld=null,this.__dataInstanceProps=null,this.__serializing=!1,this._initializeProperties()}ready(){this.__dataReady=!0,this._flushProperties()}_initializeProperties(){for(let t in this.__dataHasAccessor)this.hasOwnProperty(t)&&(this.__dataInstanceProps=this.__dataInstanceProps||{},this.__dataInstanceProps[t]=this[t],delete this[t])}_initializeInstanceProperties(t){Object.assign(this,t)}_setProperty(t,e){this._setPendingProperty(t,e)&&this._invalidateProperties()}_getProperty(t){return this.__data[t]}_setPendingProperty(t,e,n){let r=this.__data[t],i=this._shouldPropertyChange(t,e,r);return i&&(this.__dataPending||(this.__dataPending={},this.__dataOld={}),!this.__dataOld||t in this.__dataOld||(this.__dataOld[t]=r),this.__data[t]=e,this.__dataPending[t]=e),i}_invalidateProperties(){!this.__dataInvalid&&this.__dataReady&&(this.__dataInvalid=!0,el.run(()=>{this.__dataInvalid&&(this.__dataInvalid=!1,this._flushProperties())}))}_enableProperties(){this.__dataEnabled||(this.__dataEnabled=!0,this.__dataInstanceProps&&(this._initializeInstanceProperties(this.__dataInstanceProps),this.__dataInstanceProps=null),this.ready())}_flushProperties(){const t=this.__data,e=this.__dataPending,n=this.__dataOld;this._shouldPropertiesChange(t,e,n)&&(this.__dataPending=null,this.__dataOld=null,this._propertiesChanged(t,e,n))}_shouldPropertiesChange(t,e,n){return Boolean(e)}_propertiesChanged(t,e,n){}_shouldPropertyChange(t,e,n){return n!==e&&(n==n||e==e)}attributeChangedCallback(t,e,n,r){e!==n&&this._attributeToProperty(t,n),super.attributeChangedCallback&&super.attributeChangedCallback(t,e,n,r)}_attributeToProperty(t,e,n){if(!this.__serializing){const r=this.__dataAttributes,i=r&&r[t]||t;this[i]=this._deserializeValue(e,n||this.constructor.typeForProperty(i))}}_propertyToAttribute(t,e,n){this.__serializing=!0,n=arguments.length<3?this[t]:n,this._valueToNodeAttribute(this,n,e||this.constructor.attributeNameForProperty(t)),this.__serializing=!1}_valueToNodeAttribute(t,e,n){const r=this._serializeValue(e);"class"!==n&&"name"!==n&&"slot"!==n||(t=Ru(t)),void 0===r?t.removeAttribute(n):t.setAttribute(n,r)}_serializeValue(t){switch(typeof t){case"boolean":return t?"":void 0;default:return null!=t?t.toString():void 0}}_deserializeValue(t,e){switch(e){case Boolean:return null!==t;case Number:return Number(t);default:return t}}}}),rl={};let il=HTMLElement.prototype;for(;il;){let t=Object.getOwnPropertyNames(il);for(let e=0;e<t.length;e++)rl[t[e]]=!0;il=Object.getPrototypeOf(il)}const ol=Iu(t=>{const e=nl(t);return class extends e{static createPropertiesForAttributes(){let t=this.observedAttributes;for(let e=0;e<t.length;e++)this.prototype._createPropertyAccessor(qu(t[e]))}static attributeNameForProperty(t){return Hu(t)}_initializeProperties(){this.__dataProto&&(this._initializeProtoProperties(this.__dataProto),this.__dataProto=null),super._initializeProperties()}_initializeProtoProperties(t){for(let e in t)this._setProperty(e,t[e])}_ensureAttribute(t,e){const n=this;n.hasAttribute(t)||this._valueToNodeAttribute(n,e,t)}_serializeValue(t){switch(typeof t){case"object":if(t instanceof Date)return t.toString();if(t)try{return JSON.stringify(t)}catch(t){return""}default:return super._serializeValue(t)}}_deserializeValue(t,e){let n;switch(e){case Object:try{n=JSON.parse(t)}catch(e){n=t}break;case Array:try{n=JSON.parse(t)}catch(e){n=null,console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${t}`)}break;case Date:n=isNaN(t)?String(t):Number(t),n=new Date(n);break;default:n=super._deserializeValue(t,e)}return n}_definePropertyAccessor(t,e){!function(t,e){if(!rl[e]){let n=t[e];void 0!==n&&(t.__data?t._setPendingProperty(e,n):(t.__dataProto?t.hasOwnProperty(JSCompiler_renameProperty("__dataProto",t))||(t.__dataProto=Object.create(t.__dataProto)):t.__dataProto={},t.__dataProto[e]=n))}}(this,t),super._definePropertyAccessor(t,e)}_hasAccessor(t){return this.__dataHasAccessor&&this.__dataHasAccessor[t]}_isPropertyPending(t){return Boolean(this.__dataPending&&t in this.__dataPending)}}}),sl={"dom-if":!0,"dom-repeat":!0};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/let al=!1,ul=!1;function ll(t){(function(){if(!al){al=!0;const t=document.createElement("textarea");t.placeholder="a",ul=t.placeholder===t.textContent}return ul})()&&"textarea"===t.localName&&t.placeholder&&t.placeholder===t.textContent&&(t.textContent=null)}function cl(t){let e=t.getAttribute("is");if(e&&sl[e]){let n=t;for(n.removeAttribute("is"),t=n.ownerDocument.createElement(e),n.parentNode.replaceChild(t,n),t.appendChild(n);n.attributes.length;)t.setAttribute(n.attributes[0].name,n.attributes[0].value),n.removeAttribute(n.attributes[0].name)}return t}function hl(t,e){let n=e.parentInfo&&hl(t,e.parentInfo);if(!n)return t;for(let t=n.firstChild,r=0;t;t=t.nextSibling)if(e.parentIndex===r++)return t}function fl(t,e,n,r){r.id&&(e[r.id]=n)}function dl(t,e,n){if(n.events&&n.events.length)for(let r,i=0,o=n.events;i<o.length&&(r=o[i]);i++)t._addMethodEventListenerToNode(e,r.name,r.value,t)}function pl(t,e,n){n.templateInfo&&(e._templateInfo=n.templateInfo)}const _l=Iu(t=>{return class extends t{static _parseTemplate(t,e){if(!t._templateInfo){let n=t._templateInfo={};n.nodeInfoList=[],n.stripWhiteSpace=e&&e.stripWhiteSpace||t.hasAttribute("strip-whitespace"),this._parseTemplateContent(t,n,{parent:null})}return t._templateInfo}static _parseTemplateContent(t,e,n){return this._parseTemplateNode(t.content,e,n)}static _parseTemplateNode(t,e,n){let r=!1,i=t;return"template"!=i.localName||i.hasAttribute("preserve-content")?"slot"===i.localName&&(e.hasInsertionPoint=!0):r=this._parseTemplateNestedTemplate(i,e,n)||r,ll(i),i.firstChild&&this._parseTemplateChildNodes(i,e,n),i.hasAttributes&&i.hasAttributes()&&(r=this._parseTemplateNodeAttributes(i,e,n)||r),r}static _parseTemplateChildNodes(t,e,n){if("script"!==t.localName&&"style"!==t.localName)for(let r,i=t.firstChild,o=0;i;i=r){if("template"==i.localName&&(i=cl(i)),r=i.nextSibling,i.nodeType===Node.TEXT_NODE){let n=r;for(;n&&n.nodeType===Node.TEXT_NODE;)i.textContent+=n.textContent,r=n.nextSibling,t.removeChild(n),n=r;if(e.stripWhiteSpace&&!i.textContent.trim()){t.removeChild(i);continue}}let s={parentIndex:o,parentInfo:n};this._parseTemplateNode(i,e,s)&&(s.infoIndex=e.nodeInfoList.push(s)-1),i.parentNode&&o++}}static _parseTemplateNestedTemplate(t,e,n){let r=t,i=this._parseTemplate(r,e);return(i.content=r.content.ownerDocument.createDocumentFragment()).appendChild(r.content),n.templateInfo=i,!0}static _parseTemplateNodeAttributes(t,e,n){let r=!1,i=Array.from(t.attributes);for(let o,s=i.length-1;o=i[s];s--)r=this._parseTemplateNodeAttribute(t,e,n,o.name,o.value)||r;return r}static _parseTemplateNodeAttribute(t,e,n,r,i){return"on-"===r.slice(0,3)?(t.removeAttribute(r),n.events=n.events||[],n.events.push({name:r.slice(3),value:i}),!0):"id"===r&&(n.id=i,!0)}static _contentForTemplate(t){let e=t._templateInfo;return e&&e.content||t.content}_stampTemplate(t){t&&!t.content&&window.HTMLTemplateElement&&HTMLTemplateElement.decorate&&HTMLTemplateElement.decorate(t);let e=this.constructor._parseTemplate(t),n=e.nodeInfoList,r=e.content||t.content,i=document.importNode(r,!0);i.__noInsertionPoint=!e.hasInsertionPoint;let o=i.nodeList=new Array(n.length);i.$={};for(let t,e=0,r=n.length;e<r&&(t=n[e]);e++){let n=o[e]=hl(i,t);fl(0,i.$,n,t),pl(0,n,t),dl(this,n,t)}return i=i}_addMethodEventListenerToNode(t,e,n,r){let i=function(t,e,n){return t=t._methodHost||t,function(e){t[n]?t[n](e,e.detail):console.warn("listener method `"+n+"` not defined")}}(r=r||t,0,n);return this._addEventListenerToNode(t,e,i),i}_addEventListenerToNode(t,e,n){t.addEventListener(e,n)}_removeEventListenerFromNode(t,e,n){t.removeEventListener(e,n)}}});
/**
 * @fileoverview
 * @suppress {checkPrototypalTypes}
 * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt The complete set of authors may be found
 * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
 * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
 * Google as part of the polymer project is also subject to an additional IP
 * rights grant found at http://polymer.github.io/PATENTS.txt
 */let yl=0;const ml={COMPUTE:"__computeEffects",REFLECT:"__reflectEffects",NOTIFY:"__notifyEffects",PROPAGATE:"__propagateEffects",OBSERVE:"__observeEffects",READ_ONLY:"__readOnly"},gl=/[A-Z]/;function vl(t,e){let n=t[e];if(n){if(!t.hasOwnProperty(e)){n=t[e]=Object.create(t[e]);for(let t in n){let e=n[t],r=n[t]=Array(e.length);for(let t=0;t<e.length;t++)r[t]=e[t]}}}else n=t[e]={};return n}function bl(t,e,n,r,i,o){if(e){let s=!1,a=yl++;for(let u in n)wl(t,e,a,u,n,r,i,o)&&(s=!0);return s}return!1}function wl(t,e,n,r,i,o,s,a){let u=!1,l=e[s?Du(r):r];if(l)for(let e,c=0,h=l.length;c<h&&(e=l[c]);c++)e.info&&e.info.lastRun===n||s&&!El(r,e.trigger)||(e.info&&(e.info.lastRun=n),e.fn(t,r,i,o,e.info,s,a),u=!0);return u}function El(t,e){if(e){let n=e.name;return n==t||!(!e.structured||!Mu(n,t))||!(!e.wildcard||!Uu(n,t))}return!0}function Sl(t,e,n,r,i){let o="string"==typeof i.method?t[i.method]:i.method,s=i.property;o?o.call(t,t.__data[s],r[s]):i.dynamicFn||console.warn("observer method `"+i.method+"` not defined")}function Al(t,e,n){let r=Du(e);if(r!==e){return Nl(t,Hu(r)+"-changed",n[e],e),!0}return!1}function Nl(t,e,n,r){let i={value:n,queueProperty:!0};r&&(i.path=r),Ru(t).dispatchEvent(new CustomEvent(e,{detail:i}))}function Tl(t,e,n,r,i,o){let s=(o?Du(e):e)!=e?e:null,a=s?ju(t,s):t.__data[e];s&&void 0===a&&(a=n[e]),Nl(t,i.eventName,a,s)}function Ol(t,e,n,r,i){let o=t.__data[e];Ga&&(o=Ga(o,i.attrName,"attribute",t)),t._propertyToAttribute(e,i.attrName,o)}function Pl(t,e,n,r,i){let o=Ml(t,e,n,r,i),s=i.methodInfo;t.__dataHasAccessor&&t.__dataHasAccessor[s]?t._setPendingProperty(s,o,!0):t[s]=o}function Cl(t,e,n,r,i,o,s){n.bindings=n.bindings||[];let a={kind:r,target:i,parts:o,literal:s,isCompound:1!==o.length};if(n.bindings.push(a),function(t){return Boolean(t.target)&&"attribute"!=t.kind&&"text"!=t.kind&&!t.isCompound&&"{"===t.parts[0].mode}(a)){let{event:t,negate:e}=a.parts[0];a.listenerEvent=t||Hu(i)+"-changed",a.listenerNegate=e}let u=e.nodeInfoList.length;for(let n=0;n<a.parts.length;n++){let r=a.parts[n];r.compoundIndex=n,xl(t,e,a,r,u)}}function xl(t,e,n,r,i){if(!r.literal)if("attribute"===n.kind&&"-"===n.target[0])console.warn("Cannot set attribute "+n.target+' because "-" is not a valid attribute starting character');else{let o=r.dependencies,s={index:i,binding:n,part:r,evaluator:t};for(let n=0;n<o.length;n++){let r=o[n];"string"==typeof r&&((r=jl(r)).wildcard=!0),t._addTemplatePropertyEffect(e,r.rootProperty,{fn:Il,info:s,trigger:r})}}}function Il(t,e,n,r,i,o,s){let a=s[i.index],u=i.binding,l=i.part;if(o&&l.source&&e.length>l.source.length&&"property"==u.kind&&!u.isCompound&&a.__isPropertyEffectsClient&&a.__dataHasAccessor&&a.__dataHasAccessor[u.target]){let r=n[e];e=ku(l.source,u.target,e),a._setPendingPropertyOrPath(e,r,!1,!0)&&t._enqueueClient(a)}else{!function(t,e,n,r,i){i=function(t,e,n,r){if(n.isCompound){let i=t.__dataCompoundStorage[n.target];i[r.compoundIndex]=e,e=i.join("")}return"attribute"!==n.kind&&("textContent"!==n.target&&("value"!==n.target||"input"!==t.localName&&"textarea"!==t.localName)||(e=void 0==e?"":e)),e}(e,i,n,r),Ga&&(i=Ga(i,n.target,n.kind,e));if("attribute"==n.kind)t._valueToNodeAttribute(e,i,n.target);else{let r=n.target;e.__isPropertyEffectsClient&&e.__dataHasAccessor&&e.__dataHasAccessor[r]?e[ml.READ_ONLY]&&e[ml.READ_ONLY][r]||e._setPendingProperty(r,i)&&t._enqueueClient(e):t._setUnmanagedPropertyToNode(e,r,i)}}(t,a,u,l,i.evaluator._evaluateBinding(t,l,e,n,r,o))}}function Rl(t,e){if(e.isCompound){let n=t.__dataCompoundStorage||(t.__dataCompoundStorage={}),r=e.parts,i=new Array(r.length);for(let t=0;t<r.length;t++)i[t]=r[t].literal;let o=e.target;n[o]=i,e.literal&&"property"==e.kind&&("className"===o&&(t=Ru(t)),t[o]=e.literal)}}function Bl(t,e,n){if(n.listenerEvent){let r=n.parts[0];t.addEventListener(n.listenerEvent,function(t){!function(t,e,n,r,i){let o,s=t.detail,a=s&&s.path;a?(r=ku(n,r,a),o=s&&s.value):o=t.currentTarget[n],o=i?!o:o,e[ml.READ_ONLY]&&e[ml.READ_ONLY][r]||!e._setPendingPropertyOrPath(r,o,!0,Boolean(a))||s&&s.queueProperty||e._invalidateProperties()}(t,e,n.target,r.source,r.negate)})}}function Dl(t,e,n,r,i,o){o=e.static||o&&("object"!=typeof o||o[e.methodName]);let s={methodName:e.methodName,args:e.args,methodInfo:i,dynamicFn:o};for(let i,o=0;o<e.args.length&&(i=e.args[o]);o++)i.literal||t._addPropertyEffect(i.rootProperty,n,{fn:r,info:s,trigger:i});o&&t._addPropertyEffect(e.methodName,n,{fn:r,info:s})}function Ml(t,e,n,r,i){let o=t._methodHost||t,s=o[i.methodName];if(s){let r=t._marshalArgs(i.args,e,n);return s.apply(o,r)}i.dynamicFn||console.warn("method `"+i.methodName+"` not defined")}const Ul=[],kl=new RegExp("(\\[\\[|{{)\\s*(?:(!)\\s*)?((?:[a-zA-Z_$][\\w.:$\\-*]*)\\s*(?:\\(\\s*(?:(?:(?:((?:[a-zA-Z_$][\\w.:$\\-*]*)|(?:[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\\\]|\\\\.)*')|(?:\"(?:[^\"\\\\]|\\\\.)*\")))\\s*)(?:,\\s*(?:((?:[a-zA-Z_$][\\w.:$\\-*]*)|(?:[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|(?:(?:'(?:[^'\\\\]|\\\\.)*')|(?:\"(?:[^\"\\\\]|\\\\.)*\")))\\s*))*)?)\\)\\s*)?)(?:]]|}})","g");function Ll(t){let e="";for(let n=0;n<t.length;n++){e+=t[n].literal||""}return e}function Fl(t){let e=t.match(/([^\s]+?)\(([\s\S]*)\)/);if(e){let t={methodName:e[1],static:!0,args:Ul};if(e[2].trim()){return function(t,e){return e.args=t.map(function(t){let n=jl(t);return n.literal||(e.static=!1),n},this),e}(e[2].replace(/\\,/g,"&comma;").split(","),t)}return t}return null}function jl(t){let e=t.trim().replace(/&comma;/g,",").replace(/\\(.)/g,"$1"),n={name:e,value:"",literal:!1},r=e[0];switch("-"===r&&(r=e[1]),r>="0"&&r<="9"&&(r="#"),r){case"'":case'"':n.value=e.slice(1,-1),n.literal=!0;break;case"#":n.value=Number(e),n.literal=!0}return n.literal||(n.rootProperty=Du(e),n.structured=Bu(e),n.structured&&(n.wildcard=".*"==e.slice(-2),n.wildcard&&(n.name=e.slice(0,-2)))),n}function $l(t,e,n){let r=ju(t,n);return void 0===r&&(r=e[n]),r}function zl(t,e,n,r){t.notifyPath(n+".splices",{indexSplices:r}),t.notifyPath(n+".length",e.length)}function Yl(t,e,n,r,i,o){zl(t,e,n,[{index:r,addedCount:i,removed:o,object:e,type:"splice"}])}const Vl=Iu(t=>{const e=_l(ol(t));return class extends e{constructor(){super(),this.__isPropertyEffectsClient=!0,this.__dataCounter=0,this.__dataClientsReady,this.__dataPendingClients,this.__dataToNotify,this.__dataLinkedPaths,this.__dataHasPaths,this.__dataCompoundStorage,this.__dataHost,this.__dataTemp,this.__dataClientsInitialized,this.__data,this.__dataPending,this.__dataOld,this.__computeEffects,this.__reflectEffects,this.__notifyEffects,this.__propagateEffects,this.__observeEffects,this.__readOnly,this.__templateInfo}get PROPERTY_EFFECT_TYPES(){return ml}_initializeProperties(){super._initializeProperties(),ql.registerHost(this),this.__dataClientsReady=!1,this.__dataPendingClients=null,this.__dataToNotify=null,this.__dataLinkedPaths=null,this.__dataHasPaths=!1,this.__dataCompoundStorage=this.__dataCompoundStorage||null,this.__dataHost=this.__dataHost||null,this.__dataTemp={},this.__dataClientsInitialized=!1}_initializeProtoProperties(t){this.__data=Object.create(t),this.__dataPending=Object.create(t),this.__dataOld={}}_initializeInstanceProperties(t){let e=this[ml.READ_ONLY];for(let n in t)e&&e[n]||(this.__dataPending=this.__dataPending||{},this.__dataOld=this.__dataOld||{},this.__data[n]=this.__dataPending[n]=t[n])}_addPropertyEffect(t,e,n){this._createPropertyAccessor(t,e==ml.READ_ONLY);let r=vl(this,e)[t];r||(r=this[e][t]=[]),r.push(n)}_removePropertyEffect(t,e,n){let r=vl(this,e)[t],i=r.indexOf(n);i>=0&&r.splice(i,1)}_hasPropertyEffect(t,e){let n=this[e];return Boolean(n&&n[t])}_hasReadOnlyEffect(t){return this._hasPropertyEffect(t,ml.READ_ONLY)}_hasNotifyEffect(t){return this._hasPropertyEffect(t,ml.NOTIFY)}_hasReflectEffect(t){return this._hasPropertyEffect(t,ml.REFLECT)}_hasComputedEffect(t){return this._hasPropertyEffect(t,ml.COMPUTE)}_setPendingPropertyOrPath(t,e,n,r){if(r||Du(Array.isArray(t)?t[0]:t)!==t){if(!r){let n=ju(this,t);if(!(t=$u(this,t,e))||!super._shouldPropertyChange(t,e,n))return!1}if(this.__dataHasPaths=!0,this._setPendingProperty(t,e,n))return function(t,e,n){let r=t.__dataLinkedPaths;if(r){let i;for(let o in r){let s=r[o];Uu(o,e)?(i=ku(o,s,e),t._setPendingPropertyOrPath(i,n,!0,!0)):Uu(s,e)&&(i=ku(s,o,e),t._setPendingPropertyOrPath(i,n,!0,!0))}}}(this,t,e),!0}else{if(this.__dataHasAccessor&&this.__dataHasAccessor[t])return this._setPendingProperty(t,e,n);this[t]=e}return!1}_setUnmanagedPropertyToNode(t,e,n){n===t[e]&&"object"!=typeof n||("className"===e&&(t=Ru(t)),t[e]=n)}_setPendingProperty(t,e,n){let r=this.__dataHasPaths&&Bu(t),i=r?this.__dataTemp:this.__data;return!!this._shouldPropertyChange(t,e,i[t])&&(this.__dataPending||(this.__dataPending={},this.__dataOld={}),t in this.__dataOld||(this.__dataOld[t]=this.__data[t]),r?this.__dataTemp[t]=e:this.__data[t]=e,this.__dataPending[t]=e,(r||this[ml.NOTIFY]&&this[ml.NOTIFY][t])&&(this.__dataToNotify=this.__dataToNotify||{},this.__dataToNotify[t]=n),!0)}_setProperty(t,e){this._setPendingProperty(t,e,!0)&&this._invalidateProperties()}_invalidateProperties(){this.__dataReady&&this._flushProperties()}_enqueueClient(t){this.__dataPendingClients=this.__dataPendingClients||[],t!==this&&this.__dataPendingClients.push(t)}_flushProperties(){this.__dataCounter++,super._flushProperties(),this.__dataCounter--}_flushClients(){this.__dataClientsReady?this.__enableOrFlushClients():(this.__dataClientsReady=!0,this._readyClients(),this.__dataReady=!0)}__enableOrFlushClients(){let t=this.__dataPendingClients;if(t){this.__dataPendingClients=null;for(let e=0;e<t.length;e++){let n=t[e];n.__dataEnabled?n.__dataPending&&n._flushProperties():n._enableProperties()}}}_readyClients(){this.__enableOrFlushClients()}setProperties(t,e){for(let n in t)!e&&this[ml.READ_ONLY]&&this[ml.READ_ONLY][n]||this._setPendingPropertyOrPath(n,t[n],!0);this._invalidateProperties()}ready(){this._flushProperties(),this.__dataClientsReady||this._flushClients(),this.__dataPending&&this._flushProperties()}_propertiesChanged(t,e,n){let r=this.__dataHasPaths;this.__dataHasPaths=!1,function(t,e,n,r){let i=t[ml.COMPUTE];if(i){let o=e;for(;bl(t,i,o,n,r);)Object.assign(n,t.__dataOld),Object.assign(e,t.__dataPending),o=t.__dataPending,t.__dataPending=null}}(this,e,n,r);let i=this.__dataToNotify;this.__dataToNotify=null,this._propagatePropertyChanges(e,n,r),this._flushClients(),bl(this,this[ml.REFLECT],e,n,r),bl(this,this[ml.OBSERVE],e,n,r),i&&function(t,e,n,r,i){let o,s,a=t[ml.NOTIFY],u=yl++;for(let s in e)e[s]&&(a&&wl(t,a,u,s,n,r,i)?o=!0:i&&Al(t,s,n)&&(o=!0));o&&(s=t.__dataHost)&&s._invalidateProperties&&s._invalidateProperties()}(this,i,e,n,r),1==this.__dataCounter&&(this.__dataTemp={})}_propagatePropertyChanges(t,e,n){this[ml.PROPAGATE]&&bl(this,this[ml.PROPAGATE],t,e,n);let r=this.__templateInfo;for(;r;)bl(this,r.propertyEffects,t,e,n,r.nodeList),r=r.nextTemplateInfo}linkPaths(t,e){t=Lu(t),e=Lu(e),this.__dataLinkedPaths=this.__dataLinkedPaths||{},this.__dataLinkedPaths[t]=e}unlinkPaths(t){t=Lu(t),this.__dataLinkedPaths&&delete this.__dataLinkedPaths[t]}notifySplices(t,e){let n={path:""};zl(this,ju(this,t,n),n.path,e)}get(t,e){return ju(e||this,t)}set(t,e,n){n?$u(n,t,e):this[ml.READ_ONLY]&&this[ml.READ_ONLY][t]||this._setPendingPropertyOrPath(t,e,!0)&&this._invalidateProperties()}push(t,...e){let n={path:""},r=ju(this,t,n),i=r.length,o=r.push(...e);return e.length&&Yl(this,r,n.path,i,e.length,[]),o}pop(t){let e={path:""},n=ju(this,t,e),r=Boolean(n.length),i=n.pop();return r&&Yl(this,n,e.path,n.length,0,[i]),i}splice(t,e,n,...r){let i,o={path:""},s=ju(this,t,o);return e<0?e=s.length-Math.floor(-e):e&&(e=Math.floor(e)),i=2===arguments.length?s.splice(e):s.splice(e,n,...r),(r.length||i.length)&&Yl(this,s,o.path,e,r.length,i),i}shift(t){let e={path:""},n=ju(this,t,e),r=Boolean(n.length),i=n.shift();return r&&Yl(this,n,e.path,0,0,[i]),i}unshift(t,...e){let n={path:""},r=ju(this,t,n),i=r.unshift(...e);return e.length&&Yl(this,r,n.path,0,e.length,[]),i}notifyPath(t,e){let n;if(1==arguments.length){let r={path:""};e=ju(this,t,r),n=r.path}else n=Array.isArray(t)?Lu(t):t;this._setPendingPropertyOrPath(n,e,!0,!0)&&this._invalidateProperties()}_createReadOnlyProperty(t,e){this._addPropertyEffect(t,ml.READ_ONLY),e&&(this["_set"+function(t){return t[0].toUpperCase()+t.substring(1)}(t)]=function(e){this._setProperty(t,e)})}_createPropertyObserver(t,e,n){let r={property:t,method:e,dynamicFn:Boolean(n)};this._addPropertyEffect(t,ml.OBSERVE,{fn:Sl,info:r,trigger:{name:t}}),n&&this._addPropertyEffect(e,ml.OBSERVE,{fn:Sl,info:r,trigger:{name:e}})}_createMethodObserver(t,e){let n=Fl(t);if(!n)throw new Error("Malformed observer expression '"+t+"'");Dl(this,n,ml.OBSERVE,Ml,null,e)}_createNotifyingProperty(t){this._addPropertyEffect(t,ml.NOTIFY,{fn:Tl,info:{eventName:Hu(t)+"-changed",property:t}})}_createReflectedProperty(t){let e=this.constructor.attributeNameForProperty(t);"-"===e[0]?console.warn("Property "+t+" cannot be reflected to attribute "+e+' because "-" is not a valid starting attribute name. Use a lowercase first letter for the property instead.'):this._addPropertyEffect(t,ml.REFLECT,{fn:Ol,info:{attrName:e}})}_createComputedProperty(t,e,n){let r=Fl(e);if(!r)throw new Error("Malformed computed expression '"+e+"'");Dl(this,r,ml.COMPUTE,Pl,t,n)}_marshalArgs(t,e,n){const r=this.__data,i=[];for(let o=0,s=t.length;o<s;o++){let{name:s,structured:a,wildcard:u,value:l,literal:c}=t[o];if(!c)if(u){const t=Uu(s,e),i=$l(r,n,t?e:s);l={path:t?e:s,value:i,base:t?ju(r,s):i}}else l=a?$l(r,n,s):r[s];i[o]=l}return i}static addPropertyEffect(t,e,n){this.prototype._addPropertyEffect(t,e,n)}static createPropertyObserver(t,e,n){this.prototype._createPropertyObserver(t,e,n)}static createMethodObserver(t,e){this.prototype._createMethodObserver(t,e)}static createNotifyingProperty(t){this.prototype._createNotifyingProperty(t)}static createReadOnlyProperty(t,e){this.prototype._createReadOnlyProperty(t,e)}static createReflectedProperty(t){this.prototype._createReflectedProperty(t)}static createComputedProperty(t,e,n){this.prototype._createComputedProperty(t,e,n)}static bindTemplate(t){return this.prototype._bindTemplate(t)}_bindTemplate(t,e){let n=this.constructor._parseTemplate(t),r=this.__templateInfo==n;if(!r)for(let t in n.propertyEffects)this._createPropertyAccessor(t);if(e&&((n=Object.create(n)).wasPreBound=r,!r&&this.__templateInfo)){let t=this.__templateInfoLast||this.__templateInfo;return this.__templateInfoLast=t.nextTemplateInfo=n,n.previousTemplateInfo=t,n}return this.__templateInfo=n}static _addTemplatePropertyEffect(t,e,n){(t.hostProps=t.hostProps||{})[e]=!0;let r=t.propertyEffects=t.propertyEffects||{};(r[e]=r[e]||[]).push(n)}_stampTemplate(t){ql.beginHosting(this);let e=super._stampTemplate(t);ql.endHosting(this);let n=this._bindTemplate(t,!0);if(n.nodeList=e.nodeList,!n.wasPreBound){let t=n.childNodes=[];for(let n=e.firstChild;n;n=n.nextSibling)t.push(n)}return e.templateInfo=n,function(t,e){let{nodeList:n,nodeInfoList:r}=e;if(r.length)for(let e=0;e<r.length;e++){let i=r[e],o=n[e],s=i.bindings;if(s)for(let e=0;e<s.length;e++){let n=s[e];Rl(o,n),Bl(o,t,n)}o.__dataHost=t}}(this,n),this.__dataReady&&bl(this,n.propertyEffects,this.__data,null,!1,n.nodeList),e}_removeBoundDom(t){let e=t.templateInfo;e.previousTemplateInfo&&(e.previousTemplateInfo.nextTemplateInfo=e.nextTemplateInfo),e.nextTemplateInfo&&(e.nextTemplateInfo.previousTemplateInfo=e.previousTemplateInfo),this.__templateInfoLast==e&&(this.__templateInfoLast=e.previousTemplateInfo),e.previousTemplateInfo=e.nextTemplateInfo=null;let n=e.childNodes;for(let t=0;t<n.length;t++){let e=n[t];e.parentNode.removeChild(e)}}static _parseTemplateNode(t,n,r){let i=e._parseTemplateNode.call(this,t,n,r);if(t.nodeType===Node.TEXT_NODE){let e=this._parseBindings(t.textContent,n);e&&(t.textContent=Ll(e)||" ",Cl(this,n,r,"text","textContent",e),i=!0)}return i}static _parseTemplateNodeAttribute(t,n,r,i,o){let s=this._parseBindings(o,n);if(s){let e=i,o="property";gl.test(i)?o="attribute":"$"==i[i.length-1]&&(i=i.slice(0,-1),o="attribute");let a=Ll(s);return a&&"attribute"==o&&("class"==i&&t.hasAttribute("class")&&(a+=" "+t.getAttribute(i)),t.setAttribute(i,a)),"input"===t.localName&&"value"===e&&t.setAttribute(e,""),t.removeAttribute(e),"property"===o&&(i=qu(i)),Cl(this,n,r,o,i,s,a),!0}return e._parseTemplateNodeAttribute.call(this,t,n,r,i,o)}static _parseTemplateNestedTemplate(t,n,r){let i=e._parseTemplateNestedTemplate.call(this,t,n,r),o=r.templateInfo.hostProps;for(let t in o)Cl(this,n,r,"property","_host_"+t,[{mode:"{",source:t,dependencies:[t]}]);return i}static _parseBindings(t,e){let n,r=[],i=0;for(;null!==(n=kl.exec(t));){n.index>i&&r.push({literal:t.slice(i,n.index)});let o=n[1][0],s=Boolean(n[2]),a=n[3].trim(),u=!1,l="",c=-1;"{"==o&&(c=a.indexOf("::"))>0&&(l=a.substring(c+2),a=a.substring(0,c),u=!0);let h=Fl(a),f=[];if(h){let{args:t,methodName:n}=h;for(let e=0;e<t.length;e++){let n=t[e];n.literal||f.push(n)}let r=e.dynamicFns;(r&&r[n]||h.static)&&(f.push(n),h.dynamicFn=!0)}else f.push(a);r.push({source:a,mode:o,negate:s,customEvent:u,signature:h,dependencies:f,event:l}),i=kl.lastIndex}if(i&&i<t.length){let e=t.substring(i);e&&r.push({literal:e})}return r.length?r:null}static _evaluateBinding(t,e,n,r,i,o){let s;return s=e.signature?Ml(t,n,r,0,e.signature):n!=e.source?ju(t,e.source):o&&Bu(n)?ju(t,n):t.__data[n],e.negate&&(s=!s),s}}});const ql=new class{constructor(){this.stack=[]}registerHost(t){this.stack.length&&this.stack[this.stack.length-1]._enqueueClient(t)}beginHosting(t){this.stack.push(t)}endHosting(t){let e=this.stack.length;e&&this.stack[e-1]==t&&this.stack.pop()}};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Hl=[];const Wl=Iu(t=>{const e=nl(t);function n(t){const e=Object.getPrototypeOf(t);return e.prototype instanceof i?e:null}function r(t){if(!t.hasOwnProperty(JSCompiler_renameProperty("__ownProperties",t))){let e=null;if(t.hasOwnProperty(JSCompiler_renameProperty("properties",t))){const n=t.properties;n&&(e=
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
function(t){const e={};for(let n in t){const r=t[n];e[n]="function"==typeof r?{type:r}:r}return e}(n))}t.__ownProperties=e}return t.__ownProperties}class i extends e{static get observedAttributes(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__observedAttributes",this))){!function(t){Hl.push(t)}(this.prototype);const t=this._properties;this.__observedAttributes=t?Object.keys(t).map(t=>this.attributeNameForProperty(t)):[]}return this.__observedAttributes}static finalize(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__finalized",this))){const t=n(this);t&&t.finalize(),this.__finalized=!0,this._finalizeClass()}}static _finalizeClass(){const t=r(this);t&&this.createProperties(t)}static get _properties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__properties",this))){const t=n(this);this.__properties=Object.assign({},t&&t._properties,r(this))}return this.__properties}static typeForProperty(t){const e=this._properties[t];return e&&e.type}_initializeProperties(){0,this.constructor.finalize(),super._initializeProperties()}connectedCallback(){super.connectedCallback&&super.connectedCallback(),this._enableProperties()}disconnectedCallback(){super.disconnectedCallback&&super.disconnectedCallback()}}return i}),Jl="3.3.1",Kl=window.ShadyCSS&&window.ShadyCSS.cssBuild,Gl=Iu(t=>{const e=Wl(Vl(t));function n(t,e,n,r){n.computed&&(n.readOnly=!0),n.computed&&(t._hasReadOnlyEffect(e)?console.warn(`Cannot redefine computed property '${e}'.`):t._createComputedProperty(e,n.computed,r)),n.readOnly&&!t._hasReadOnlyEffect(e)?t._createReadOnlyProperty(e,!n.computed):!1===n.readOnly&&t._hasReadOnlyEffect(e)&&console.warn(`Cannot make readOnly property '${e}' non-readOnly.`),n.reflectToAttribute&&!t._hasReflectEffect(e)?t._createReflectedProperty(e):!1===n.reflectToAttribute&&t._hasReflectEffect(e)&&console.warn(`Cannot make reflected property '${e}' non-reflected.`),n.notify&&!t._hasNotifyEffect(e)?t._createNotifyingProperty(e):!1===n.notify&&t._hasNotifyEffect(e)&&console.warn(`Cannot make notify property '${e}' non-notify.`),n.observer&&t._createPropertyObserver(e,n.observer,r[n.observer]),t._addPropertyToAttributeMap(e)}function r(t,e,n,r){if(!Kl){const i=e.content.querySelectorAll("style"),o=_u(e),s=function(t){let e=hu(t);return e?yu(e):[]}(n),a=e.content.firstElementChild;for(let n=0;n<s.length;n++){let i=s[n];i.textContent=t._processStyleText(i.textContent,r),e.content.insertBefore(i,a)}let u=0;for(let e=0;e<o.length;e++){let n=o[e],s=i[u];s!==n?(n=n.cloneNode(!0),s.parentNode.insertBefore(n,s)):u++,n.textContent=t._processStyleText(n.textContent,r)}}window.ShadyCSS&&window.ShadyCSS.prepareTemplate(e,n)}return class extends e{static get polymerElementVersion(){return Jl}static _finalizeClass(){e._finalizeClass.call(this);const t=function(t){return t.hasOwnProperty(JSCompiler_renameProperty("__ownObservers",t))||(t.__ownObservers=t.hasOwnProperty(JSCompiler_renameProperty("observers",t))?t.observers:null),t.__ownObservers}(this);t&&this.createObservers(t,this._properties),this._prepareTemplate()}static _prepareTemplate(){let t=this.template;t&&("string"==typeof t?(console.error("template getter must return HTMLTemplateElement"),t=null):tu||(t=t.cloneNode(!0))),this.prototype._template=t}static createProperties(t){for(let e in t)n(this.prototype,e,t[e],t)}static createObservers(t,e){const n=this.prototype;for(let r=0;r<t.length;r++)n._createMethodObserver(t[r],e)}static get template(){return this.hasOwnProperty(JSCompiler_renameProperty("_template",this))||(this._template=this.prototype.hasOwnProperty(JSCompiler_renameProperty("_template",this.prototype))?this.prototype._template:function(t){let e=null;if(t&&(!Za||Qa)&&(e=au.import(t,"template"),Za&&!e))throw new Error(`strictTemplatePolicy: expecting dom-module or null template for ${t}`);return e}(this.is)||Object.getPrototypeOf(this.prototype).constructor.template),this._template}static set template(t){this._template=t}static get importPath(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_importPath",this))){const t=this.importMeta;if(t)this._importPath=Wa(t.url);else{const t=au.import(this.is);this._importPath=t&&t.assetpath||Object.getPrototypeOf(this.prototype).constructor.importPath}}return this._importPath}constructor(){super(),this._template,this._importPath,this.rootPath,this.importPath,this.root,this.$}_initializeProperties(){this.constructor.finalize(),this.constructor._finalizeTemplate(this.localName),super._initializeProperties(),this.rootPath=Ka,this.importPath=this.constructor.importPath;let t=function(t){if(!t.hasOwnProperty(JSCompiler_renameProperty("__propertyDefaults",t))){t.__propertyDefaults=null;let e=t._properties;for(let n in e){let r=e[n];"value"in r&&(t.__propertyDefaults=t.__propertyDefaults||{},t.__propertyDefaults[n]=r)}}return t.__propertyDefaults}(this.constructor);if(t)for(let e in t){let n=t[e];if(!this.hasOwnProperty(e)){let t="function"==typeof n.value?n.value.call(this):n.value;this._hasAccessor(e)?this._setPendingProperty(e,t,!0):this[e]=t}}}static _processStyleText(t,e){return Ha(t,e)}static _finalizeTemplate(t){const e=this.prototype._template;if(e&&!e.__polymerFinalized){e.__polymerFinalized=!0;const n=this.importPath;r(this,e,t,n?qa(n):""),this.prototype._bindTemplate(e)}}connectedCallback(){window.ShadyCSS&&this._template&&window.ShadyCSS.styleElement(this),super.connectedCallback()}ready(){this._template&&(this.root=this._stampTemplate(this._template),this.$=this.root.$),super.ready()}_readyClients(){this._template&&(this.root=this._attachDom(this.root)),super._readyClients()}_attachDom(t){const e=Ru(this);if(e.attachShadow)return t?(e.shadowRoot||(e.attachShadow({mode:"open",shadyUpgradeFragment:t}),e.shadowRoot.appendChild(t)),eu&&window.ShadyDOM&&window.ShadyDOM.flushInitial(e.shadowRoot),e.shadowRoot):null;throw new Error("ShadowDOM not available. PolymerElement can create dom as children instead of in ShadowDOM by setting `this.root = this;` before `ready`.")}updateStyles(t){window.ShadyCSS&&window.ShadyCSS.styleSubtree(this,t)}resolveUrl(t,e){return!e&&this.importPath&&(e=qa(this.importPath)),qa(t,e)}static _parseTemplateContent(t,n,r){return n.dynamicFns=n.dynamicFns||this._properties,e._parseTemplateContent.call(this,t,n,r)}static _addTemplatePropertyEffect(t,n,r){return!tu||n in this._properties||console.warn(`Property '${n}' used in template but not declared in 'properties'; `+"attribute will not be observed."),e._addTemplatePropertyEffect.call(this,t,n,r)}}}),Xl=Gl(HTMLElement);
/**
 * @fileoverview
 * @suppress {checkPrototypalTypes}
 * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt The complete set of authors may be found
 * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
 * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
 * Google as part of the polymer project is also subject to an additional IP
 * rights grant found at http://polymer.github.io/PATENTS.txt
 */
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
class Zl{constructor(){this._asyncModule=null,this._callback=null,this._timer=null}setConfig(t,e){this._asyncModule=t,this._callback=e,this._timer=this._asyncModule.run(()=>{this._timer=null,Ql.delete(this),this._callback()})}cancel(){this.isActive()&&(this._cancelAsync(),Ql.delete(this))}_cancelAsync(){this.isActive()&&(this._asyncModule.cancel(this._timer),this._timer=null)}flush(){this.isActive()&&(this.cancel(),this._callback())}isActive(){return null!=this._timer}static debounce(t,e,n){return t instanceof Zl?t._cancelAsync():t=new Zl,t.setConfig(e,n),t}}let Ql=new Set;const tc=function(t){Ql.add(t)},ec=function(){const t=Boolean(Ql.size);return Ql.forEach(t=>{try{t.flush()}catch(t){setTimeout(()=>{throw t})}}),t};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let nc="string"==typeof document.head.style.touchAction,rc="__polymerGestures",ic="__polymerGesturesHandled",oc="__polymerGesturesTouchAction",sc=25,ac=5,uc=2500,lc=["mousedown","mousemove","mouseup","click"],cc=[0,1,4,2],hc=function(){try{return 1===new MouseEvent("test",{buttons:1}).buttons}catch(t){return!1}}();function fc(t){return lc.indexOf(t)>-1}let dc=!1;function pc(t){if(!fc(t)&&"touchend"!==t)return nc&&dc&&Xa?{passive:!0}:void 0}!function(){try{let t=Object.defineProperty({},"passive",{get(){dc=!0}});window.addEventListener("test",null,t),window.removeEventListener("test",null,t)}catch(t){}}();let _c=navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/);const yc=[],mc={button:!0,input:!0,keygen:!0,meter:!0,output:!0,textarea:!0,progress:!0,select:!0},gc={button:!0,command:!0,fieldset:!0,input:!0,keygen:!0,optgroup:!0,option:!0,select:!0,textarea:!0};function vc(t){return mc[t.localName]||!1}function bc(t){let e=Array.prototype.slice.call(t.labels||[]);if(!e.length){e=[];let n=t.getRootNode();if(t.id){let r=n.querySelectorAll(`label[for = ${t.id}]`);for(let t=0;t<r.length;t++)e.push(r[t])}}return e}let wc=function(t){let e=t.sourceCapabilities;if((!e||e.firesTouchEvents)&&(t[ic]={skip:!0},"click"===t.type)){let e=!1,n=Oc(t);for(let t=0;t<n.length;t++){if(n[t].nodeType===Node.ELEMENT_NODE)if("label"===n[t].localName)yc.push(n[t]);else if(vc(n[t])){let r=bc(n[t]);for(let t=0;t<r.length;t++)e=e||yc.indexOf(r[t])>-1}if(n[t]===Ac.mouse.target)return}if(e)return;t.preventDefault(),t.stopPropagation()}};function Ec(t){let e=_c?["click"]:lc;for(let n,r=0;r<e.length;r++)n=e[r],t?(yc.length=0,document.addEventListener(n,wc,!0)):document.removeEventListener(n,wc,!0)}function Sc(t){let e=t.type;if(!fc(e))return!1;if("mousemove"===e){let e=void 0===t.buttons?1:t.buttons;return t instanceof window.MouseEvent&&!hc&&(e=cc[t.which]||0),Boolean(1&e)}return 0===(void 0===t.button?0:t.button)}let Ac={mouse:{target:null,mouseIgnoreJob:null},touch:{x:0,y:0,id:-1,scrollDecided:!1}};function Nc(t,e,n){t.movefn=e,t.upfn=n,document.addEventListener("mousemove",e),document.addEventListener("mouseup",n)}function Tc(t){document.removeEventListener("mousemove",t.movefn),document.removeEventListener("mouseup",t.upfn),t.movefn=null,t.upfn=null}nu&&document.addEventListener("touchend",function(t){if(!nu)return;Ac.mouse.mouseIgnoreJob||Ec(!0),Ac.mouse.target=Oc(t)[0],Ac.mouse.mouseIgnoreJob=Zl.debounce(Ac.mouse.mouseIgnoreJob,Zu.after(uc),function(){Ec(),Ac.mouse.target=null,Ac.mouse.mouseIgnoreJob=null})},!!dc&&{passive:!0});const Oc=window.ShadyDOM&&window.ShadyDOM.noPatch?window.ShadyDOM.composedPath:t=>t.composedPath&&t.composedPath()||[],Pc={},Cc=[];function xc(t){const e=Oc(t);return e.length>0?e[0]:t.target}function Ic(t){let e,n=t.type,r=t.currentTarget[rc];if(!r)return;let i=r[n];if(i){if(!t[ic]&&(t[ic]={},"touch"===n.slice(0,5))){let e=(t=t).changedTouches[0];if("touchstart"===n&&1===t.touches.length&&(Ac.touch.id=e.identifier),Ac.touch.id!==e.identifier)return;nc||"touchstart"!==n&&"touchmove"!==n||function(t){let e=t.changedTouches[0],n=t.type;if("touchstart"===n)Ac.touch.x=e.clientX,Ac.touch.y=e.clientY,Ac.touch.scrollDecided=!1;else if("touchmove"===n){if(Ac.touch.scrollDecided)return;Ac.touch.scrollDecided=!0;let n=function(t){let e="auto",n=Oc(t);for(let t,r=0;r<n.length;r++)if((t=n[r])[oc]){e=t[oc];break}return e}(t),r=!1,i=Math.abs(Ac.touch.x-e.clientX),o=Math.abs(Ac.touch.y-e.clientY);t.cancelable&&("none"===n?r=!0:"pan-x"===n?r=o>i:"pan-y"===n&&(r=i>o)),r?t.preventDefault():kc("track")}}(t)}if(!(e=t[ic]).skip){for(let n,r=0;r<Cc.length;r++)i[(n=Cc[r]).name]&&!e[n.name]&&n.flow&&n.flow.start.indexOf(t.type)>-1&&n.reset&&n.reset();for(let r,o=0;o<Cc.length;o++)i[(r=Cc[o]).name]&&!e[r.name]&&(e[r.name]=!0,r[n](t))}}}function Rc(t,e,n){return!!Pc[e]&&(function(t,e,n){let r=Pc[e],i=r.deps,o=r.name,s=t[rc];s||(t[rc]=s={});for(let e,n,r=0;r<i.length;r++)e=i[r],_c&&fc(e)&&"click"!==e||((n=s[e])||(s[e]=n={_count:0}),0===n._count&&t.addEventListener(e,Ic,pc(e)),n[o]=(n[o]||0)+1,n._count=(n._count||0)+1);t.addEventListener(e,n),r.touchAction&&Mc(t,r.touchAction)}(t,e,n),!0)}function Bc(t,e,n){return!!Pc[e]&&(function(t,e,n){let r=Pc[e],i=r.deps,o=r.name,s=t[rc];if(s)for(let e,n,r=0;r<i.length;r++)e=i[r],(n=s[e])&&n[o]&&(n[o]=(n[o]||1)-1,n._count=(n._count||1)-1,0===n._count&&t.removeEventListener(e,Ic,pc(e)));t.removeEventListener(e,n)}(t,e,n),!0)}function Dc(t){Cc.push(t);for(let e=0;e<t.emits.length;e++)Pc[t.emits[e]]=t}function Mc(t,e){nc&&t instanceof HTMLElement&&tl.run(()=>{t.style.touchAction=e}),t[oc]=e}function Uc(t,e,n){let r=new Event(e,{bubbles:!0,cancelable:!0,composed:!0});if(r.detail=n,Ru(t).dispatchEvent(r),r.defaultPrevented){let t=n.preventer||n.sourceEvent;t&&t.preventDefault&&t.preventDefault()}}function kc(t){let e=function(t){for(let e,n=0;n<Cc.length;n++){e=Cc[n];for(let n,r=0;r<e.emits.length;r++)if((n=e.emits[r])===t)return e}return null}(t);e.info&&(e.info.prevent=!0)}function Lc(t,e,n,r){e&&Uc(e,t,{x:n.clientX,y:n.clientY,sourceEvent:n,preventer:r,prevent:function(t){return kc(t)}})}function Fc(t,e,n){if(t.prevent)return!1;if(t.started)return!0;let r=Math.abs(t.x-e),i=Math.abs(t.y-n);return r>=ac||i>=ac}function jc(t,e,n){if(!e)return;let r,i=t.moves[t.moves.length-2],o=t.moves[t.moves.length-1],s=o.x-t.x,a=o.y-t.y,u=0;i&&(r=o.x-i.x,u=o.y-i.y),Uc(e,"track",{state:t.state,x:n.clientX,y:n.clientY,dx:s,dy:a,ddx:r,ddy:u,sourceEvent:n,hover:function(){return function(t,e){let n=document.elementFromPoint(t,e),r=n;for(;r&&r.shadowRoot&&!window.ShadyDOM&&r!==(r=r.shadowRoot.elementFromPoint(t,e));)r&&(n=r);return n}(n.clientX,n.clientY)}})}function $c(t,e,n){let r=Math.abs(e.clientX-t.x),i=Math.abs(e.clientY-t.y),o=xc(n||e);!o||gc[o.localName]&&o.hasAttribute("disabled")||(isNaN(r)||isNaN(i)||r<=sc&&i<=sc||function(t){if("click"===t.type){if(0===t.detail)return!0;let e=xc(t);if(!e.nodeType||e.nodeType!==Node.ELEMENT_NODE)return!0;let n=e.getBoundingClientRect(),r=t.pageX,i=t.pageY;return!(r>=n.left&&r<=n.right&&i>=n.top&&i<=n.bottom)}return!1}(e))&&(t.prevent||Uc(o,"tap",{x:e.clientX,y:e.clientY,sourceEvent:e,preventer:n}))}Dc({name:"downup",deps:["mousedown","touchstart","touchend"],flow:{start:["mousedown","touchstart"],end:["mouseup","touchend"]},emits:["down","up"],info:{movefn:null,upfn:null},reset:function(){Tc(this.info)},mousedown:function(t){if(!Sc(t))return;let e=xc(t),n=this;Nc(this.info,function(t){Sc(t)||(Lc("up",e,t),Tc(n.info))},function(t){Sc(t)&&Lc("up",e,t),Tc(n.info)}),Lc("down",e,t)},touchstart:function(t){Lc("down",xc(t),t.changedTouches[0],t)},touchend:function(t){Lc("up",xc(t),t.changedTouches[0],t)}}),Dc({name:"track",touchAction:"none",deps:["mousedown","touchstart","touchmove","touchend"],flow:{start:["mousedown","touchstart"],end:["mouseup","touchend"]},emits:["track"],info:{x:0,y:0,state:"start",started:!1,moves:[],addMove:function(t){this.moves.length>2&&this.moves.shift(),this.moves.push(t)},movefn:null,upfn:null,prevent:!1},reset:function(){this.info.state="start",this.info.started=!1,this.info.moves=[],this.info.x=0,this.info.y=0,this.info.prevent=!1,Tc(this.info)},mousedown:function(t){if(!Sc(t))return;let e=xc(t),n=this,r=function(t){let r=t.clientX,i=t.clientY;Fc(n.info,r,i)&&(n.info.state=n.info.started?"mouseup"===t.type?"end":"track":"start","start"===n.info.state&&kc("tap"),n.info.addMove({x:r,y:i}),Sc(t)||(n.info.state="end",Tc(n.info)),e&&jc(n.info,e,t),n.info.started=!0)};Nc(this.info,r,function(t){n.info.started&&r(t),Tc(n.info)}),this.info.x=t.clientX,this.info.y=t.clientY},touchstart:function(t){let e=t.changedTouches[0];this.info.x=e.clientX,this.info.y=e.clientY},touchmove:function(t){let e=xc(t),n=t.changedTouches[0],r=n.clientX,i=n.clientY;Fc(this.info,r,i)&&("start"===this.info.state&&kc("tap"),this.info.addMove({x:r,y:i}),jc(this.info,e,n),this.info.state="track",this.info.started=!0)},touchend:function(t){let e=xc(t),n=t.changedTouches[0];this.info.started&&(this.info.state="end",this.info.addMove({x:n.clientX,y:n.clientY}),jc(this.info,e,n))}}),Dc({name:"tap",deps:["mousedown","click","touchstart","touchend"],flow:{start:["mousedown","touchstart"],end:["click","touchend"]},emits:["tap"],info:{x:NaN,y:NaN,prevent:!1},reset:function(){this.info.x=NaN,this.info.y=NaN,this.info.prevent=!1},mousedown:function(t){Sc(t)&&(this.info.x=t.clientX,this.info.y=t.clientY)},click:function(t){Sc(t)&&$c(this.info,t)},touchstart:function(t){const e=t.changedTouches[0];this.info.x=e.clientX,this.info.y=e.clientY},touchend:function(t){$c(this.info,t.changedTouches[0],t)}});const zc=Iu(t=>{return class extends t{_addEventListenerToNode(t,e,n){Rc(t,e,n)||super._addEventListenerToNode(t,e,n)}_removeEventListenerFromNode(t,e,n){Bc(t,e,n)||super._removeEventListenerFromNode(t,e,n)}}});
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
function Yc(t,e,n){return{index:t,removed:e,addedCount:n}}const Vc=0,qc=1,Hc=2,Wc=3;function Jc(t,e,n,r,i,o){let s,a=0,u=0,l=Math.min(n-e,o-i);if(0==e&&0==i&&(a=function(t,e,n){for(let r=0;r<n;r++)if(!Gc(t[r],e[r]))return r;return n}(t,r,l)),n==t.length&&o==r.length&&(u=function(t,e,n){let r=t.length,i=e.length,o=0;for(;o<n&&Gc(t[--r],e[--i]);)o++;return o}(t,r,l-a)),i+=a,o-=u,(n-=u)-(e+=a)==0&&o-i==0)return[];if(e==n){for(s=Yc(e,[],0);i<o;)s.removed.push(r[i++]);return[s]}if(i==o)return[Yc(e,[],n-e)];let c=function(t){let e=t.length-1,n=t[0].length-1,r=t[e][n],i=[];for(;e>0||n>0;){if(0==e){i.push(Hc),n--;continue}if(0==n){i.push(Wc),e--;continue}let o,s=t[e-1][n-1],a=t[e-1][n],u=t[e][n-1];(o=a<u?a<s?a:s:u<s?u:s)==s?(s==r?i.push(Vc):(i.push(qc),r=s),e--,n--):o==a?(i.push(Wc),e--,r=a):(i.push(Hc),n--,r=u)}return i.reverse(),i}(function(t,e,n,r,i,o){let s=o-i+1,a=n-e+1,u=new Array(s);for(let t=0;t<s;t++)u[t]=new Array(a),u[t][0]=t;for(let t=0;t<a;t++)u[0][t]=t;for(let n=1;n<s;n++)for(let o=1;o<a;o++)if(Gc(t[e+o-1],r[i+n-1]))u[n][o]=u[n-1][o-1];else{let t=u[n-1][o]+1,e=u[n][o-1]+1;u[n][o]=t<e?t:e}return u}(t,e,n,r,i,o));s=void 0;let h=[],f=e,d=i;for(let t=0;t<c.length;t++)switch(c[t]){case Vc:s&&(h.push(s),s=void 0),f++,d++;break;case qc:s||(s=Yc(f,[],0)),s.addedCount++,f++,s.removed.push(r[d]),d++;break;case Hc:s||(s=Yc(f,[],0)),s.addedCount++,f++;break;case Wc:s||(s=Yc(f,[],0)),s.removed.push(r[d]),d++}return s&&h.push(s),h}function Kc(t,e){return Jc(t,0,t.length,e,0,e.length)}function Gc(t,e){return t===e}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function Xc(t){return"slot"===t.localName}let Zc=class{static getFlattenedNodes(t){const e=Ru(t);return Xc(t)?(t=t,e.assignedNodes({flatten:!0})):Array.from(e.childNodes).map(t=>Xc(t)?Ru(t=t).assignedNodes({flatten:!0}):[t]).reduce((t,e)=>t.concat(e),[])}constructor(t,e){this._shadyChildrenObserver=null,this._nativeChildrenObserver=null,this._connected=!1,this._target=t,this.callback=e,this._effectiveNodes=[],this._observer=null,this._scheduled=!1,this._boundSchedule=(()=>{this._schedule()}),this.connect(),this._schedule()}connect(){Xc(this._target)?this._listenSlots([this._target]):Ru(this._target).children&&(this._listenSlots(Ru(this._target).children),window.ShadyDOM?this._shadyChildrenObserver=window.ShadyDOM.observeChildren(this._target,t=>{this._processMutations(t)}):(this._nativeChildrenObserver=new MutationObserver(t=>{this._processMutations(t)}),this._nativeChildrenObserver.observe(this._target,{childList:!0}))),this._connected=!0}disconnect(){Xc(this._target)?this._unlistenSlots([this._target]):Ru(this._target).children&&(this._unlistenSlots(Ru(this._target).children),window.ShadyDOM&&this._shadyChildrenObserver?(window.ShadyDOM.unobserveChildren(this._shadyChildrenObserver),this._shadyChildrenObserver=null):this._nativeChildrenObserver&&(this._nativeChildrenObserver.disconnect(),this._nativeChildrenObserver=null)),this._connected=!1}_schedule(){this._scheduled||(this._scheduled=!0,tl.run(()=>this.flush()))}_processMutations(t){this._processSlotMutations(t),this.flush()}_processSlotMutations(t){if(t)for(let e=0;e<t.length;e++){let n=t[e];n.addedNodes&&this._listenSlots(n.addedNodes),n.removedNodes&&this._unlistenSlots(n.removedNodes)}}flush(){if(!this._connected)return!1;window.ShadyDOM&&ShadyDOM.flush(),this._nativeChildrenObserver?this._processSlotMutations(this._nativeChildrenObserver.takeRecords()):this._shadyChildrenObserver&&this._processSlotMutations(this._shadyChildrenObserver.takeRecords()),this._scheduled=!1;let t={target:this._target,addedNodes:[],removedNodes:[]},e=this.constructor.getFlattenedNodes(this._target),n=Kc(e,this._effectiveNodes);for(let e,r=0;r<n.length&&(e=n[r]);r++)for(let n,r=0;r<e.removed.length&&(n=e.removed[r]);r++)t.removedNodes.push(n);for(let r,i=0;i<n.length&&(r=n[i]);i++)for(let n=r.index;n<r.index+r.addedCount;n++)t.addedNodes.push(e[n]);this._effectiveNodes=e;let r=!1;return(t.addedNodes.length||t.removedNodes.length)&&(r=!0,this.callback.call(this._target,t)),r}_listenSlots(t){for(let e=0;e<t.length;e++){let n=t[e];Xc(n)&&n.addEventListener("slotchange",this._boundSchedule)}}_unlistenSlots(t){for(let e=0;e<t.length;e++){let n=t[e];Xc(n)&&n.removeEventListener("slotchange",this._boundSchedule)}}};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/class Qc{constructor(){this.start=0,this.end=0,this.previous=null,this.parent=null,this.rules=null,this.parsedCssText="",this.cssText="",this.atRule=!1,this.type=0,this.keyframesName="",this.selector="",this.parsedSelector=""}}function th(t){return function t(e,n){let r=n.substring(e.start,e.end-1);e.parsedCssText=e.cssText=r.trim();if(e.parent){let t=e.previous?e.previous.end:e.parent.start;r=(r=(r=function(t){return t.replace(/\\([0-9a-f]{1,6})\s/gi,function(){let t=arguments[1],e=6-t.length;for(;e--;)t="0"+t;return"\\"+t})}(r=n.substring(t,e.start-1))).replace(oh.multipleSpaces," ")).substring(r.lastIndexOf(";")+1);let i=e.parsedSelector=e.selector=r.trim();e.atRule=0===i.indexOf(uh),e.atRule?0===i.indexOf(ah)?e.type=nh.MEDIA_RULE:i.match(oh.keyframesRule)&&(e.type=nh.KEYFRAMES_RULE,e.keyframesName=e.selector.split(oh.multipleSpaces).pop()):0===i.indexOf(sh)?e.type=nh.MIXIN_RULE:e.type=nh.STYLE_RULE}let i=e.rules;if(i)for(let e,r=0,o=i.length;r<o&&(e=i[r]);r++)t(e,n);return e}(function(t){let e=new Qc;e.start=0,e.end=t.length;let n=e;for(let r=0,i=t.length;r<i;r++)if(t[r]===rh){n.rules||(n.rules=[]);let t=n,e=t.rules[t.rules.length-1]||null;(n=new Qc).start=r+1,n.parent=t,n.previous=e,t.rules.push(n)}else t[r]===ih&&(n.end=r+1,n=n.parent||e);return e}(t=function(t){return t.replace(oh.comments,"").replace(oh.port,"")}(t)),t)}function eh(t,e,n=""){let r="";if(t.cssText||t.rules){let n=t.rules;if(n&&!function(t){let e=t[0];return Boolean(e)&&Boolean(e.selector)&&0===e.selector.indexOf(sh)}(n))for(let t,i=0,o=n.length;i<o&&(t=n[i]);i++)r=eh(t,e,r);else(r=(r=e?t.cssText:function(t){return function(t){return t.replace(oh.mixinApply,"").replace(oh.varApply,"")}(t=function(t){return t.replace(oh.customProp,"").replace(oh.mixinProp,"")}(t))}(t.cssText)).trim())&&(r="  "+r+"\n")}return r&&(t.selector&&(n+=t.selector+" "+rh+"\n"),n+=r,t.selector&&(n+=ih+"\n\n")),n}const nh={STYLE_RULE:1,KEYFRAMES_RULE:7,MEDIA_RULE:4,MIXIN_RULE:1e3},rh="{",ih="}",oh={comments:/\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,port:/@import[^;]*;/gim,customProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,mixinProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,mixinApply:/@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,varApply:/[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,keyframesRule:/^@[^\s]*keyframes/,multipleSpaces:/\s+/g},sh="--",ah="@media",uh="@",lh=new Set,ch="shady-unscoped";function hh(t){const e=t.textContent;if(!lh.has(e)){lh.add(e);const n=t.cloneNode(!0);document.head.appendChild(n)}}function fh(t){return t.hasAttribute(ch)}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function dh(t,e){return t?("string"==typeof t&&(t=th(t)),e&&_h(t,e),eh(t,Fa)):""}function ph(t){return!t.__cssRules&&t.textContent&&(t.__cssRules=th(t.textContent)),t.__cssRules||null}function _h(t,e,n,r){if(!t)return;let i=!1,o=t.type;if(r&&o===nh.MEDIA_RULE){let e=t.selector.match(Ia);e&&(window.matchMedia(e[1]).matches||(i=!0))}o===nh.STYLE_RULE?e(t):n&&o===nh.KEYFRAMES_RULE?n(t):o===nh.MIXIN_RULE&&(i=!0);let s=t.rules;if(s&&!i)for(let t,i=0,o=s.length;i<o&&(t=s[i]);i++)_h(t,e,n,r)}function yh(t,e){let n=0;for(let r=e,i=t.length;r<i;r++)if("("===t[r])n++;else if(")"===t[r]&&0==--n)return r;return-1}window.ShadyDOM&&window.ShadyDOM.wrap;const mh="css-build";function gh(t){if(void 0!==Ua)return Ua;if(void 0===t.__cssBuild){const e=t.getAttribute(mh);if(e)t.__cssBuild=e;else{const e=function(t){const e="template"===t.localName?t.content.firstChild:t.firstChild;if(e instanceof Comment){const t=e.textContent.trim().split(":");if(t[0]===mh)return t[1]}return""}(t);""!==e&&function(t){const e="template"===t.localName?t.content.firstChild:t.firstChild;e.parentNode.removeChild(e)}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/(t),t.__cssBuild=e}}return t.__cssBuild||""}function vh(t){return""!==gh(t)}const bh=/;\s*/m,wh=/^\s*(initial)|(inherit)\s*$/,Eh=/\s*!important/,Sh="_-_";class Ah{constructor(){this._map={}}set(t,e){t=t.trim(),this._map[t]={properties:e,dependants:{}}}get(t){return t=t.trim(),this._map[t]||null}}let Nh=null;class Th{constructor(){this._currentElement=null,this._measureElement=null,this._map=new Ah}detectMixin(t){return function(t){const e=xa.test(t)||Ca.test(t);return xa.lastIndex=0,Ca.lastIndex=0,e}(t)}gatherStyles(t){const e=function(t){const e=[],n=t.querySelectorAll("style");for(let t=0;t<n.length;t++){const r=n[t];fh(r)?Da||(hh(r),r.parentNode.removeChild(r)):(e.push(r.textContent),r.parentNode.removeChild(r))}return e.join("").trim()}(t.content);if(e){const n=document.createElement("style");return n.textContent=e,t.content.insertBefore(n,t.content.firstChild),n}return null}transformTemplate(t,e){void 0===t._gatheredStyle&&(t._gatheredStyle=this.gatherStyles(t));const n=t._gatheredStyle;return n?this.transformStyle(n,e):null}transformStyle(t,e=""){let n=ph(t);return this.transformRules(n,e),t.textContent=dh(n),n}transformCustomStyle(t){let e=ph(t);return _h(e,t=>{":root"===t.selector&&(t.selector="html"),this.transformRule(t)}),t.textContent=dh(e),e}transformRules(t,e){this._currentElement=e,_h(t,t=>{this.transformRule(t)}),this._currentElement=null}transformRule(t){t.cssText=this.transformCssText(t.parsedCssText,t),":root"===t.selector&&(t.selector=":host > *")}transformCssText(t,e){return t=t.replace(Ca,(t,n,r,i)=>this._produceCssProperties(t,n,r,i,e)),this._consumeCssProperties(t,e)}_getInitialValueForProperty(t){return this._measureElement||(this._measureElement=document.createElement("meta"),this._measureElement.setAttribute("apply-shim-measure",""),this._measureElement.style.all="initial",document.head.appendChild(this._measureElement)),window.getComputedStyle(this._measureElement).getPropertyValue(t)}_fallbacksFromPreviousRules(t){let e=t;for(;e.parent;)e=e.parent;const n={};let r=!1;return _h(e,e=>{(r=r||e===t)||e.selector===t.selector&&Object.assign(n,this._cssTextToMap(e.parsedCssText))}),n}_consumeCssProperties(t,e){let n=null;for(;n=xa.exec(t);){let r=n[0],i=n[1],o=n.index,s=o+r.indexOf("@apply"),a=o+r.length,u=t.slice(0,s),l=t.slice(a),c=e?this._fallbacksFromPreviousRules(e):{};Object.assign(c,this._cssTextToMap(u));let h=this._atApplyToCssProperties(i,c);t=`${u}${h}${l}`,xa.lastIndex=o+h.length}return t}_atApplyToCssProperties(t,e){t=t.replace(bh,"");let n=[],r=this._map.get(t);if(r||(this._map.set(t,{}),r=this._map.get(t)),r){let i,o,s;this._currentElement&&(r.dependants[this._currentElement]=!0);const a=r.properties;for(i in a)s=e&&e[i],o=[i,": var(",t,Sh,i],s&&o.push(",",s.replace(Eh,"")),o.push(")"),Eh.test(a[i])&&o.push(" !important"),n.push(o.join(""))}return n.join("; ")}_replaceInitialOrInherit(t,e){let n=wh.exec(e);return n&&(e=n[1]?this._getInitialValueForProperty(t):"apply-shim-inherit"),e}_cssTextToMap(t,e=!1){let n,r,i=t.split(";"),o={};for(let t,s,a=0;a<i.length;a++)(t=i[a])&&(s=t.split(":")).length>1&&(n=s[0].trim(),r=s.slice(1).join(":"),e&&(r=this._replaceInitialOrInherit(n,r)),o[n]=r);return o}_invalidateMixinEntry(t){if(Nh)for(let e in t.dependants)e!==this._currentElement&&Nh(e)}_produceCssProperties(t,e,n,r,i){if(n&&function t(e,n){let r=e.indexOf("var(");if(-1===r)return n(e,"","","");let i=yh(e,r+3),o=e.substring(r+4,i),s=e.substring(0,r),a=t(e.substring(i+1),n),u=o.indexOf(",");return-1===u?n(s,o.trim(),"",a):n(s,o.substring(0,u).trim(),o.substring(u+1).trim(),a)}(n,(t,e)=>{e&&this._map.get(e)&&(r=`@apply ${e};`)}),!r)return t;let o=this._consumeCssProperties(""+r,i),s=t.slice(0,t.indexOf("--")),a=this._cssTextToMap(o,!0),u=a,l=this._map.get(e),c=l&&l.properties;c?u=Object.assign(Object.create(c),a):this._map.set(e,u);let h,f,d=[],p=!1;for(h in u)void 0===(f=a[h])&&(f="initial"),!c||h in c||(p=!0),d.push(`${e}${Sh}${h}: ${f}`);return p&&this._invalidateMixinEntry(l),l&&(l.properties=u),n&&(s=`${t};${s}`),`${s}${d.join("; ")};`}}Th.prototype.detectMixin=Th.prototype.detectMixin,Th.prototype.transformStyle=Th.prototype.transformStyle,Th.prototype.transformCustomStyle=Th.prototype.transformCustomStyle,Th.prototype.transformRules=Th.prototype.transformRules,Th.prototype.transformRule=Th.prototype.transformRule,Th.prototype.transformTemplate=Th.prototype.transformTemplate,Th.prototype._separator=Sh,Object.defineProperty(Th.prototype,"invalidCallback",{get:()=>Nh,set(t){Nh=t}});var Oh=Th;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/var Ph={};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Ch="_applyShimCurrentVersion",xh="_applyShimNextVersion",Ih="_applyShimValidatingVersion",Rh=Promise.resolve();function Bh(t){let e=Ph[t];e&&function(t){t[Ch]=t[Ch]||0,t[Ih]=t[Ih]||0,t[xh]=(t[xh]||0)+1}(e)}function Dh(t){return t[Ch]===t[xh]}function Mh(t){return!Dh(t)&&t[Ih]===t[xh]}function Uh(t){t[Ih]=t[xh],t._validating||(t._validating=!0,Rh.then(function(){t[Ch]=t[xh],t._validating=!1}))}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
const kh=new Oh;if(!window.ShadyCSS||!window.ShadyCSS.ScopingShim){const t=new class{constructor(){this.customStyleInterface=null,kh.invalidCallback=Bh}ensure(){this.customStyleInterface||window.ShadyCSS.CustomStyleInterface&&(this.customStyleInterface=window.ShadyCSS.CustomStyleInterface,this.customStyleInterface.transformCallback=(t=>{kh.transformCustomStyle(t)}),this.customStyleInterface.validateCallback=(()=>{requestAnimationFrame(()=>{this.customStyleInterface.enqueued&&this.flushCustomStyles()})}))}prepareTemplate(t,e){if(this.ensure(),vh(t))return;Ph[e]=t;let n=kh.transformTemplate(t,e);t._styleAst=n}flushCustomStyles(){if(this.ensure(),!this.customStyleInterface)return;let t=this.customStyleInterface.processStyles();if(this.customStyleInterface.enqueued){for(let e=0;e<t.length;e++){let n=t[e],r=this.customStyleInterface.getStyleForCustomStyle(n);r&&kh.transformCustomStyle(r)}this.customStyleInterface.enqueued=!1}}styleSubtree(t,e){if(this.ensure(),e&&Ra(t,e),t.shadowRoot){this.styleElement(t);let e=t.shadowRoot.children||t.shadowRoot.childNodes;for(let t=0;t<e.length;t++)this.styleSubtree(e[t])}else{let e=t.children||t.childNodes;for(let t=0;t<e.length;t++)this.styleSubtree(e[t])}}styleElement(t){this.ensure();let{is:e}=function(t){let e=t.localName,n="",r="";return e?e.indexOf("-")>-1?n=e:(r=e,n=t.getAttribute&&t.getAttribute("is")||""):(n=t.is,r=t.extends),{is:n,typeExtension:r}}(t),n=Ph[e];if((!n||!vh(n))&&n&&!Dh(n)){Mh(n)||(this.prepareTemplate(n,e),Uh(n));let r=t.shadowRoot;if(r){let t=r.querySelector("style");t&&(t.__cssRules=n._styleAst,t.textContent=dh(n._styleAst))}}}styleDocument(t){this.ensure(),this.styleSubtree(document.body,t)}};let e=window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface;window.ShadyCSS={prepareTemplate(e,n,r){t.flushCustomStyles(),t.prepareTemplate(e,n)},prepareTemplateStyles(t,e,n){window.ShadyCSS.prepareTemplate(t,e,n)},prepareTemplateDom(t,e){},styleSubtree(e,n){t.flushCustomStyles(),t.styleSubtree(e,n)},styleElement(e){t.flushCustomStyles(),t.styleElement(e)},styleDocument(e){t.flushCustomStyles(),t.styleDocument(e)},getComputedStyleValue:(t,e)=>Ba(t,e),flushCustomStyles(){t.flushCustomStyles()},nativeCss:Fa,nativeShadow:Da,cssBuild:Ua,disableRuntime:La},e&&(window.ShadyCSS.CustomStyleInterface=e)}window.ShadyCSS.ApplyShim=kh;
/**
 * @fileoverview
 * @suppress {checkPrototypalTypes}
 * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt The complete set of authors may be found
 * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
 * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
 * Google as part of the polymer project is also subject to an additional IP
 * rights grant found at http://polymer.github.io/PATENTS.txt
 */
const Lh=/:host\(:dir\((ltr|rtl)\)\)/g,Fh=':host([dir="$1"])',jh=/([\s\w-#\.\[\]\*]*):dir\((ltr|rtl)\)/g,$h=':host([dir="$2"]) $1',zh=/:dir\((?:ltr|rtl)\)/,Yh=Boolean(window.ShadyDOM&&window.ShadyDOM.inUse),Vh=[];let qh=null,Hh="";function Wh(){Hh=document.documentElement.getAttribute("dir")}function Jh(t){if(!t.__autoDirOptOut){t.setAttribute("dir",Hh)}}function Kh(){Wh(),Hh=document.documentElement.getAttribute("dir");for(let t=0;t<Vh.length;t++)Jh(Vh[t])}const Gh=Iu(t=>{Yh||qh||(Wh(),(qh=new MutationObserver(Kh)).observe(document.documentElement,{attributes:!0,attributeFilter:["dir"]}));const e=ol(t);class n extends e{static _processStyleText(t,n){return t=e._processStyleText.call(this,t,n),!Yh&&zh.test(t)&&(t=this._replaceDirInCssText(t),this.__activateDir=!0),t}static _replaceDirInCssText(t){let e=t;return e=(e=e.replace(Lh,Fh)).replace(jh,$h)}constructor(){super(),this.__autoDirOptOut=!1}ready(){super.ready(),this.__autoDirOptOut=this.hasAttribute("dir")}connectedCallback(){e.prototype.connectedCallback&&super.connectedCallback(),this.constructor.__activateDir&&(qh&&qh.takeRecords().length&&Kh(),Vh.push(this),Jh(this))}disconnectedCallback(){if(e.prototype.disconnectedCallback&&super.disconnectedCallback(),this.constructor.__activateDir){const t=Vh.indexOf(this);t>-1&&Vh.splice(t,1)}}}return n.__activateDir=!1,n});
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
function Xh(){document.body.removeAttribute("unresolved")}"interactive"===document.readyState||"complete"===document.readyState?Xh():window.addEventListener("DOMContentLoaded",Xh);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Zh=function(){let t,e;do{t=window.ShadyDOM&&ShadyDOM.flush(),window.ShadyCSS&&window.ShadyCSS.ScopingShim&&window.ShadyCSS.ScopingShim.flush(),e=ec()}while(t||e)},Qh=Element.prototype,tf=Qh.matches||Qh.matchesSelector||Qh.mozMatchesSelector||Qh.msMatchesSelector||Qh.oMatchesSelector||Qh.webkitMatchesSelector,ef=function(t,e){return tf.call(t,e)};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/class nf{constructor(t){window.ShadyDOM&&window.ShadyDOM.inUse&&window.ShadyDOM.patch(t),this.node=t}observeNodes(t){return new Zc(this.node,t)}unobserveNodes(t){t.disconnect()}notifyObserver(){}deepContains(t){if(Ru(this.node).contains(t))return!0;let e=t,n=t.ownerDocument;for(;e&&e!==n&&e!==this.node;)e=Ru(e).parentNode||Ru(e).host;return e===this.node}getOwnerRoot(){return Ru(this.node).getRootNode()}getDistributedNodes(){return"slot"===this.node.localName?Ru(this.node).assignedNodes({flatten:!0}):[]}getDestinationInsertionPoints(){let t=[],e=Ru(this.node).assignedSlot;for(;e;)t.push(e),e=Ru(e).assignedSlot;return t}importNode(t,e){let n=this.node instanceof Document?this.node:this.node.ownerDocument;return Ru(n).importNode(t,e)}getEffectiveChildNodes(){return Zc.getFlattenedNodes(this.node)}queryDistributedElements(t){let e=this.getEffectiveChildNodes(),n=[];for(let r,i=0,o=e.length;i<o&&(r=e[i]);i++)r.nodeType===Node.ELEMENT_NODE&&ef(r,t)&&n.push(r);return n}get activeElement(){let t=this.node;return void 0!==t._activeElement?t._activeElement:t.activeElement}}function rf(t,e){for(let n=0;n<e.length;n++){let r=e[n];Object.defineProperty(t,r,{get:function(){return this.node[r]},configurable:!0})}}class of{constructor(t){this.event=t}get rootTarget(){return this.path[0]}get localTarget(){return this.event.target}get path(){return this.event.composedPath()}}nf.prototype.cloneNode,nf.prototype.appendChild,nf.prototype.insertBefore,nf.prototype.removeChild,nf.prototype.replaceChild,nf.prototype.setAttribute,nf.prototype.removeAttribute,nf.prototype.querySelector,nf.prototype.querySelectorAll,nf.prototype.parentNode,nf.prototype.firstChild,nf.prototype.lastChild,nf.prototype.nextSibling,nf.prototype.previousSibling,nf.prototype.firstElementChild,nf.prototype.lastElementChild,nf.prototype.nextElementSibling,nf.prototype.previousElementSibling,nf.prototype.childNodes,nf.prototype.children,nf.prototype.classList,nf.prototype.textContent,nf.prototype.innerHTML;let sf=nf;if(window.ShadyDOM&&window.ShadyDOM.inUse&&window.ShadyDOM.noPatch&&window.ShadyDOM.Wrapper){class t extends window.ShadyDOM.Wrapper{}Object.getOwnPropertyNames(nf.prototype).forEach(e=>{"activeElement"!=e&&(t.prototype[e]=nf.prototype[e])}),rf(t.prototype,["classList"]),sf=t,Object.defineProperties(of.prototype,{localTarget:{get(){const t=this.event.currentTarget,e=t&&af(t).getOwnerRoot(),n=this.path;for(let t=0;t<n.length;t++){const r=n[t];if(af(r).getOwnerRoot()===e)return r}},configurable:!0},path:{get(){return window.ShadyDOM.composedPath(this.event)},configurable:!0}})}else!function(t,e){for(let n=0;n<e.length;n++){let r=e[n];t[r]=function(){return this.node[r].apply(this.node,arguments)}}}(nf.prototype,["cloneNode","appendChild","insertBefore","removeChild","replaceChild","setAttribute","removeAttribute","querySelector","querySelectorAll"]),rf(nf.prototype,["parentNode","firstChild","lastChild","nextSibling","previousSibling","firstElementChild","lastElementChild","nextElementSibling","previousElementSibling","childNodes","children","classList"]),function(t,e){for(let n=0;n<e.length;n++){let r=e[n];Object.defineProperty(t,r,{get:function(){return this.node[r]},set:function(t){this.node[r]=t},configurable:!0})}}(nf.prototype,["textContent","innerHTML","className"]);const af=function(t){if((t=t||document)instanceof sf)return t;if(t instanceof of)return t;let e=t.__domApi;return e||(e=t instanceof Event?new of(t):new sf(t),t.__domApi=e),e},uf=window.ShadyDOM,lf=window.ShadyCSS;function cf(t,e){return Ru(t).getRootNode()===e}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let hf=window.ShadyCSS;const ff=Iu(t=>{const e=Gh(zc(Gl(t))),n={x:"pan-x",y:"pan-y",none:"none",all:"auto"};class r extends e{constructor(){super(),this.isAttached,this.__boundListeners,this._debouncers}static get importMeta(){return this.prototype.importMeta}created(){}connectedCallback(){super.connectedCallback(),this.isAttached=!0,this.attached()}attached(){}disconnectedCallback(){super.disconnectedCallback(),this.isAttached=!1,this.detached()}detached(){}attributeChangedCallback(t,e,n,r){e!==n&&(super.attributeChangedCallback(t,e,n,r),this.attributeChanged(t,e,n))}attributeChanged(t,e,n){}_initializeProperties(){let t=Object.getPrototypeOf(this);t.hasOwnProperty(JSCompiler_renameProperty("__hasRegisterFinished",t))||(this._registered(),t.__hasRegisterFinished=!0),super._initializeProperties(),this.root=this,this.created(),this._applyListeners()}_registered(){}ready(){this._ensureAttributes(),super.ready()}_ensureAttributes(){}_applyListeners(){}serialize(t){return this._serializeValue(t)}deserialize(t,e){return this._deserializeValue(t,e)}reflectPropertyToAttribute(t,e,n){this._propertyToAttribute(t,e,n)}serializeValueToAttribute(t,e,n){this._valueToNodeAttribute(n||this,t,e)}extend(t,e){if(!t||!e)return t||e;let n=Object.getOwnPropertyNames(e);for(let r,i=0;i<n.length&&(r=n[i]);i++){let n=Object.getOwnPropertyDescriptor(e,r);n&&Object.defineProperty(t,r,n)}return t}mixin(t,e){for(let n in e)t[n]=e[n];return t}chainObject(t,e){return t&&e&&t!==e&&(t.__proto__=e),t}instanceTemplate(t){let e=this.constructor._contentForTemplate(t);return document.importNode(e,!0)}fire(t,e,n){n=n||{},e=null===e||void 0===e?{}:e;let r=new Event(t,{bubbles:void 0===n.bubbles||n.bubbles,cancelable:Boolean(n.cancelable),composed:void 0===n.composed||n.composed});r.detail=e;let i=n.node||this;return Ru(i).dispatchEvent(r),r}listen(t,e,n){t=t||this;let r=this.__boundListeners||(this.__boundListeners=new WeakMap),i=r.get(t);i||(i={},r.set(t,i));let o=e+n;i[o]||(i[o]=this._addMethodEventListenerToNode(t,e,n,this))}unlisten(t,e,n){t=t||this;let r=this.__boundListeners&&this.__boundListeners.get(t),i=e+n,o=r&&r[i];o&&(this._removeEventListenerFromNode(t,e,o),r[i]=null)}setScrollDirection(t,e){Mc(e||this,n[t]||"auto")}$$(t){return this.root.querySelector(t)}get domHost(){let t=Ru(this).getRootNode();return t instanceof DocumentFragment?t.host:t}distributeContent(){const t=af(this);window.ShadyDOM&&t.shadowRoot&&ShadyDOM.flush()}getEffectiveChildNodes(){return af(this).getEffectiveChildNodes()}queryDistributedElements(t){return af(this).queryDistributedElements(t)}getEffectiveChildren(){return this.getEffectiveChildNodes().filter(function(t){return t.nodeType===Node.ELEMENT_NODE})}getEffectiveTextContent(){let t=this.getEffectiveChildNodes(),e=[];for(let n,r=0;n=t[r];r++)n.nodeType!==Node.COMMENT_NODE&&e.push(n.textContent);return e.join("")}queryEffectiveChildren(t){let e=this.queryDistributedElements(t);return e&&e[0]}queryAllEffectiveChildren(t){return this.queryDistributedElements(t)}getContentChildNodes(t){let e=this.root.querySelector(t||"slot");return e?af(e).getDistributedNodes():[]}getContentChildren(t){return this.getContentChildNodes(t).filter(function(t){return t.nodeType===Node.ELEMENT_NODE})}isLightDescendant(t){return this!==t&&Ru(this).contains(t)&&Ru(this).getRootNode()===Ru(t).getRootNode()}isLocalDescendant(t){return this.root===Ru(t).getRootNode()}scopeSubtree(t,e=!1){return function(t,e=!1){if(!uf||!lf)return null;if(!uf.handlesDynamicScoping)return null;const n=lf.ScopingShim;if(!n)return null;const r=n.scopeForNode(t),i=Ru(t).getRootNode(),o=t=>{if(!cf(t,i))return;const e=Array.from(uf.nativeMethods.querySelectorAll.call(t,"*"));e.push(t);for(let t=0;t<e.length;t++){const o=e[t];if(!cf(o,i))continue;const s=n.currentScopeForNode(o);s!==r&&(""!==s&&n.unscopeNode(o,s),n.scopeNode(o,r))}};if(o(t),e){const e=new MutationObserver(t=>{for(let e=0;e<t.length;e++){const n=t[e];for(let t=0;t<n.addedNodes.length;t++){const e=n.addedNodes[t];e.nodeType===Node.ELEMENT_NODE&&o(e)}}});return e.observe(t,{childList:!0,subtree:!0}),e}return null}(t,e)}getComputedStyleValue(t){return hf.getComputedStyleValue(this,t)}debounce(t,e,n){return this._debouncers=this._debouncers||{},this._debouncers[t]=Zl.debounce(this._debouncers[t],n>0?Zu.after(n):tl,e.bind(this))}isDebouncerActive(t){this._debouncers=this._debouncers||{};let e=this._debouncers[t];return!(!e||!e.isActive())}flushDebouncer(t){this._debouncers=this._debouncers||{};let e=this._debouncers[t];e&&e.flush()}cancelDebouncer(t){this._debouncers=this._debouncers||{};let e=this._debouncers[t];e&&e.cancel()}async(t,e){return e>0?Zu.run(t.bind(this),e):~tl.run(t.bind(this))}cancelAsync(t){t<0?tl.cancel(~t):Zu.cancel(t)}create(t,e){let n=document.createElement(t);if(e)if(n.setProperties)n.setProperties(e);else for(let t in e)n[t]=e[t];return n}elementMatches(t,e){return ef(e||this,t)}toggleAttribute(t,e){let n=this;return 3===arguments.length&&(n=arguments[2]),1==arguments.length&&(e=!n.hasAttribute(t)),e?(Ru(n).setAttribute(t,""),!0):(Ru(n).removeAttribute(t),!1)}toggleClass(t,e,n){n=n||this,1==arguments.length&&(e=!n.classList.contains(t)),e?n.classList.add(t):n.classList.remove(t)}transform(t,e){(e=e||this).style.webkitTransform=t,e.style.transform=t}translate3d(t,e,n,r){r=r||this,this.transform("translate3d("+t+","+e+","+n+")",r)}arrayDelete(t,e){let n;if(Array.isArray(t)){if((n=t.indexOf(e))>=0)return t.splice(n,1)}else{if((n=ju(this,t).indexOf(e))>=0)return this.splice(t,n,1)}return null}_logger(t,e){switch(Array.isArray(e)&&1===e.length&&Array.isArray(e[0])&&(e=e[0]),t){case"log":case"warn":case"error":console[t](...e)}}_log(...t){this._logger("log",t)}_warn(...t){this._logger("warn",t)}_error(...t){this._logger("error",t)}_logf(t,...e){return["[%s::%s]",this.is,t,...e]}}return r.prototype.is="",r}),df={attached:!0,detached:!0,ready:!0,created:!0,beforeRegister:!0,registered:!0,attributeChanged:!0,listeners:!0,hostAttributes:!0},pf={attached:!0,detached:!0,ready:!0,created:!0,beforeRegister:!0,registered:!0,attributeChanged:!0,behaviors:!0,_noAccessors:!0},_f=Object.assign({listeners:!0,hostAttributes:!0,properties:!0,observers:!0},pf);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/function yf(t,e,n,r){!function(t,e,n){const r=t._noAccessors,i=Object.getOwnPropertyNames(t);for(let o=0;o<i.length;o++){let s=i[o];if(!(s in n))if(r)e[s]=t[s];else{let n=Object.getOwnPropertyDescriptor(t,s);n&&(n.configurable=!0,Object.defineProperty(e,s,n))}}}(e,t,r);for(let t in df)e[t]&&(n[t]=n[t]||[],n[t].push(e[t]))}function mf(t,e){for(const n in e){const r=t[n],i=e[n];t[n]=!("value"in i)&&r&&"value"in r?Object.assign({value:r.value},i):i}}function gf(t,e,n){let r;const i={};class o extends e{static _finalizeClass(){if(this.hasOwnProperty(JSCompiler_renameProperty("generatedFrom",this))){if(r)for(let t,e=0;e<r.length;e++)(t=r[e]).properties&&this.createProperties(t.properties),t.observers&&this.createObservers(t.observers,t.properties);t.properties&&this.createProperties(t.properties),t.observers&&this.createObservers(t.observers,t.properties),this._prepareTemplate()}else e._finalizeClass.call(this)}static get properties(){const e={};if(r)for(let t=0;t<r.length;t++)mf(e,r[t].properties);return mf(e,t.properties),e}static get observers(){let e=[];if(r)for(let t,n=0;n<r.length;n++)(t=r[n]).observers&&(e=e.concat(t.observers));return t.observers&&(e=e.concat(t.observers)),e}created(){super.created();const t=i.created;if(t)for(let e=0;e<t.length;e++)t[e].call(this)}_registered(){const t=o.prototype;if(!t.hasOwnProperty(JSCompiler_renameProperty("__hasRegisterFinished",t))){t.__hasRegisterFinished=!0,super._registered(),tu&&s(t);const e=Object.getPrototypeOf(this);let n=i.beforeRegister;if(n)for(let t=0;t<n.length;t++)n[t].call(e);if(n=i.registered)for(let t=0;t<n.length;t++)n[t].call(e)}}_applyListeners(){super._applyListeners();const t=i.listeners;if(t)for(let e=0;e<t.length;e++){const n=t[e];if(n)for(let t in n)this._addMethodEventListenerToNode(this,t,n[t])}}_ensureAttributes(){const t=i.hostAttributes;if(t)for(let e=t.length-1;e>=0;e--){const n=t[e];for(let t in n)this._ensureAttribute(t,n[t])}super._ensureAttributes()}ready(){super.ready();let t=i.ready;if(t)for(let e=0;e<t.length;e++)t[e].call(this)}attached(){super.attached();let t=i.attached;if(t)for(let e=0;e<t.length;e++)t[e].call(this)}detached(){super.detached();let t=i.detached;if(t)for(let e=0;e<t.length;e++)t[e].call(this)}attributeChanged(t,e,n){super.attributeChanged();let r=i.attributeChanged;if(r)for(let i=0;i<r.length;i++)r[i].call(this,t,e,n)}}if(n){Array.isArray(n)||(n=[n]);let t=e.prototype.behaviors;r=function t(e,n,r){n=n||[];for(let i=e.length-1;i>=0;i--){let o=e[i];o?Array.isArray(o)?t(o,n):n.indexOf(o)<0&&(!r||r.indexOf(o)<0)&&n.unshift(o):console.warn("behavior is null, check for missing or 404 import")}return n}(n,null,t),o.prototype.behaviors=t?t.concat(n):r}const s=e=>{r&&function(t,e,n){for(let r=0;r<e.length;r++)yf(t,e[r],n,_f)}(e,r,i),yf(e,t,i,pf)};return tu||s(o.prototype),o.generatedFrom=t,o}const vf=function(t){let e;return e="function"==typeof t?t:vf.Class(t),customElements.define(e.is,e),e};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
function bf(t,e,n,r,i){let o;i&&(o="object"==typeof n&&null!==n)&&(r=t.__dataTemp[e]);let s=r!==n&&(r==r||n==n);return o&&s&&(t.__dataTemp[e]=n),s}vf.Class=function(t,e){t||console.warn("Polymer.Class requires `info` argument");let n=e?e(ff(HTMLElement)):ff(HTMLElement);return(n=gf(t,n,t.behaviors)).is=n.prototype.is=t.is,n};const wf=Iu(t=>{return class extends t{_shouldPropertyChange(t,e,n){return bf(this,t,e,n,!0)}}}),Ef=Iu(t=>{return class extends t{static get properties(){return{mutableData:Boolean}}_shouldPropertyChange(t,e,n){return bf(this,t,e,n,this.mutableData)}}});wf._mutablePropertyChange=bf;
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let Sf=null;function Af(){return Sf}Af.prototype=Object.create(HTMLTemplateElement.prototype,{constructor:{value:Af,writable:!0}});const Nf=Vl(Af),Tf=wf(Nf);const Of=Vl(class{});class Pf extends Of{constructor(t){super(),this._configureProperties(t),this.root=this._stampTemplate(this.__dataHost);let e=[];this.children=e;for(let t=this.root.firstChild;t;t=t.nextSibling)e.push(t),t.__templatizeInstance=this;this.__templatizeOwner&&this.__templatizeOwner.__hideTemplateChildren__&&this._showHideChildren(!0);let n=this.__templatizeOptions;(t&&n.instanceProps||!n.instanceProps)&&this._enableProperties()}_configureProperties(t){if(this.__templatizeOptions.forwardHostProp)for(let t in this.__hostProps)this._setPendingProperty(t,this.__dataHost["_host_"+t]);for(let e in t)this._setPendingProperty(e,t[e])}forwardHostProp(t,e){this._setPendingPropertyOrPath(t,e,!1,!0)&&this.__dataHost._enqueueClient(this)}_addEventListenerToNode(t,e,n){if(this._methodHost&&this.__templatizeOptions.parentModel)this._methodHost._addEventListenerToNode(t,e,t=>{t.model=this,n(t)});else{let r=this.__dataHost.__dataHost;r&&r._addEventListenerToNode(t,e,n)}}_showHideChildren(t){let e=this.children;for(let n=0;n<e.length;n++){let r=e[n];if(Boolean(t)!=Boolean(r.__hideTemplateChildren__))if(r.nodeType===Node.TEXT_NODE)t?(r.__polymerTextContent__=r.textContent,r.textContent=""):r.textContent=r.__polymerTextContent__;else if("slot"===r.localName)if(t)r.__polymerReplaced__=document.createComment("hidden-slot"),Ru(Ru(r).parentNode).replaceChild(r.__polymerReplaced__,r);else{const t=r.__polymerReplaced__;t&&Ru(Ru(t).parentNode).replaceChild(r,t)}else r.style&&(t?(r.__polymerDisplay__=r.style.display,r.style.display="none"):r.style.display=r.__polymerDisplay__);r.__hideTemplateChildren__=t,r._showHideChildren&&r._showHideChildren(t)}}_setUnmanagedPropertyToNode(t,e,n){t.__hideTemplateChildren__&&t.nodeType==Node.TEXT_NODE&&"textContent"==e?t.__polymerTextContent__=n:super._setUnmanagedPropertyToNode(t,e,n)}get parentModel(){let t=this.__parentModel;if(!t){let e;t=this;do{t=t.__dataHost.__dataHost}while((e=t.__templatizeOptions)&&!e.parentModel);this.__parentModel=t}return t}dispatchEvent(t){return!0}}Pf.prototype.__dataHost,Pf.prototype.__templatizeOptions,Pf.prototype._methodHost,Pf.prototype.__templatizeOwner,Pf.prototype.__hostProps;const Cf=wf(Pf);function xf(t){let e=t.__dataHost;return e&&e._methodHost||e}function If(t,e,n){let r=n.mutableData?Cf:Pf;Mf.mixin&&(r=Mf.mixin(r));let i=class extends r{};return i.prototype.__templatizeOptions=n,i.prototype._bindTemplate(t),function(t,e,n,r){let i=n.hostProps||{};for(let e in r.instanceProps){delete i[e];let n=r.notifyInstanceProp;n&&t.prototype._addPropertyEffect(e,t.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,{fn:Df(e,n)})}if(r.forwardHostProp&&e.__dataHost)for(let e in i)n.hasHostProps||(n.hasHostProps=!0),t.prototype._addPropertyEffect(e,t.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,{fn:function(t,e,n){t.__dataHost._setPendingPropertyOrPath("_host_"+e,n[e],!0,!0)}})}(i,t,e,n),i}function Rf(t,e,n){let r=n.forwardHostProp;if(r&&e.hasHostProps){let i=e.templatizeTemplateClass;if(!i){let t=n.mutableData?Tf:Nf;i=e.templatizeTemplateClass=class extends t{};let o=e.hostProps;for(let t in o)i.prototype._addPropertyEffect("_host_"+t,i.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,{fn:Bf(t,r)}),i.prototype._createNotifyingProperty("_host_"+t)}!function(t,e){Sf=t,Object.setPrototypeOf(t,e.prototype),new e,Sf=null}(t,i),t.__dataProto&&Object.assign(t.__data,t.__dataProto),t.__dataTemp={},t.__dataPending=null,t.__dataOld=null,t._enableProperties()}}function Bf(t,e){return function(t,n,r){e.call(t.__templatizeOwner,n.substring("_host_".length),r[n])}}function Df(t,e){return function(t,n,r){e.call(t.__templatizeOwner,t,n,r[n])}}function Mf(t,e,n){if(Za&&!xf(t))throw new Error("strictTemplatePolicy: template owner not trusted");if(n=n||{},t.__templatizeOwner)throw new Error("A <template> can only be templatized once");t.__templatizeOwner=e;let r=(e?e.constructor:Pf)._parseTemplate(t),i=r.templatizeInstanceClass;i||(i=If(t,r,n),r.templatizeInstanceClass=i),Rf(t,r,n);let o=class extends i{};return o.prototype._methodHost=xf(t),o.prototype.__dataHost=t,o.prototype.__templatizeOwner=e,o.prototype.__hostProps=r.hostProps,o=o}function Uf(t,e){let n;for(;e;)if(n=e.__templatizeInstance){if(n.__dataHost==t)return n;e=n.__dataHost}else e=Ru(e).parentNode;return null}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let kf=!1;function Lf(){if(tu&&!Ja){if(!kf){kf=!0;const t=document.createElement("style");t.textContent="dom-bind,dom-if,dom-repeat{display:none;}",document.head.appendChild(t)}return!0}return!1}
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const Ff=zc(Ef(Vl(HTMLElement)));customElements.define("dom-bind",class extends Ff{static get observedAttributes(){return["mutable-data"]}constructor(){if(super(),Za)throw new Error("strictTemplatePolicy: dom-bind not allowed");this.root=null,this.$=null,this.__children=null}attributeChangedCallback(t,e,n,r){this.mutableData=!0}connectedCallback(){Lf()||(this.style.display="none"),this.render()}disconnectedCallback(){this.__removeChildren()}__insertChildren(){Ru(Ru(this).parentNode).insertBefore(this.root,this)}__removeChildren(){if(this.__children)for(let t=0;t<this.__children.length;t++)this.root.appendChild(this.__children[t])}render(){let t;if(!this.__children){if(!(t=t||this.querySelector("template"))){let e=new MutationObserver(()=>{if(!(t=this.querySelector("template")))throw new Error("dom-bind requires a <template> child");e.disconnect(),this.render()});return void e.observe(this,{childList:!0})}this.root=this._stampTemplate(t),this.$=this.root.$,this.__children=[];for(let t=this.root.firstChild;t;t=t.nextSibling)this.__children[this.__children.length]=t;this._enableProperties()}this.__insertChildren(),this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0}))}});
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
const jf=Ef(Xl);class $f extends jf{static get is(){return"dom-repeat"}static get template(){return null}static get properties(){return{items:{type:Array},as:{type:String,value:"item"},indexAs:{type:String,value:"index"},itemsIndexAs:{type:String,value:"itemsIndex"},sort:{type:Function,observer:"__sortChanged"},filter:{type:Function,observer:"__filterChanged"},observe:{type:String,observer:"__observeChanged"},delay:Number,renderedItemCount:{type:Number,notify:!0,readOnly:!0},initialCount:{type:Number,observer:"__initializeChunking"},targetFramerate:{type:Number,value:20},_targetFrameTime:{type:Number,computed:"__computeFrameTime(targetFramerate)"}}}static get observers(){return["__itemsChanged(items.*)"]}constructor(){super(),this.__instances=[],this.__limit=1/0,this.__pool=[],this.__renderDebouncer=null,this.__itemsIdxToInstIdx={},this.__chunkCount=null,this.__lastChunkTime=null,this.__sortFn=null,this.__filterFn=null,this.__observePaths=null,this.__ctor=null,this.__isDetached=!0,this.template=null}disconnectedCallback(){super.disconnectedCallback(),this.__isDetached=!0;for(let t=0;t<this.__instances.length;t++)this.__detachInstance(t)}connectedCallback(){if(super.connectedCallback(),Lf()||(this.style.display="none"),this.__isDetached){this.__isDetached=!1;let t=Ru(Ru(this).parentNode);for(let e=0;e<this.__instances.length;e++)this.__attachInstance(e,t)}}__ensureTemplatized(){if(!this.__ctor){let t=this.template=this.querySelector("template");if(!t){let t=new MutationObserver(()=>{if(!this.querySelector("template"))throw new Error("dom-repeat requires a <template> child");t.disconnect(),this.__render()});return t.observe(this,{childList:!0}),!1}let e={};e[this.as]=!0,e[this.indexAs]=!0,e[this.itemsIndexAs]=!0,this.__ctor=Mf(t,this,{mutableData:this.mutableData,parentModel:!0,instanceProps:e,forwardHostProp:function(t,e){let n=this.__instances;for(let r,i=0;i<n.length&&(r=n[i]);i++)r.forwardHostProp(t,e)},notifyInstanceProp:function(t,e,n){if(function(t,e){return t===e||Mu(t,e)||Uu(t,e)}(this.as,e)){let r=t[this.itemsIndexAs];e==this.as&&(this.items[r]=n);let i=ku(this.as,`${JSCompiler_renameProperty("items",this)}.${r}`,e);this.notifyPath(i,n)}}})}return!0}__getMethodHost(){return this.__dataHost._methodHost||this.__dataHost}__functionFromPropertyValue(t){if("string"==typeof t){let e=t,n=this.__getMethodHost();return function(){return n[e].apply(n,arguments)}}return t}__sortChanged(t){this.__sortFn=this.__functionFromPropertyValue(t),this.items&&this.__debounceRender(this.__render)}__filterChanged(t){this.__filterFn=this.__functionFromPropertyValue(t),this.items&&this.__debounceRender(this.__render)}__computeFrameTime(t){return Math.ceil(1e3/t)}__initializeChunking(){this.initialCount&&(this.__limit=this.initialCount,this.__chunkCount=this.initialCount,this.__lastChunkTime=performance.now())}__tryRenderChunk(){this.items&&this.__limit<this.items.length&&this.__debounceRender(this.__requestRenderChunk)}__requestRenderChunk(){requestAnimationFrame(()=>this.__renderChunk())}__renderChunk(){let t=performance.now(),e=this._targetFrameTime/(t-this.__lastChunkTime);this.__chunkCount=Math.round(this.__chunkCount*e)||1,this.__limit+=this.__chunkCount,this.__lastChunkTime=t,this.__debounceRender(this.__render)}__observeChanged(){this.__observePaths=this.observe&&this.observe.replace(".*",".").split(" ")}__itemsChanged(t){this.items&&!Array.isArray(this.items)&&console.warn("dom-repeat expected array for `items`, found",this.items),this.__handleItemPath(t.path,t.value)||(this.__initializeChunking(),this.__debounceRender(this.__render))}__handleObservedPaths(t){if(this.__sortFn||this.__filterFn)if(t){if(this.__observePaths){let e=this.__observePaths;for(let n=0;n<e.length;n++)0===t.indexOf(e[n])&&this.__debounceRender(this.__render,this.delay)}}else this.__debounceRender(this.__render,this.delay)}__debounceRender(t,e=0){this.__renderDebouncer=Zl.debounce(this.__renderDebouncer,e>0?Zu.after(e):tl,t.bind(this)),tc(this.__renderDebouncer)}render(){this.__debounceRender(this.__render),Zh()}__render(){this.__ensureTemplatized()&&(this.__applyFullRefresh(),this.__pool.length=0,this._setRenderedItemCount(this.__instances.length),this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0})),this.__tryRenderChunk())}__applyFullRefresh(){let t=this.items||[],e=new Array(t.length);for(let n=0;n<t.length;n++)e[n]=n;this.__filterFn&&(e=e.filter((e,n,r)=>this.__filterFn(t[e],n,r))),this.__sortFn&&e.sort((e,n)=>this.__sortFn(t[e],t[n]));const n=this.__itemsIdxToInstIdx={};let r=0;const i=Math.min(e.length,this.__limit);for(;r<i;r++){let i=this.__instances[r],o=e[r],s=t[o];n[o]=r,i?(i._setPendingProperty(this.as,s),i._setPendingProperty(this.indexAs,r),i._setPendingProperty(this.itemsIndexAs,o),i._flushProperties()):this.__insertInstance(s,r,o)}for(let t=this.__instances.length-1;t>=r;t--)this.__detachAndRemoveInstance(t)}__detachInstance(t){let e=this.__instances[t];const n=Ru(e.root);for(let t=0;t<e.children.length;t++){let r=e.children[t];n.appendChild(r)}return e}__attachInstance(t,e){let n=this.__instances[t];e.insertBefore(n.root,this)}__detachAndRemoveInstance(t){let e=this.__detachInstance(t);e&&this.__pool.push(e),this.__instances.splice(t,1)}__stampInstance(t,e,n){let r={};return r[this.as]=t,r[this.indexAs]=e,r[this.itemsIndexAs]=n,new this.__ctor(r)}__insertInstance(t,e,n){let r=this.__pool.pop();r?(r._setPendingProperty(this.as,t),r._setPendingProperty(this.indexAs,e),r._setPendingProperty(this.itemsIndexAs,n),r._flushProperties()):r=this.__stampInstance(t,e,n);let i=this.__instances[e+1],o=i?i.children[0]:this;return Ru(Ru(this).parentNode).insertBefore(r.root,o),this.__instances[e]=r,r}_showHideChildren(t){for(let e=0;e<this.__instances.length;e++)this.__instances[e]._showHideChildren(t)}__handleItemPath(t,e){let n=t.slice(6),r=n.indexOf("."),i=r<0?n:n.substring(0,r);if(i==parseInt(i,10)){let t=r<0?"":n.substring(r+1);this.__handleObservedPaths(t);let o=this.__itemsIdxToInstIdx[i],s=this.__instances[o];if(s){let n=this.as+(t?"."+t:"");s._setPendingPropertyOrPath(n,e,!1,!0),s._flushProperties()}return!0}}itemForElement(t){let e=this.modelForElement(t);return e&&e[this.as]}indexForElement(t){let e=this.modelForElement(t);return e&&e[this.indexAs]}modelForElement(t){return Uf(this.template,t)}}customElements.define($f.is,$f);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
class zf extends Xl{static get is(){return"dom-if"}static get template(){return null}static get properties(){return{if:{type:Boolean,observer:"__debounceRender"},restamp:{type:Boolean,observer:"__debounceRender"}}}constructor(){super(),this.__renderDebouncer=null,this.__invalidProps=null,this.__instance=null,this._lastIf=!1,this.__ctor=null,this.__hideTemplateChildren__=!1}__debounceRender(){this.__renderDebouncer=Zl.debounce(this.__renderDebouncer,tl,()=>this.__render()),tc(this.__renderDebouncer)}disconnectedCallback(){super.disconnectedCallback();const t=Ru(this).parentNode;t&&(t.nodeType!=Node.DOCUMENT_FRAGMENT_NODE||Ru(t).host)||this.__teardownInstance()}connectedCallback(){super.connectedCallback(),Lf()||(this.style.display="none"),this.if&&this.__debounceRender()}render(){Zh()}__render(){if(this.if){if(!this.__ensureInstance())return;this._showHideChildren()}else this.restamp&&this.__teardownInstance();!this.restamp&&this.__instance&&this._showHideChildren(),this.if!=this._lastIf&&(this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0})),this._lastIf=this.if)}__ensureInstance(){let t=Ru(this).parentNode;if(t){if(!this.__ctor){let t=Ru(this).querySelector("template");if(!t){let t=new MutationObserver(()=>{if(!Ru(this).querySelector("template"))throw new Error("dom-if requires a <template> child");t.disconnect(),this.__render()});return t.observe(this,{childList:!0}),!1}this.__ctor=Mf(t,this,{mutableData:!0,forwardHostProp:function(t,e){this.__instance&&(this.if?this.__instance.forwardHostProp(t,e):(this.__invalidProps=this.__invalidProps||Object.create(null),this.__invalidProps[Du(t)]=!0))}})}if(this.__instance){this.__syncHostProperties();let e=this.__instance.children;if(e&&e.length){if(Ru(this).previousSibling!==e[e.length-1])for(let n,r=0;r<e.length&&(n=e[r]);r++)Ru(t).insertBefore(n,this)}}else this.__instance=new this.__ctor,Ru(t).insertBefore(this.__instance.root,this)}return!0}__syncHostProperties(){let t=this.__invalidProps;if(t){for(let e in t)this.__instance._setPendingProperty(e,this.__dataHost[e]);this.__invalidProps=null,this.__instance._flushProperties()}}__teardownInstance(){if(this.__instance){let t=this.__instance.children;if(t&&t.length){let e=Ru(t[0]).parentNode;if(e){e=Ru(e);for(let n,r=0;r<t.length&&(n=t[r]);r++)e.removeChild(n)}}this.__instance=null,this.__invalidProps=null}}_showHideChildren(){let t=this.__hideTemplateChildren__||!this.if;this.__instance&&this.__instance._showHideChildren(t)}}customElements.define(zf.is,zf);
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
let Yf,Vf=Iu(t=>{let e=Gl(t);return class extends e{static get properties(){return{items:{type:Array},multi:{type:Boolean,value:!1},selected:{type:Object,notify:!0},selectedItem:{type:Object,notify:!0},toggle:{type:Boolean,value:!1}}}static get observers(){return["__updateSelection(multi, items.*)"]}constructor(){super(),this.__lastItems=null,this.__lastMulti=null,this.__selectedMap=null}__updateSelection(t,e){let n=e.path;if(n==JSCompiler_renameProperty("items",this)){let n=e.base||[],r=this.__lastItems;if(t!==this.__lastMulti&&this.clearSelection(),r){let t=Kc(n,r);this.__applySplices(t)}this.__lastItems=n,this.__lastMulti=t}else if(e.path==`${JSCompiler_renameProperty("items",this)}.splices`)this.__applySplices(e.value.indexSplices);else{let t=n.slice(`${JSCompiler_renameProperty("items",this)}.`.length),e=parseInt(t,10);t.indexOf(".")<0&&t==e&&this.__deselectChangedIdx(e)}}__applySplices(t){let e=this.__selectedMap;for(let n=0;n<t.length;n++){let r=t[n];e.forEach((t,n)=>{t<r.index||(t>=r.index+r.removed.length?e.set(n,t+r.addedCount-r.removed.length):e.set(n,-1))});for(let t=0;t<r.addedCount;t++){let n=r.index+t;e.has(this.items[n])&&e.set(this.items[n],n)}}this.__updateLinks();let n=0;e.forEach((t,r)=>{t<0?(this.multi?this.splice(JSCompiler_renameProperty("selected",this),n,1):this.selected=this.selectedItem=null,e.delete(r)):n++})}__updateLinks(){if(this.__dataLinkedPaths={},this.multi){let t=0;this.__selectedMap.forEach(e=>{e>=0&&this.linkPaths(`${JSCompiler_renameProperty("items",this)}.${e}`,`${JSCompiler_renameProperty("selected",this)}.${t++}`)})}else this.__selectedMap.forEach(t=>{this.linkPaths(JSCompiler_renameProperty("selected",this),`${JSCompiler_renameProperty("items",this)}.${t}`),this.linkPaths(JSCompiler_renameProperty("selectedItem",this),`${JSCompiler_renameProperty("items",this)}.${t}`)})}clearSelection(){this.__dataLinkedPaths={},this.__selectedMap=new Map,this.selected=this.multi?[]:null,this.selectedItem=null}isSelected(t){return this.__selectedMap.has(t)}isIndexSelected(t){return this.isSelected(this.items[t])}__deselectChangedIdx(t){let e=this.__selectedIndexForItemIndex(t);if(e>=0){let t=0;this.__selectedMap.forEach((n,r)=>{e==t++&&this.deselect(r)})}}__selectedIndexForItemIndex(t){let e=this.__dataLinkedPaths[`${JSCompiler_renameProperty("items",this)}.${t}`];if(e)return parseInt(e.slice(`${JSCompiler_renameProperty("selected",this)}.`.length),10)}deselect(t){let e=this.__selectedMap.get(t);if(e>=0){let n;this.__selectedMap.delete(t),this.multi&&(n=this.__selectedIndexForItemIndex(e)),this.__updateLinks(),this.multi?this.splice(JSCompiler_renameProperty("selected",this),n,1):this.selected=this.selectedItem=null}}deselectIndex(t){this.deselect(this.items[t])}select(t){this.selectIndex(this.items.indexOf(t))}selectIndex(t){let e=this.items[t];this.isSelected(e)?this.toggle&&this.deselectIndex(t):(this.multi||this.__selectedMap.clear(),this.__selectedMap.set(e,t),this.__updateLinks(),this.multi?this.push(JSCompiler_renameProperty("selected",this),e):this.selected=this.selectedItem=e)}}})(Xl);class qf extends Vf{static get is(){return"array-selector"}static get template(){return null}}customElements.define(qf.is,qf),Yf=wf._mutablePropertyChange;Boolean,ff(HTMLElement).prototype;
/**
@license
Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
var Hf=new Set;const Wf={properties:{_parentResizable:{type:Object,observer:"_parentResizableChanged"},_notifyingDescendant:{type:Boolean,value:!1}},listeners:{"iron-request-resize-notifications":"_onIronRequestResizeNotifications"},created:function(){this._interestedResizables=[],this._boundNotifyResize=this.notifyResize.bind(this),this._boundOnDescendantIronResize=this._onDescendantIronResize.bind(this)},attached:function(){this._requestResizeNotifications()},detached:function(){this._parentResizable?this._parentResizable.stopResizeNotificationsFor(this):(Hf.delete(this),window.removeEventListener("resize",this._boundNotifyResize)),this._parentResizable=null},notifyResize:function(){this.isAttached&&(this._interestedResizables.forEach(function(t){this.resizerShouldNotify(t)&&this._notifyDescendant(t)},this),this._fireResize())},assignParentResizable:function(t){this._parentResizable&&this._parentResizable.stopResizeNotificationsFor(this),this._parentResizable=t,t&&-1===t._interestedResizables.indexOf(this)&&(t._interestedResizables.push(this),t._subscribeIronResize(this))},stopResizeNotificationsFor:function(t){var e=this._interestedResizables.indexOf(t);e>-1&&(this._interestedResizables.splice(e,1),this._unsubscribeIronResize(t))},_subscribeIronResize:function(t){t.addEventListener("iron-resize",this._boundOnDescendantIronResize)},_unsubscribeIronResize:function(t){t.removeEventListener("iron-resize",this._boundOnDescendantIronResize)},resizerShouldNotify:function(t){return!0},_onDescendantIronResize:function(t){this._notifyingDescendant?t.stopPropagation():Ja||this._fireResize()},_fireResize:function(){this.fire("iron-resize",null,{node:this,bubbles:!1})},_onIronRequestResizeNotifications:function(t){var e=af(t).rootTarget;e!==this&&(e.assignParentResizable(this),this._notifyDescendant(e),t.stopPropagation())},_parentResizableChanged:function(t){t&&window.removeEventListener("resize",this._boundNotifyResize)},_notifyDescendant:function(t){this.isAttached&&(this._notifyingDescendant=!0,t.notifyResize(),this._notifyingDescendant=!1)},_requestResizeNotifications:function(){if(this.isAttached)if("loading"===document.readyState){var t=this._requestResizeNotifications.bind(this);document.addEventListener("readystatechange",function e(){document.removeEventListener("readystatechange",e),t()})}else this._findParent(),this._parentResizable?this._parentResizable._interestedResizables.forEach(function(t){t!==this&&t._findParent()},this):(Hf.forEach(function(t){t!==this&&t._findParent()},this),window.addEventListener("resize",this._boundNotifyResize),this.notifyResize())},_findParent:function(){this.assignParentResizable(null),this.fire("iron-request-resize-notifications",null,{node:this,bubbles:!0,cancelable:!0}),this._parentResizable?Hf.delete(this):Hf.add(this)}},Jf=t=>(class extends t{static get properties(){return{theme:{type:String,readOnly:!0}}}attributeChangedCallback(t,e,n){super.attributeChangedCallback(t,e,n),"theme"===t&&this._setTheme(n)}}),Kf=t=>(class extends(Jf(t)){static finalize(){super.finalize();const t=this.prototype._template,e=this.template&&this.template.parentElement&&this.template.parentElement.id===this.is,n=Object.getPrototypeOf(this.prototype)._template;n&&!e&&Array.from(n.content.querySelectorAll("style[include]")).forEach(e=>{this._includeStyle(e.getAttribute("include"),t)}),this._includeMatchingThemes(t)}static _includeMatchingThemes(t){const e=au.prototype.modules;let n=!1;const r=this.is+"-default-theme";Object.keys(e).sort((t,e)=>{const n=0===t.indexOf("vaadin-"),r=0===e.indexOf("vaadin-"),i=["lumo-","material-"],o=i.filter(e=>0===t.indexOf(e)).length>0,s=i.filter(t=>0===e.indexOf(t)).length>0;return n!==r?n?-1:1:o!==s?o?-1:1:0}).forEach(i=>{if(i!==r){const r=e[i].getAttribute("theme-for");r&&r.split(" ").forEach(e=>{new RegExp("^"+e.split("*").join(".*")+"$").test(this.is)&&(n=!0,this._includeStyle(i,t))})}}),!n&&e[r]&&this._includeStyle(r,t)}static _includeStyle(t,e){if(e&&!e.content.querySelector(`style[include="${t}"]`)){const n=document.createElement("style");n.setAttribute("include",t),e.content.appendChild(n)}}}),Gf=/\/\*\*\s+vaadin-dev-mode:start([\s\S]*)vaadin-dev-mode:end\s+\*\*\//i,Xf=window.Vaadin&&window.Vaadin.Flow&&window.Vaadin.Flow.clients;function Zf(t,e){if("function"!=typeof t)return;const n=Gf.exec(t.toString());if(n)try{t=new Function(n[1])}catch(t){console.log("vaadin-development-mode-detector: uncommentAndRun() failed",t)}return t(e)}window.Vaadin=window.Vaadin||{};const Qf=function(t,e){if(window.Vaadin.developmentMode)return Zf(t,e)};function td(){}void 0===window.Vaadin.developmentMode&&(window.Vaadin.developmentMode=function(){try{return!!localStorage.getItem("vaadin.developmentmode.force")||["localhost","127.0.0.1"].indexOf(window.location.hostname)>=0&&(Xf?!function(){if(Xf){const t=Object.keys(Xf).map(t=>Xf[t]).filter(t=>t.productionMode);if(t.length>0)return!0}return!1}():!Zf(function(){return!0}))}catch(t){return!1}}());const ed=function(){return Qf(td)};let nd;window.Vaadin||(window.Vaadin={}),window.Vaadin.registrations=window.Vaadin.registrations||[],window.Vaadin.developmentModeCallback=window.Vaadin.developmentModeCallback||{},window.Vaadin.developmentModeCallback["vaadin-usage-statistics"]=function(){ed&&ed()};const rd=new Set,id=t=>(class extends t{static finalize(){super.finalize();const{is:t}=this;t&&!rd.has(t)&&(window.Vaadin.registrations.push(this),rd.add(t),window.Vaadin.developmentModeCallback&&(nd=Zl.debounce(nd,Qu,()=>{window.Vaadin.developmentModeCallback["vaadin-usage-statistics"]()}),tc(nd)))}constructor(){super(),null===document.doctype&&console.warn('Vaadin components require the "standards mode" declaration. Please add <!DOCTYPE html> to the HTML document.')}});
/**
@license
Copyright (c) 2016 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/
class od extends(id(Kf(zc(function(t,e){return gf({},ff(e),t)}([Wf],Xl))))){static get template(){return Ou`
    <style>
      :host {
        display: flex;
        overflow: hidden !important;
        transform: translateZ(0);
      }

      :host([hidden]) {
        display: none !important;
      }

      :host([orientation="vertical"]) {
        flex-direction: column;
      }

      :host ::slotted(*) {
        flex: 1 1 auto;
        overflow: auto;
        -webkit-overflow-scrolling: touch;
      }

      [part="splitter"] {
        flex: none;
        position: relative;
        z-index: 1;
        overflow: visible;
        min-width: 8px;
        min-height: 8px;
      }

      :host(:not([orientation="vertical"])) > [part="splitter"] {
        cursor: ew-resize;
      }

      :host([orientation="vertical"]) > [part="splitter"] {
        cursor: ns-resize;
      }

      [part="handle"] {
        width: 40px;
        height: 40px;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate3d(-50%, -50%, 0);
      }
    </style>
    <slot id="primary" name="primary"></slot>
    <div part="splitter" id="splitter" on-track="_onHandleTrack" on-down="_setPointerEventsNone" on-up="_restorePointerEvents">
      <div part="handle"></div>
    </div>
    <slot id="secondary" name="secondary"></slot>

    <div hidden="">
      <!-- Workaround to fix a Shady style scoping issue caused by dynamic slot naming of the child elements (primary/secondary) -->
      <slot></slot>
    </div>
`}static get is(){return"vaadin-split-layout"}static get version(){return"4.1.1"}static get properties(){return{orientation:{type:String,reflectToAttribute:!0,value:"horizontal"},_previousPrimaryPointerEvents:String,_previousSecondaryPointerEvents:String}}ready(){super.ready(),new Zc(this,this._processChildren)}_processChildren(){this.getEffectiveChildren().forEach((t,e)=>{0===e?(this._primaryChild=t,t.setAttribute("slot","primary")):1==e?(this._secondaryChild=t,t.setAttribute("slot","secondary")):t.removeAttribute("slot")})}_setFlexBasis(t,e,n){0===(e=Math.max(0,Math.min(e,n)))&&(e=1e-6),t.style.flex="1 1 "+e+"px"}_setPointerEventsNone(t){this._primaryChild&&this._secondaryChild&&(this._previousPrimaryPointerEvents=this._primaryChild.style.pointerEvents,this._previousSecondaryPointerEvents=this._secondaryChild.style.pointerEvents,this._primaryChild.style.pointerEvents="none",this._secondaryChild.style.pointerEvents="none",t.preventDefault())}_restorePointerEvents(){this._primaryChild&&this._secondaryChild&&(this._primaryChild.style.pointerEvents=this._previousPrimaryPointerEvents,this._secondaryChild.style.pointerEvents=this._previousSecondaryPointerEvents)}_onHandleTrack(t){if(this._primaryChild&&this._secondaryChild){var e="vertical"===this.orientation?"height":"width";if("start"!==t.detail.state){var n="vertical"===this.orientation?t.detail.dy:t.detail.dx;this._setFlexBasis(this._primaryChild,this._startSize.primary+n,this._startSize.container),this._setFlexBasis(this._secondaryChild,this._startSize.secondary-n,this._startSize.container),this.notifyResize(),"end"===t.detail.state&&(this.dispatchEvent(new CustomEvent("splitter-dragend")),delete this._startSize)}else this._startSize={container:this.getBoundingClientRect()[e]-this.$.splitter.getBoundingClientRect()[e],primary:this._primaryChild.getBoundingClientRect()[e],secondary:this._secondaryChild.getBoundingClientRect()[e]}}}}customElements.define(od.is,od);const{Stitch:sd,RemoteMongoClient:ad,AnonymousCredential:ud}=n(75);var ld=sd.initializeDefaultAppClient("antidecubitus-uicqs");
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const cd=new WeakMap,hd=t=>"function"==typeof t&&cd.has(t),fd=void 0!==window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,dd=(t,e,n=null)=>{for(;e!==n;){const n=e.nextSibling;t.removeChild(e),e=n}},pd={},_d={},yd=`{{lit-${String(Math.random()).slice(2)}}}`,md=`\x3c!--${yd}--\x3e`,gd=new RegExp(`${yd}|${md}`),vd="$lit$";class bd{constructor(t,e){this.parts=[],this.element=e;const n=[],r=[],i=document.createTreeWalker(e.content,133,null,!1);let o=0,s=-1,a=0;const{strings:u,values:{length:l}}=t;for(;a<l;){const t=i.nextNode();if(null!==t){if(s++,1===t.nodeType){if(t.hasAttributes()){const e=t.attributes,{length:n}=e;let r=0;for(let t=0;t<n;t++)wd(e[t].name,vd)&&r++;for(;r-- >0;){const e=u[a],n=Ad.exec(e)[2],r=n.toLowerCase()+vd,i=t.getAttribute(r);t.removeAttribute(r);const o=i.split(gd);this.parts.push({type:"attribute",index:s,name:n,strings:o}),a+=o.length-1}}"TEMPLATE"===t.tagName&&(r.push(t),i.currentNode=t.content)}else if(3===t.nodeType){const e=t.data;if(e.indexOf(yd)>=0){const r=t.parentNode,i=e.split(gd),o=i.length-1;for(let e=0;e<o;e++){let n,o=i[e];if(""===o)n=Sd();else{const t=Ad.exec(o);null!==t&&wd(t[2],vd)&&(o=o.slice(0,t.index)+t[1]+t[2].slice(0,-vd.length)+t[3]),n=document.createTextNode(o)}r.insertBefore(n,t),this.parts.push({type:"node",index:++s})}""===i[o]?(r.insertBefore(Sd(),t),n.push(t)):t.data=i[o],a+=o}}else if(8===t.nodeType)if(t.data===yd){const e=t.parentNode;null!==t.previousSibling&&s!==o||(s++,e.insertBefore(Sd(),t)),o=s,this.parts.push({type:"node",index:s}),null===t.nextSibling?t.data="":(n.push(t),s--),a++}else{let e=-1;for(;-1!==(e=t.data.indexOf(yd,e+1));)this.parts.push({type:"node",index:-1}),a++}}else i.currentNode=r.pop()}for(const t of n)t.parentNode.removeChild(t)}}const wd=(t,e)=>{const n=t.length-e.length;return n>=0&&t.slice(n)===e},Ed=t=>-1!==t.index,Sd=()=>document.createComment(""),Ad=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class Nd{constructor(t,e,n){this.__parts=[],this.template=t,this.processor=e,this.options=n}update(t){let e=0;for(const n of this.__parts)void 0!==n&&n.setValue(t[e]),e++;for(const t of this.__parts)void 0!==t&&t.commit()}_clone(){const t=fd?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),e=[],n=this.template.parts,r=document.createTreeWalker(t,133,null,!1);let i,o=0,s=0,a=r.nextNode();for(;o<n.length;)if(i=n[o],Ed(i)){for(;s<i.index;)s++,"TEMPLATE"===a.nodeName&&(e.push(a),r.currentNode=a.content),null===(a=r.nextNode())&&(r.currentNode=e.pop(),a=r.nextNode());if("node"===i.type){const t=this.processor.handleTextExpression(this.options);t.insertAfterNode(a.previousSibling),this.__parts.push(t)}else this.__parts.push(...this.processor.handleAttributeExpressions(a,i.name,i.strings,this.options));o++}else this.__parts.push(void 0),o++;return fd&&(document.adoptNode(t),customElements.upgrade(t)),t}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const Td=` ${yd} `;class Od{constructor(t,e,n,r){this.strings=t,this.values=e,this.type=n,this.processor=r}getHTML(){const t=this.strings.length-1;let e="",n=!1;for(let r=0;r<t;r++){const t=this.strings[r],i=t.lastIndexOf("\x3c!--");n=(i>-1||n)&&-1===t.indexOf("--\x3e",i+1);const o=Ad.exec(t);e+=null===o?t+(n?Td:md):t.substr(0,o.index)+o[1]+o[2]+vd+o[3]+yd}return e+=this.strings[t]}getTemplateElement(){const t=document.createElement("template");return t.innerHTML=this.getHTML(),t}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const Pd=t=>null===t||!("object"==typeof t||"function"==typeof t),Cd=t=>Array.isArray(t)||!(!t||!t[Symbol.iterator]);class xd{constructor(t,e,n){this.dirty=!0,this.element=t,this.name=e,this.strings=n,this.parts=[];for(let t=0;t<n.length-1;t++)this.parts[t]=this._createPart()}_createPart(){return new Id(this)}_getValue(){const t=this.strings,e=t.length-1;let n="";for(let r=0;r<e;r++){n+=t[r];const e=this.parts[r];if(void 0!==e){const t=e.value;if(Pd(t)||!Cd(t))n+="string"==typeof t?t:String(t);else for(const e of t)n+="string"==typeof e?e:String(e)}}return n+=t[e]}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class Id{constructor(t){this.value=void 0,this.committer=t}setValue(t){t===pd||Pd(t)&&t===this.value||(this.value=t,hd(t)||(this.committer.dirty=!0))}commit(){for(;hd(this.value);){const t=this.value;this.value=pd,t(this)}this.value!==pd&&this.committer.commit()}}class Rd{constructor(t){this.value=void 0,this.__pendingValue=void 0,this.options=t}appendInto(t){this.startNode=t.appendChild(Sd()),this.endNode=t.appendChild(Sd())}insertAfterNode(t){this.startNode=t,this.endNode=t.nextSibling}appendIntoPart(t){t.__insert(this.startNode=Sd()),t.__insert(this.endNode=Sd())}insertAfterPart(t){t.__insert(this.startNode=Sd()),this.endNode=t.endNode,t.endNode=this.startNode}setValue(t){this.__pendingValue=t}commit(){for(;hd(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=pd,t(this)}const t=this.__pendingValue;t!==pd&&(Pd(t)?t!==this.value&&this.__commitText(t):t instanceof Od?this.__commitTemplateResult(t):t instanceof Node?this.__commitNode(t):Cd(t)?this.__commitIterable(t):t===_d?(this.value=_d,this.clear()):this.__commitText(t))}__insert(t){this.endNode.parentNode.insertBefore(t,this.endNode)}__commitNode(t){this.value!==t&&(this.clear(),this.__insert(t),this.value=t)}__commitText(t){const e=this.startNode.nextSibling,n="string"==typeof(t=null==t?"":t)?t:String(t);e===this.endNode.previousSibling&&3===e.nodeType?e.data=n:this.__commitNode(document.createTextNode(n)),this.value=t}__commitTemplateResult(t){const e=this.options.templateFactory(t);if(this.value instanceof Nd&&this.value.template===e)this.value.update(t.values);else{const n=new Nd(e,t.processor,this.options),r=n._clone();n.update(t.values),this.__commitNode(r),this.value=n}}__commitIterable(t){Array.isArray(this.value)||(this.value=[],this.clear());const e=this.value;let n,r=0;for(const i of t)void 0===(n=e[r])&&(n=new Rd(this.options),e.push(n),0===r?n.appendIntoPart(this):n.insertAfterPart(e[r-1])),n.setValue(i),n.commit(),r++;r<e.length&&(e.length=r,this.clear(n&&n.endNode))}clear(t=this.startNode){dd(this.startNode.parentNode,t.nextSibling,this.endNode)}}class Bd{constructor(t,e,n){if(this.value=void 0,this.__pendingValue=void 0,2!==n.length||""!==n[0]||""!==n[1])throw new Error("Boolean attributes can only contain a single expression");this.element=t,this.name=e,this.strings=n}setValue(t){this.__pendingValue=t}commit(){for(;hd(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=pd,t(this)}if(this.__pendingValue===pd)return;const t=!!this.__pendingValue;this.value!==t&&(t?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=t),this.__pendingValue=pd}}class Dd extends xd{constructor(t,e,n){super(t,e,n),this.single=2===n.length&&""===n[0]&&""===n[1]}_createPart(){return new Md(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class Md extends Id{}let Ud=!1;try{const t={get capture(){return Ud=!0,!1}};window.addEventListener("test",t,t),window.removeEventListener("test",t,t)}catch(t){}class kd{constructor(t,e,n){this.value=void 0,this.__pendingValue=void 0,this.element=t,this.eventName=e,this.eventContext=n,this.__boundHandleEvent=(t=>this.handleEvent(t))}setValue(t){this.__pendingValue=t}commit(){for(;hd(this.__pendingValue);){const t=this.__pendingValue;this.__pendingValue=pd,t(this)}if(this.__pendingValue===pd)return;const t=this.__pendingValue,e=this.value,n=null==t||null!=e&&(t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive),r=null!=t&&(null==e||n);n&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),r&&(this.__options=Ld(t),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=t,this.__pendingValue=pd}handleEvent(t){"function"==typeof this.value?this.value.call(this.eventContext||this.element,t):this.value.handleEvent(t)}}const Ld=t=>t&&(Ud?{capture:t.capture,passive:t.passive,once:t.once}:t.capture);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const Fd=new class{handleAttributeExpressions(t,e,n,r){const i=e[0];return"."===i?new Dd(t,e.slice(1),n).parts:"@"===i?[new kd(t,e.slice(1),r.eventContext)]:"?"===i?[new Bd(t,e.slice(1),n)]:new xd(t,e,n).parts}handleTextExpression(t){return new Rd(t)}};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */function jd(t){let e=$d.get(t.type);void 0===e&&(e={stringsArray:new WeakMap,keyString:new Map},$d.set(t.type,e));let n=e.stringsArray.get(t.strings);if(void 0!==n)return n;const r=t.strings.join(yd);return void 0===(n=e.keyString.get(r))&&(n=new bd(t,t.getTemplateElement()),e.keyString.set(r,n)),e.stringsArray.set(t.strings,n),n}const $d=new Map,zd=new WeakMap;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.1.2");const Yd=(t,...e)=>new Od(t,e,"html",Fd),Vd=133;function qd(t,e){const{element:{content:n},parts:r}=t,i=document.createTreeWalker(n,Vd,null,!1);let o=Wd(r),s=r[o],a=-1,u=0;const l=[];let c=null;for(;i.nextNode();){a++;const t=i.currentNode;for(t.previousSibling===c&&(c=null),e.has(t)&&(l.push(t),null===c&&(c=t)),null!==c&&u++;void 0!==s&&s.index===a;)s.index=null!==c?-1:s.index-u,s=r[o=Wd(r,o)]}l.forEach(t=>t.parentNode.removeChild(t))}const Hd=t=>{let e=11===t.nodeType?0:1;const n=document.createTreeWalker(t,Vd,null,!1);for(;n.nextNode();)e++;return e},Wd=(t,e=-1)=>{for(let n=e+1;n<t.length;n++){const e=t[n];if(Ed(e))return n}return-1};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const Jd=(t,e)=>`${t}--${e}`;let Kd=!0;void 0===window.ShadyCSS?Kd=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1."),Kd=!1);const Gd=["html","svg"],Xd=new Set,Zd=(t,e,n)=>{Xd.add(t);const r=n?n.element:document.createElement("template"),i=e.querySelectorAll("style"),{length:o}=i;if(0===o)return void window.ShadyCSS.prepareTemplateStyles(r,t);const s=document.createElement("style");for(let t=0;t<o;t++){const e=i[t];e.parentNode.removeChild(e),s.textContent+=e.textContent}(t=>{Gd.forEach(e=>{const n=$d.get(Jd(e,t));void 0!==n&&n.keyString.forEach(t=>{const{element:{content:e}}=t,n=new Set;Array.from(e.querySelectorAll("style")).forEach(t=>{n.add(t)}),qd(t,n)})})})(t);const a=r.content;n?function(t,e,n=null){const{element:{content:r},parts:i}=t;if(null===n||void 0===n)return void r.appendChild(e);const o=document.createTreeWalker(r,Vd,null,!1);let s=Wd(i),a=0,u=-1;for(;o.nextNode();)for(u++,o.currentNode===n&&(a=Hd(e),n.parentNode.insertBefore(e,n));-1!==s&&i[s].index===u;){if(a>0){for(;-1!==s;)i[s].index+=a,s=Wd(i,s);return}s=Wd(i,s)}}(n,s,a.firstChild):a.insertBefore(s,a.firstChild),window.ShadyCSS.prepareTemplateStyles(r,t);const u=a.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==u)e.insertBefore(u.cloneNode(!0),e.firstChild);else if(n){a.insertBefore(s,a.firstChild);const t=new Set;t.add(s),qd(n,t)}};window.JSCompiler_renameProperty=((t,e)=>t);const Qd={toAttribute(t,e){switch(e){case Boolean:return t?"":null;case Object:case Array:return null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){switch(e){case Boolean:return null!==t;case Number:return null===t?null:Number(t);case Object:case Array:return JSON.parse(t)}return t}},tp=(t,e)=>e!==t&&(e==e||t==t),ep={attribute:!0,type:String,converter:Qd,reflect:!1,hasChanged:tp},np=Promise.resolve(!0),rp=1,ip=4,op=8,sp=16,ap=32,up="finalized";class lp extends HTMLElement{constructor(){super(),this._updateState=0,this._instanceProperties=void 0,this._updatePromise=np,this._hasConnectedResolver=void 0,this._changedProperties=new Map,this._reflectingProperties=void 0,this.initialize()}static get observedAttributes(){this.finalize();const t=[];return this._classProperties.forEach((e,n)=>{const r=this._attributeNameForProperty(n,e);void 0!==r&&(this._attributeToPropertyMap.set(r,n),t.push(r))}),t}static _ensureClassProperties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;const t=Object.getPrototypeOf(this)._classProperties;void 0!==t&&t.forEach((t,e)=>this._classProperties.set(e,t))}}static createProperty(t,e=ep){if(this._ensureClassProperties(),this._classProperties.set(t,e),e.noAccessor||this.prototype.hasOwnProperty(t))return;const n="symbol"==typeof t?Symbol():`__${t}`;Object.defineProperty(this.prototype,t,{get(){return this[n]},set(e){const r=this[t];this[n]=e,this._requestUpdate(t,r)},configurable:!0,enumerable:!0})}static finalize(){const t=Object.getPrototypeOf(this);if(t.hasOwnProperty(up)||t.finalize(),this[up]=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){const t=this.properties,e=[...Object.getOwnPropertyNames(t),..."function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t):[]];for(const n of e)this.createProperty(n,t[n])}}static _attributeNameForProperty(t,e){const n=e.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof t?t.toLowerCase():void 0}static _valueHasChanged(t,e,n=tp){return n(t,e)}static _propertyValueFromAttribute(t,e){const n=e.type,r=e.converter||Qd,i="function"==typeof r?r:r.fromAttribute;return i?i(t,n):t}static _propertyValueToAttribute(t,e){if(void 0===e.reflect)return;const n=e.type,r=e.converter;return(r&&r.toAttribute||Qd.toAttribute)(t,n)}initialize(){this._saveInstanceProperties(),this._requestUpdate()}_saveInstanceProperties(){this.constructor._classProperties.forEach((t,e)=>{if(this.hasOwnProperty(e)){const t=this[e];delete this[e],this._instanceProperties||(this._instanceProperties=new Map),this._instanceProperties.set(e,t)}})}_applyInstanceProperties(){this._instanceProperties.forEach((t,e)=>this[e]=t),this._instanceProperties=void 0}connectedCallback(){this._updateState=this._updateState|ap,this._hasConnectedResolver&&(this._hasConnectedResolver(),this._hasConnectedResolver=void 0)}disconnectedCallback(){}attributeChangedCallback(t,e,n){e!==n&&this._attributeToProperty(t,n)}_propertyToAttribute(t,e,n=ep){const r=this.constructor,i=r._attributeNameForProperty(t,n);if(void 0!==i){const t=r._propertyValueToAttribute(e,n);if(void 0===t)return;this._updateState=this._updateState|op,null==t?this.removeAttribute(i):this.setAttribute(i,t),this._updateState=this._updateState&~op}}_attributeToProperty(t,e){if(this._updateState&op)return;const n=this.constructor,r=n._attributeToPropertyMap.get(t);if(void 0!==r){const t=n._classProperties.get(r)||ep;this._updateState=this._updateState|sp,this[r]=n._propertyValueFromAttribute(e,t),this._updateState=this._updateState&~sp}}_requestUpdate(t,e){let n=!0;if(void 0!==t){const r=this.constructor,i=r._classProperties.get(t)||ep;r._valueHasChanged(this[t],e,i.hasChanged)?(this._changedProperties.has(t)||this._changedProperties.set(t,e),!0!==i.reflect||this._updateState&sp||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(t,i))):n=!1}!this._hasRequestedUpdate&&n&&this._enqueueUpdate()}requestUpdate(t,e){return this._requestUpdate(t,e),this.updateComplete}async _enqueueUpdate(){let t,e;this._updateState=this._updateState|ip;const n=this._updatePromise;this._updatePromise=new Promise((n,r)=>{t=n,e=r});try{await n}catch(t){}this._hasConnected||await new Promise(t=>this._hasConnectedResolver=t);try{const t=this.performUpdate();null!=t&&await t}catch(t){e(t)}t(!this._hasRequestedUpdate)}get _hasConnected(){return this._updateState&ap}get _hasRequestedUpdate(){return this._updateState&ip}get hasUpdated(){return this._updateState&rp}performUpdate(){this._instanceProperties&&this._applyInstanceProperties();let t=!1;const e=this._changedProperties;try{(t=this.shouldUpdate(e))&&this.update(e)}catch(e){throw t=!1,e}finally{this._markUpdated()}t&&(this._updateState&rp||(this._updateState=this._updateState|rp,this.firstUpdated(e)),this.updated(e))}_markUpdated(){this._changedProperties=new Map,this._updateState=this._updateState&~ip}get updateComplete(){return this._getUpdateComplete()}_getUpdateComplete(){return this._updatePromise}shouldUpdate(t){return!0}update(t){void 0!==this._reflectingProperties&&this._reflectingProperties.size>0&&(this._reflectingProperties.forEach((t,e)=>this._propertyToAttribute(e,this[e],t)),this._reflectingProperties=void 0)}updated(t){}firstUpdated(t){}}lp[up]=!0;const cp="adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype;Symbol();
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
(window.litElementVersions||(window.litElementVersions=[])).push("2.2.1");const hp=t=>t.flat?t.flat(1/0):function t(e,n=[]){for(let r=0,i=e.length;r<i;r++){const i=e[r];Array.isArray(i)?t(i,n):n.push(i)}return n}(t);class fp extends lp{static finalize(){super.finalize.call(this),this._styles=this.hasOwnProperty(JSCompiler_renameProperty("styles",this))?this._getUniqueStyles():this._styles||[]}static _getUniqueStyles(){const t=this.styles,e=[];if(Array.isArray(t)){hp(t).reduceRight((t,e)=>(t.add(e),t),new Set).forEach(t=>e.unshift(t))}else t&&e.push(t);return e}initialize(){super.initialize(),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}createRenderRoot(){return this.attachShadow({mode:"open"})}adoptStyles(){const t=this.constructor._styles;0!==t.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?cp?this.renderRoot.adoptedStyleSheets=t.map(t=>t.styleSheet):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(t.map(t=>t.cssText),this.localName))}connectedCallback(){super.connectedCallback(),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}update(t){super.update(t);const e=this.render();e instanceof Od&&this.constructor.render(e,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._styles.forEach(t=>{const e=document.createElement("style");e.textContent=t.cssText,this.renderRoot.appendChild(e)}))}render(){}}fp.finalized=!0,fp.render=((t,e,n)=>{if(!n||"object"!=typeof n||!n.scopeName)throw new Error("The `scopeName` option is required.");const r=n.scopeName,i=zd.has(e),o=Kd&&11===e.nodeType&&!!e.host,s=o&&!Xd.has(r),a=s?document.createDocumentFragment():e;if(((t,e,n)=>{let r=zd.get(e);void 0===r&&(dd(e,e.firstChild),zd.set(e,r=new Rd(Object.assign({templateFactory:jd},n))),r.appendInto(e)),r.setValue(t),r.commit()})(t,a,Object.assign({templateFactory:(t=>e=>{const n=Jd(e.type,t);let r=$d.get(n);void 0===r&&(r={stringsArray:new WeakMap,keyString:new Map},$d.set(n,r));let i=r.stringsArray.get(e.strings);if(void 0!==i)return i;const o=e.strings.join(yd);if(void 0===(i=r.keyString.get(o))){const n=e.getTemplateElement();Kd&&window.ShadyCSS.prepareTemplateDom(n,t),i=new bd(e,n),r.keyString.set(o,i)}return r.stringsArray.set(e.strings,i),i})(r)},n)),s){const t=zd.get(a);zd.delete(a);const n=t.value instanceof Nd?t.value.template:void 0;Zd(r,a,n),dd(e,e.firstChild),e.appendChild(a),zd.set(e,t)}!i&&o&&window.ShadyCSS.styleElement(e.host)});var dp=function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s},pp=null,_p=1e3,yp=60,mp=[],gp=20,vp=0,bp=14400,wp=0,Ep=null;const Sp=async()=>{try{(Ep=await navigator.wakeLock.request("screen")).addEventListener("release",()=>{console.log("Screen Wake Lock was released")}),console.log("Screen Wake Lock is active")}catch(t){console.error(`${t.name}, ${t.message}`)}},Ap=()=>{null!==Ep&&"visible"===document.visibilityState&&(console.log("released lock getting it again"),Sp())};Sp(),document.addEventListener("visibilitychange",Ap),document.addEventListener("fullscreenchange",Ap),document.getElementById("reset").onclick=function(){wp=0};let Np=class extends fp{constructor(){super(),this.firstread=!0,this._handleGetAccelerometer=this._handleGetAccelerometer.bind(this),this.firstread=!0}createRenderRoot(){return this}render(){return Yd`
    <style>
    .container{
      width:33%;
      max-width:825px;
      margin: 0 auto;
       position: relative;
     }
     </style>
     
      <lsg-bluetooth id=BTLE 
      primaryServiceObject = '[[{"service":"00001523-3edb-ecac-9b4b-631f8a7f885e",
                          "characteristic":"00001525-3edb-ecac-9b4b-631f8a7f885e"}]]'
       name="sensor" class="button w3-round-xxlarge w3-cell w3-hover-opacity">
      </lsg-bluetooth> 
     
        `}firstUpdated(t){document.getElementById("BTLE").addEventListener("data-event",Tp),setInterval(this._handleGetAccelerometer.bind(this),_p)}_handleGetAccelerometer(){"connected"===document.getElementById("BTLE").connectedStr?this.firstread?null==pp?(!function(){let t=[{serviceNr:0,action:lt.write,data:Op("{'R_MAC':1}")},{serviceNr:0,action:lt.read,data:null}];document.getElementById("BTLE").btledata=t,document.getElementById("BTLE").read=!0}(),pp="0"):(this.firstread=!1,Pp()):document.getElementById("BTLE").read=!0:this.firstread=!0}clickFunctionRead(){console.log("r click called")}clickFunctionWrite(){Pp(),console.log("w click called")}};function Tp(t){var e=t.detail.message;if(console.log("btle incoming :"+e),"connected"!==e)if("0"===pp)pp=function(t){for(var e=new Uint8Array(t.buffer),n="",r=0;r<t.byteLength-1;r++)n+=String.fromCharCode(e[r]);return n}(e),console.log("macAdrr set to :",pp),document.getElementById("macaddressTxt").innerText="LSG "+pp;else{var n=(function(t){for(var e=t.byteLength,n="",r=0,i=0;i<e;i+=1)r=t.getUint8(i),n+=String.fromCharCode(r);return n}(e).slice(0,-1)+" \n").split(" ",3),r=parseInt(n[0]),i=parseInt(n[1]),o=parseInt(n[2]);if(console.log("xval :"+r,"yval :"+i,"zval :"+o),0==r&&(r=1),0==i&&(i=1),0==o&&(o=1),Math.abs(r)+Math.abs(i)+Math.abs(o)>1e3){var s=Math.atan(r/o);console.log("angle : "+s),s*=180/Math.PI,console.log("anglePI :"+s),o>0&&r>0&&(s=180-s),o<0&&r>0&&(s=0+Math.abs(s)),o<0&&r<0&&(s=360-s),o>0&&r<0&&(s=180+Math.abs(s))}else{var a=180*Math.atan(i/Math.sqrt(Math.pow(r,2)+Math.pow(o,2)))/Math.PI,u=180*Math.atan(-1*r/Math.sqrt(Math.pow(i,2)+Math.pow(o,2)))/Math.PI;console.log("roll :"+a),console.log("pitch :"+u),i>0&&o>0&&(s=a),i>0&&o<0&&(s=180-a),i<0&&o<0&&(s=180+Math.abs(a)),i<0&&o>0&&(s=360-Math.abs(a))}if(console.log("anglecorr :"+s),!isNaN(s)){var l=[s];if(document.getElementById("PIE").dataPoints=l,mp.push(s),mp.length>=yp){let t=function(t){for(var e=0,n=(t=t.sort(),1);n<t.length-1;n++)e+=t[n];return e/=t.length-2}(mp);Math.abs(vp-t)<gp?(wp+=_p/1e3*yp*10)>bp?(document.getElementById("alarmMenu").style.backgroundColor="red",document.getElementById("turnProgressBar").className="w3-container w3-round w3-red w3-center"):wp>bp/2?(document.getElementById("alarmMenu").style.backgroundColor="yellow",document.getElementById("turnProgressBar").className="w3-container w3-round w3-yellow w3-center"):(document.getElementById("alarmMenu").style.backgroundColor="transparent",document.getElementById("turnProgressBar").className="w3-container w3-round w3-blue w3-center"):(wp=0,document.getElementById("alarmMenu").style.backgroundColor="transparent",document.getElementById("turnProgressBar").className="w3-container w3-round w3-blue w3-center");let e=wp/216;document.getElementById("turnProgressBar").style.width=e+"%",document.getElementById("turnProgressBar").innerText=(wp/60).toString()+"Min";var c=new Date,h={time:0,pos:0,alarm:0};h.time=c.getTime()/1e3,h.pos=t,h.alarm=wp,function(t){!async function(t,e){ld.auth.loginWithCredential(new ud).then(ld.callFunction("AddLog",[t,e]).then(n=>{console.log(n),n.res.position_log.pos!=e.pos&&console.log("Db error :"+t+" log : "+e)}))}(pp,t)}(h),vp=t,mp=[]}}}}Np=dp([(t=>e=>"function"==typeof e?((t,e)=>(window.customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:n,elements:r}=e;return{kind:n,elements:r,finisher(e){window.customElements.define(t,e)}}})(t,e))("lsg-carin")],Np);function Op(t){for(var e=t.length,n=new ArrayBuffer(e),r=new Int8Array(n),i=0;i<e;i+=1)r[i]=t.charCodeAt(i);return new DataView(n)}function Pp(){let t=[{serviceNr:0,action:lt.write,data:Op("{'R_ACC':1}")},{serviceNr:0,action:lt.read,data:null}];document.getElementById("BTLE").btledata=t,document.getElementById("BTLE").read=!0}window.addEventListener("load",()=>{!async function(){if("serviceWorker"in navigator)try{await navigator.serviceWorker.register("./sw.js")}catch(t){console.log("ServiceWorker registration failed. Sorry about that.",t)}else console.log("Your browser does not support ServiceWorker.")}()})},75:function(t,e,n){"use strict";n.r(e);var r,i=n(0);!function(t){t[t.ActiveUserChanged=0]="ActiveUserChanged",t[t.ListenerRegistered=1]="ListenerRegistered",t[t.UserAdded=2]="UserAdded",t[t.UserLinked=3]="UserLinked",t[t.UserLoggedIn=4]="UserLoggedIn",t[t.UserLoggedOut=5]="UserLoggedOut",t[t.UserRemoved=6]="UserRemoved"}(r||(r={}));var o=function(){function t(t,e,n,r,i,o,s,a){this.userId=t,this.deviceId=e,this.accessToken=n,this.refreshToken=r,this.loggedInProviderType=i,this.loggedInProviderName=o,this.lastAuthActivity=s,this.userProfile=a}return t.empty=function(){return new t(void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0)},Object.defineProperty(t.prototype,"hasUser",{get:function(){return void 0!==this.userId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isEmpty",{get:function(){return void 0===this.deviceId},enumerable:!0,configurable:!0}),t.prototype.loggedOut=function(){return new t(this.userId,this.deviceId,void 0,void 0,this.loggedInProviderType,this.loggedInProviderName,new Date,this.userProfile)},t.prototype.withClearedUser=function(){return new t(void 0,this.deviceId,void 0,void 0,void 0,void 0,void 0,void 0)},t.prototype.withAuthProvider=function(e,n){return new t(this.userId,this.deviceId,this.accessToken,this.refreshToken,e,n,new Date,this.userProfile)},t.prototype.withNewAuthActivityTime=function(){return new t(this.userId,this.deviceId,this.accessToken,this.refreshToken,this.loggedInProviderType,this.loggedInProviderName,new Date,this.userProfile)},Object.defineProperty(t.prototype,"isLoggedIn",{get:function(){return void 0!==this.accessToken&&void 0!==this.refreshToken},enumerable:!0,configurable:!0}),t.prototype.merge=function(e){return new t(void 0===e.userId?this.userId:e.userId,void 0===e.deviceId?this.deviceId:e.deviceId,void 0===e.accessToken?this.accessToken:e.accessToken,void 0===e.refreshToken?this.refreshToken:e.refreshToken,void 0===e.loggedInProviderType?this.loggedInProviderType:e.loggedInProviderType,void 0===e.loggedInProviderName?this.loggedInProviderName:e.loggedInProviderName,void 0===e.lastAuthActivity?this.lastAuthActivity:e.lastAuthActivity,void 0===e.userProfile?this.userProfile:e.userProfile)},t}(),s=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),a=function(t){Error.call(this,t),Error.captureStackTrace&&Error.captureStackTrace(this),this.message=t,this.name=this.constructor.name};a.prototype=Object.create(Error.prototype);var u,l,c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e}(a);!function(t){t[t.TRANSPORT_ERROR=0]="TRANSPORT_ERROR",t[t.DECODING_ERROR=1]="DECODING_ERROR",t[t.ENCODING_ERROR=2]="ENCODING_ERROR"}(l||(l={}));var h,f=((u={})[l.TRANSPORT_ERROR]="the request transport encountered an error communicating with Stitch",u[l.DECODING_ERROR]="an error occurred while decoding a response from Stitch",u[l.ENCODING_ERROR]="an error occurred while encoding a request for Stitch",u),d=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),p=function(t){function e(e,n){var r=this,i="("+l[n]+"): "+f[n]+": "+e.message;return(r=t.call(this,i)||this).underlyingError=e,r.errorCode=n,r.errorCodeName=l[n],r}return d(e,t),e}(c);!function(t){t[t.MissingAuthReq=0]="MissingAuthReq",t[t.InvalidSession=1]="InvalidSession",t[t.UserAppDomainMismatch=2]="UserAppDomainMismatch",t[t.DomainNotAllowed=3]="DomainNotAllowed",t[t.ReadSizeLimitExceeded=4]="ReadSizeLimitExceeded",t[t.InvalidParameter=5]="InvalidParameter",t[t.MissingParameter=6]="MissingParameter",t[t.TwilioError=7]="TwilioError",t[t.GCMError=8]="GCMError",t[t.HTTPError=9]="HTTPError",t[t.AWSError=10]="AWSError",t[t.MongoDBError=11]="MongoDBError",t[t.ArgumentsNotAllowed=12]="ArgumentsNotAllowed",t[t.FunctionExecutionError=13]="FunctionExecutionError",t[t.NoMatchingRuleFound=14]="NoMatchingRuleFound",t[t.InternalServerError=15]="InternalServerError",t[t.AuthProviderNotFound=16]="AuthProviderNotFound",t[t.AuthProviderAlreadyExists=17]="AuthProviderAlreadyExists",t[t.ServiceNotFound=18]="ServiceNotFound",t[t.ServiceTypeNotFound=19]="ServiceTypeNotFound",t[t.ServiceAlreadyExists=20]="ServiceAlreadyExists",t[t.ServiceCommandNotFound=21]="ServiceCommandNotFound",t[t.ValueNotFound=22]="ValueNotFound",t[t.ValueAlreadyExists=23]="ValueAlreadyExists",t[t.ValueDuplicateName=24]="ValueDuplicateName",t[t.FunctionNotFound=25]="FunctionNotFound",t[t.FunctionAlreadyExists=26]="FunctionAlreadyExists",t[t.FunctionDuplicateName=27]="FunctionDuplicateName",t[t.FunctionSyntaxError=28]="FunctionSyntaxError",t[t.FunctionInvalid=29]="FunctionInvalid",t[t.IncomingWebhookNotFound=30]="IncomingWebhookNotFound",t[t.IncomingWebhookAlreadyExists=31]="IncomingWebhookAlreadyExists",t[t.IncomingWebhookDuplicateName=32]="IncomingWebhookDuplicateName",t[t.RuleNotFound=33]="RuleNotFound",t[t.ApiKeyNotFound=34]="ApiKeyNotFound",t[t.RuleAlreadyExists=35]="RuleAlreadyExists",t[t.RuleDuplicateName=36]="RuleDuplicateName",t[t.AuthProviderDuplicateName=37]="AuthProviderDuplicateName",t[t.RestrictedHost=38]="RestrictedHost",t[t.ApiKeyAlreadyExists=39]="ApiKeyAlreadyExists",t[t.IncomingWebhookAuthFailed=40]="IncomingWebhookAuthFailed",t[t.ExecutionTimeLimitExceeded=41]="ExecutionTimeLimitExceeded",t[t.FunctionNotCallable=42]="FunctionNotCallable",t[t.UserAlreadyConfirmed=43]="UserAlreadyConfirmed",t[t.UserNotFound=44]="UserNotFound",t[t.UserDisabled=45]="UserDisabled",t[t.Unknown=46]="Unknown"}(h||(h={}));var _={APIKeyAlreadyExists:h.ApiKeyAlreadyExists,APIKeyNotFound:h.ApiKeyNotFound,AWSError:h.AWSError,ArgumentsNotAllowed:h.ArgumentsNotAllowed,AuthProviderAlreadyExists:h.AuthProviderAlreadyExists,AuthProviderDuplicateName:h.AuthProviderDuplicateName,AuthProviderNotFound:h.AuthProviderNotFound,DomainNotAllowed:h.DomainNotAllowed,ExecutionTimeLimitExceeded:h.ExecutionTimeLimitExceeded,FunctionAlreadyExists:h.FunctionAlreadyExists,FunctionDuplicateName:h.FunctionDuplicateName,FunctionExecutionError:h.FunctionExecutionError,FunctionInvalid:h.FunctionInvalid,FunctionNotCallable:h.FunctionNotCallable,FunctionNotFound:h.FunctionNotFound,FunctionSyntaxError:h.FunctionSyntaxError,GCMError:h.GCMError,HTTPError:h.HTTPError,IncomingWebhookAlreadyExists:h.IncomingWebhookAlreadyExists,IncomingWebhookAuthFailed:h.IncomingWebhookAuthFailed,IncomingWebhookDuplicateName:h.IncomingWebhookDuplicateName,IncomingWebhookNotFound:h.IncomingWebhookNotFound,InternalServerError:h.InternalServerError,InvalidParameter:h.InvalidParameter,InvalidSession:h.InvalidSession,MissingAuthReq:h.MissingAuthReq,MissingParameter:h.MissingParameter,MongoDBError:h.MongoDBError,NoMatchingRuleFound:h.NoMatchingRuleFound,ReadSizeLimitExceeded:h.ReadSizeLimitExceeded,RestrictedHost:h.RestrictedHost,RuleAlreadyExists:h.RuleAlreadyExists,RuleDuplicateName:h.RuleDuplicateName,RuleNotFound:h.RuleNotFound,ServiceAlreadyExists:h.ServiceAlreadyExists,ServiceCommandNotFound:h.ServiceCommandNotFound,ServiceNotFound:h.ServiceNotFound,ServiceTypeNotFound:h.ServiceTypeNotFound,TwilioError:h.TwilioError,UserAlreadyConfirmed:h.UserAlreadyConfirmed,UserAppDomainMismatch:h.UserAppDomainMismatch,UserDisabled:h.UserDisabled,UserNotFound:h.UserNotFound,ValueAlreadyExists:h.ValueAlreadyExists,ValueDuplicateName:h.ValueDuplicateName,ValueNotFound:h.ValueNotFound};function y(t){return t in _?_[t]:h.Unknown}var m,g,v=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),b=function(t){function e(e,n){void 0===n&&(n=h.Unknown);var r=t.call(this,e)||this;return r.message=e,r.errorCode=n,r.errorCodeName=h[n],r}return v(e,t),e}(c),w=function(){function t(){}return t.APPLICATION_JSON="application/json",t.TEXT_EVENT_STREAM="text/event-stream",t}(),E=function(){function t(){}return t.getAuthorizationBearer=function(e){return t.AUTHORIZATION_BEARER+" "+e},t.CONTENT_TYPE_CANON="Content-Type",t.CONTENT_TYPE=t.CONTENT_TYPE_CANON.toLocaleLowerCase(),t.AUTHORIZATION_CANON="Authorization",t.AUTHORIZATION=t.AUTHORIZATION_CANON.toLocaleLowerCase(),t.ACCEPT_CANON="Accept",t.ACCEPT=t.ACCEPT_CANON.toLocaleLowerCase(),t.AUTHORIZATION_BEARER="Bearer",t}();function S(t){return t instanceof c?t:new p(t,l.DECODING_ERROR)}function A(t){if(void 0===t.body)throw new b("received unexpected status code "+t.statusCode,h.Unknown);var e;try{e=t.body}catch(e){throw new b("received unexpected status code "+t.statusCode,h.Unknown)}var n=function(t,e){if(void 0===t.headers[E.CONTENT_TYPE]||void 0!==t.headers[E.CONTENT_TYPE]&&t.headers[E.CONTENT_TYPE]!==w.APPLICATION_JSON)return e;var n=JSON.parse(e);if(!(n instanceof Object))return e;var r=n;if(void 0===r[m.ERROR])return e;var i=r[m.ERROR];if(void 0===r[m.ERROR_CODE])return i;var o=r[m.ERROR_CODE];throw new b(i,y(o))}(t,e);throw new b(n,h.Unknown)}!function(t){t.ERROR="error",t.ERROR_CODE="error_code"}(m||(m={})),function(t){t.GET="GET",t.POST="POST",t.PUT="PUT",t.DELETE="DELETE",t.HEAD="HEAD",t.OPTIONS="OPTIONS",t.TRACE="TRACE",t.PATCH="PATCH"}(g||(g={}));var N=g,T=function(){function t(t,e,n,r,i){this.method=t,this.path=e,this.headers=n,this.body=i,this.startedAt=r}return Object.defineProperty(t.prototype,"builder",{get:function(){return new t.Builder(this)},enumerable:!0,configurable:!0}),t}();!function(t){var e=function(){function e(t){void 0!==t&&(this.method=t.method,this.path=t.path,this.headers=t.headers,this.body=t.body,this.startedAt=t.startedAt)}return e.prototype.withMethod=function(t){return this.method=t,this},e.prototype.withPath=function(t){return this.path=t,this},e.prototype.withHeaders=function(t){return this.headers=t,this},e.prototype.withBody=function(t){return this.body=t,this},e.prototype.build=function(){if(void 0===this.method)throw Error("must set method");if(void 0===this.path)throw Error("must set non-empty path");return void 0===this.startedAt&&(this.startedAt=Date.now()/1e3),new t(this.method,this.path,void 0===this.headers?{}:this.headers,this.startedAt,this.body)},e}();t.Builder=e}(T||(T={}));var O=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),P=function(t){function e(e,n,r){void 0===n&&(n=!1),void 0===r&&(r=!0);var i=t.call(this,e.method,e.path,e.headers,e.startedAt,e.body)||this;return i.useRefreshToken=n,i.shouldRefreshOnFailure=r,i}return O(e,t),Object.defineProperty(e.prototype,"builder",{get:function(){return new e.Builder(this)},enumerable:!0,configurable:!0}),e}(T);!function(t){var e=function(e){function n(t){return e.call(this,t)||this}return O(n,e),n.prototype.withAccessToken=function(){return this.useRefreshToken=!1,this},n.prototype.withRefreshToken=function(){return this.useRefreshToken=!0,this},n.prototype.withShouldRefreshOnFailure=function(t){return this.shouldRefreshOnFailure=t,this},n.prototype.build=function(){return this.useRefreshToken&&(this.shouldRefreshOnFailure=!1),new t(e.prototype.build.call(this),this.useRefreshToken,this.shouldRefreshOnFailure)},n}(T.Builder);t.Builder=e}(P||(P={}));var C=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),x=function(t){function e(e,n){var r=this;return(r=e instanceof P?t.call(this,e,e.useRefreshToken,e.shouldRefreshOnFailure)||this:t.call(this,e)||this).document=n,r}return C(e,t),Object.defineProperty(e.prototype,"builder",{get:function(){return new e.Builder(this)},enumerable:!0,configurable:!0}),e}(P);!function(t){var e=function(e){function n(t){var n=e.call(this,t)||this;return void 0!==t&&(n.document=t.document,n.useRefreshToken=t.useRefreshToken),n}return C(n,e),n.prototype.withDocument=function(t){return this.document=t,this},n.prototype.withAccessToken=function(){return this.useRefreshToken=!1,this},n.prototype.build=function(){if(void 0===this.document||!(this.document instanceof Object))throw new Error("document must be set: "+this.document);return void 0===this.headers&&this.withHeaders({}),this.headers[E.CONTENT_TYPE]=w.APPLICATION_JSON,this.withBody(i.a.stringify(this.document,{relaxed:!1})),new t(e.prototype.build.call(this),this.document)},n}(P.Builder);t.Builder=e}(x||(x={}));var I,R,B=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),D=function(t){function e(e,n){var r=t.call(this,e.method,e.path,e.headers,e.startedAt,e.body)||this;return r.document=n,r}return B(e,t),Object.defineProperty(e.prototype,"builder",{get:function(){return new e.Builder(this)},enumerable:!0,configurable:!0}),e}(T);!function(t){var e=function(e){function n(t){var n=e.call(this,t)||this;return void 0!==t&&(n.document=t.document),n}return B(n,e),n.prototype.withDocument=function(t){return this.document=t,this},n.prototype.build=function(){if(void 0===this.document||!(this.document instanceof Object))throw new Error("document must be set");return void 0===this.headers&&this.withHeaders({}),this.headers[E.CONTENT_TYPE]=w.APPLICATION_JSON,this.withBody(i.a.stringify(this.document,{relaxed:!1})),new t(e.prototype.build.call(this),this.document)},n}(T.Builder);t.Builder=e}(D||(D={})),function(t){t[t.LoggedOutDuringRequest=0]="LoggedOutDuringRequest",t[t.MustAuthenticateFirst=1]="MustAuthenticateFirst",t[t.UserNoLongerValid=2]="UserNoLongerValid",t[t.UserNotFound=3]="UserNotFound",t[t.UserNotLoggedIn=4]="UserNotLoggedIn",t[t.CouldNotLoadPersistedAuthInfo=5]="CouldNotLoadPersistedAuthInfo",t[t.CouldNotPersistAuthInfo=6]="CouldNotPersistAuthInfo",t[t.StreamingNotSupported=7]="StreamingNotSupported",t[t.StreamClosed=8]="StreamClosed",t[t.UnexpectedArguments=9]="UnexpectedArguments"}(R||(R={}));var M,U=((I={})[R.LoggedOutDuringRequest]="logged out while making a request to Stitch",I[R.MustAuthenticateFirst]="method called requires being authenticated",I[R.UserNoLongerValid]="user instance being accessed is no longer valid; please get a new user with auth.getUser()",I[R.UserNotFound]="user not found in list of users",I[R.UserNotLoggedIn]="cannot make the active user a logged out user; please use loginWithCredential() to switch to this user",I[R.CouldNotLoadPersistedAuthInfo]="failed to load stored auth information for Stitch",I[R.CouldNotPersistAuthInfo]="failed to save auth information for Stitch",I[R.StreamingNotSupported]="streaming not supported in this SDK",I[R.StreamClosed]="stream is closed",I[R.UnexpectedArguments]="function does not accept arguments",I),k=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),L=function(t){function e(e){var n=this,r="("+R[e]+"): "+U[e];return(n=t.call(this,r)||this).errorCode=e,n.errorCodeName=R[e],n}return k(e,t),e}(c),F=function(){function t(t,e){this.eventName=t,this.data=e}return t.MESSAGE_EVENT="message",t}(),j=function(){function t(e,n,r){this.eventName=e,n=n||"";for(var o=[],s=0;s<n.length;s++){var a=n[s];switch(a){case"%":if(s+2>=n.length)break;var u=void 0;switch(n.substring(s+1,s+3)){case"25":u=!0,o.push("%");break;case"0A":u=!0,o.push("\n");break;case"0D":u=!0,o.push("\r");break;default:u=!1}if(u){s+=2;continue}}o.push(a)}var l=o.join("");switch(this.eventName){case t.ERROR_EVENT_NAME:var c=void 0,f=void 0;try{var d=i.a.parse(l,{strict:!1});c=d[M.Error],f=y(d[M.ErrorCode])}catch(t){c=l,f=h.Unknown}this.error=new b(c,f);break;case F.MESSAGE_EVENT:this.data=i.a.parse(l,{strict:!1}),r&&(this.data=r.decode(this.data))}}return t.fromEvent=function(e,n){return new t(e.eventName,e.data,n)},t.ERROR_EVENT_NAME="error",t}();!function(t){t.Error="error",t.ErrorCode="error_code"}(M||(M={}));var $=function(){function t(t,e){this.eventStream=t,this.decoder=e,this.listeners=[]}return t.prototype.next=function(){var t=this;return this.eventStream.nextEvent().then(function(e){var n=j.fromEvent(e,t.decoder);if(n.eventName===j.ERROR_EVENT_NAME)throw n.error;return n.eventName===F.MESSAGE_EVENT?n.data:t.next()})},t.prototype.onNext=function(t){var e=this,n={onEvent:function(n){var r=j.fromEvent(n,e.decoder);r.eventName===F.MESSAGE_EVENT&&t(r.data)}};this.eventStream.addListener(n)},t.prototype.onError=function(t){var e=this,n={onEvent:function(n){var r=j.fromEvent(n,e.decoder);r.eventName===j.ERROR_EVENT_NAME&&t(r.error)}};this.eventStream.addListener(n)},t.prototype.addListener=function(t){var e=this,n={onEvent:function(n){var r=j.fromEvent(n,e.decoder);r.eventName===j.ERROR_EVENT_NAME?t.onError&&t.onError(r.error):t.onNext&&t.onNext(r.data)}};this.listeners.push([t,n]),this.eventStream.addListener(n)},t.prototype.removeListener=function(t){for(var e=-1,n=0;n<this.listeners.length;n++)if(this.listeners[n][0]===t){e=n;break}if(-1!==e){var r=this.listeners[e][1];this.listeners.splice(e,1),this.eventStream.removeListener(r)}},t.prototype.isOpen=function(){return this.eventStream.isOpen()},t.prototype.close=function(){this.eventStream.close()},t}(),z=function(){function t(t,e,n){void 0===e&&(e={}),void 0===n&&(n=[]),this.userType=t,this.data=e,this.identities=n}return t.empty=function(){return new t},Object.defineProperty(t.prototype,"name",{get:function(){return this.data.name},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"email",{get:function(){return this.data.email},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"pictureUrl",{get:function(){return this.data.picture},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"firstName",{get:function(){return this.data.first_name},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"lastName",{get:function(){return this.data.last_name},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"gender",{get:function(){return this.data.gender},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"birthday",{get:function(){return this.data.birthday},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"minAge",{get:function(){var t=this.data.min_age;if(void 0!==t)return t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"maxAge",{get:function(){var t=this.data.max_age;if(void 0!==t)return t},enumerable:!0,configurable:!0}),t}(),Y=function(){function t(t,e,n,r,i,o,s){this.id=t,this.loggedInProviderType=e,this.loggedInProviderName=n,this.profile=void 0===o?z.empty():o,this.isLoggedIn=r,this.lastAuthActivity=i,this.customData=void 0===s?{}:s}return Object.defineProperty(t.prototype,"userType",{get:function(){return this.profile.userType},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"identities",{get:function(){return this.profile.identities},enumerable:!0,configurable:!0}),t.prototype.equals=function(t){return this.id===t.id&&JSON.stringify(this.identities)===JSON.stringify(t.identities)&&this.isLoggedIn===t.isLoggedIn&&this.loggedInProviderName===t.loggedInProviderName&&this.loggedInProviderType===t.loggedInProviderType&&JSON.stringify(this.profile)===JSON.stringify(t.profile)},t}(),V=function(){function t(){}return t.TYPE="anon-user",t.DEFAULT_NAME="anon-user",t}(),q=function(){return function(t,e,n,r){this.authInfo=t,this.providerType=e,this.providerName=n,this.asLink=r}}(),H=n(9);function W(t){var e,n=t.length%4;0!=n?e=t+"=".repeat(4-n):e=t;var r=Object(H.toByteArray)(e);return function(t,e,n){var r="",i="";n=Math.min(t.length,n||1/0);for(var o=e=e||0;o<n;o++)t[o]<=127?(r+=G(i)+String.fromCharCode(t[o]),i=""):i+="%"+t[o].toString(16);return r+G(i)}(r,0,r.length)}function J(t){var e;return"undefined"==typeof Uint8Array&&(e=K(t)),e=new Uint8Array(K(t)),Object(H.fromByteArray)(e)}function K(t){for(var e,n=1/0,r=t.length,i=null,o=[],s=0;s<r;s++){if((e=t.charCodeAt(s))>55295&&e<57344){if(!i){if(e>56319){(n-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(n-=3)>-1&&o.push(239,191,189);continue}i=e;continue}if(e<56320){(n-=3)>-1&&o.push(239,191,189),i=e;continue}e=i-55296<<10|e-56320|65536,i=null}else i&&((n-=3)>-1&&o.push(239,191,189),i=null);if(e<128){if((n-=1)<0)break;o.push(e)}else if(e<2048){if((n-=2)<0)break;o.push(e>>6|192,63&e|128)}else if(e<65536){if((n-=3)<0)break;o.push(e>>12|224,e>>6&63|128,63&e|128)}else{if(!(e<2097152))throw new Error("Invalid code point");if((n-=4)<0)break;o.push(e>>18|240,e>>12&63|128,e>>6&63|128,63&e|128)}}return o}function G(t){try{return decodeURIComponent(t)}catch(t){return String.fromCharCode(65533)}}var X,Z=function(){function t(t,e,n){this.expires=t,this.issuedAt=e,this.userData=n}return t.fromEncoded=function(e){var n=t.splitToken(e),r=JSON.parse(W(n[1]));return new t(r.exp,r.iat,r.user_data)},t.splitToken=function(t){var e=t.split(".");if(3!==e.length)throw new Error("Malformed JWT token. The string "+t+" should have 3 parts.");return e},t}(),Q=function(){function t(t){this.auth=t}return t.prototype.shouldRefresh=function(){var t=this.auth;if(void 0===t)return!1;if(!t.isLoggedIn)return!1;var e,n=t.authInfo;if(void 0===n)return!1;if(!n.isLoggedIn)return!1;try{e=Z.fromEncoded(n.accessToken)}catch(t){return console.log(t),!1}return!(Date.now()/1e3<e.expires-300)},t.prototype.run=function(){var t=this;this.shouldRefresh()?this.auth.refreshAccessToken().then(function(){t.nextTimeout=setTimeout(function(){return t.run()},6e4)}).catch(function(){t.nextTimeout=setTimeout(function(){return t.run()},6e4)}):this.nextTimeout=setTimeout(function(){return t.run()},6e4)},t.prototype.stop=function(){clearTimeout(this.nextTimeout)},t}(),tt=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t.USER_ID="user_id",t.DEVICE_ID="device_id",t.ACCESS_TOKEN="access_token",t.REFRESH_TOKEN="refresh_token"}(X||(X={}));var et,nt=function(t){function e(e,n,r,i){return t.call(this,e,n,r,i)||this}return tt(e,t),e.fromJSON=function(t){return new e(t[X.USER_ID],t[X.DEVICE_ID],t[X.ACCESS_TOKEN],t[X.REFRESH_TOKEN])},e.prototype.toJSON=function(){var t;return(t={})[X.USER_ID]=this.userId,t[X.DEVICE_ID]=this.deviceId,t[X.ACCESS_TOKEN]=this.accessToken,t[X.REFRESH_TOKEN]=this.refreshToken,t},e}(o),rt=function(){function t(){}return t.keyPresent=function(t,e){if(void 0===e[t])throw new Error("expected "+t+" to be present")},t}(),it=function(){return function(t,e){this.id=t,this.providerType=e}}(),ot=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t.ID="id",t.PROVIDER_TYPE="provider_type"}(et||(et={}));var st,at=function(t){function e(e,n){return t.call(this,e,n)||this}return ot(e,t),e.fromJSON=function(t){return new e(t[et.ID],t[et.PROVIDER_TYPE])},e.prototype.toJSON=function(){var t;return(t={})[et.ID]=this.id,t[et.PROVIDER_TYPE]=this.providerType,t},e}(it),ut=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t.DATA="data",t.USER_TYPE="type",t.IDENTITIES="identities"}(st||(st={}));var lt,ct=function(t){function e(e,n,r){return t.call(this,e,n,r)||this}return ut(e,t),e.fromJSON=function(t){return rt.keyPresent(st.USER_TYPE,t),rt.keyPresent(st.DATA,t),rt.keyPresent(st.IDENTITIES,t),new e(t[st.USER_TYPE],t[st.DATA],t[st.IDENTITIES].map(at.fromJSON))},e.prototype.toJSON=function(){var t;return(t={})[st.DATA]=this.data,t[st.USER_TYPE]=this.userType,t[st.IDENTITIES]=this.identities,t},e}(z),ht=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t.ID="id",t.PROVIDER_TYPE="provider_type"}(lt||(lt={}));var ft,dt=function(t){function e(e,n){return t.call(this,e,n)||this}return ht(e,t),e.decode=function(t){return new e(t[lt.ID],t[lt.PROVIDER_TYPE])},e.prototype.encode=function(){var t;return(t={})[lt.ID]=this.id,t[lt.PROVIDER_TYPE]=this.providerType,t},e}(it),pt=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t.DATA="data",t.USER_TYPE="type",t.IDENTITIES="identities"}(ft||(ft={}));var _t,yt=function(t){function e(e,n,r){var i=t.call(this,e,n,r)||this;return i.userType=e,i.data=n,i.identities=r,i}return pt(e,t),e.decode=function(t){return t?new e(t[ft.USER_TYPE],t[ft.DATA],t[ft.IDENTITIES].map(function(t){return dt.decode(t)})):void 0},e.prototype.encode=function(){var t;return(t={})[ft.DATA]=this.data,t[ft.USER_TYPE]=this.userType,t[ft.IDENTITIES]=this.identities.map(function(t){return t.encode()}),t},e}(z),mt=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function gt(t,e){if(t.isEmpty)e.remove(wt.ACTIVE_USER_STORAGE_NAME);else{var n=new wt(t.userId,t.deviceId,t.accessToken,t.refreshToken,t.loggedInProviderType,t.loggedInProviderName,t.lastAuthActivity,t.userProfile?new yt(t.userProfile.userType,t.userProfile.data,t.userProfile.identities.map(function(t){return new dt(t.id,t.providerType)})):void 0);e.set(wt.ACTIVE_USER_STORAGE_NAME,JSON.stringify(n.encode()))}}function vt(t,e){var n=[];t.forEach(function(t,e){var r=new wt(e,t.deviceId,t.accessToken,t.refreshToken,t.loggedInProviderType,t.loggedInProviderName,t.lastAuthActivity,t.userProfile?new yt(t.userProfile.userType,t.userProfile.data,t.userProfile.identities.map(function(t){return new dt(t.id,t.providerType)})):void 0);n.push(r.encode())}),e.set(wt.ALL_USERS_STORAGE_NAME,JSON.stringify(n))}!function(t){t.USER_ID="user_id",t.DEVICE_ID="device_id",t.ACCESS_TOKEN="access_token",t.REFRESH_TOKEN="refresh_token",t.LAST_AUTH_ACTIVITY="last_auth_activity",t.LOGGED_IN_PROVIDER_TYPE="logged_in_provider_type",t.LOGGED_IN_PROVIDER_NAME="logged_in_provider_name",t.USER_PROFILE="user_profile"}(_t||(_t={}));var bt,wt=function(t){function e(e,n,r,i,o,s,a,u){var l=t.call(this,e,n,r,i,o,s,a,u)||this;return l.userProfile=u,l}return mt(e,t),e.decode=function(t){var n=t[_t.USER_ID],r=t[_t.DEVICE_ID],i=t[_t.ACCESS_TOKEN],o=t[_t.REFRESH_TOKEN],s=t[_t.LOGGED_IN_PROVIDER_TYPE],a=t[_t.LOGGED_IN_PROVIDER_NAME],u=t[_t.USER_PROFILE],l=t[_t.LAST_AUTH_ACTIVITY];return new e(n,r,i,o,s,a,new Date(l),yt.decode(u))},e.prototype.encode=function(){var t={};return t[_t.USER_ID]=this.userId,t[_t.ACCESS_TOKEN]=this.accessToken,t[_t.REFRESH_TOKEN]=this.refreshToken,t[_t.DEVICE_ID]=this.deviceId,t[_t.LOGGED_IN_PROVIDER_NAME]=this.loggedInProviderName,t[_t.LOGGED_IN_PROVIDER_TYPE]=this.loggedInProviderType,t[_t.LAST_AUTH_ACTIVITY]=this.lastAuthActivity?this.lastAuthActivity.getTime():void 0,t[_t.USER_PROFILE]=this.userProfile?this.userProfile.encode():void 0,t},e.ACTIVE_USER_STORAGE_NAME="auth_info",e.ALL_USERS_STORAGE_NAME="all_auth_infos",e}(o),Et=function(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}},St=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s},At=function(){function t(t,e,n,r){var i,s;void 0===r&&(r=!0),this.requestClient=t,this.authRoutes=e,this.storage=n;try{i=function(t){var e=t.get(wt.ALL_USERS_STORAGE_NAME);if(!e)return new Map;var n=JSON.parse(e);if(!Array.isArray(n))throw new L(R.CouldNotLoadPersistedAuthInfo);var r=new Map;return n.forEach(function(t){var e=wt.decode(t);r.set(e.userId,e)}),r}(n)}catch(t){throw new L(R.CouldNotLoadPersistedAuthInfo)}this.allUsersAuthInfo=i;try{s=function(t){var e=t.get(wt.ACTIVE_USER_STORAGE_NAME);if(e)return wt.decode(JSON.parse(e))}(n)}catch(t){throw new L(R.CouldNotLoadPersistedAuthInfo)}this.activeUserAuthInfo=void 0===s?o.empty():s,this.activeUserAuthInfo.hasUser&&(this.currentUser=this.prepUser(this.activeUserAuthInfo)),r&&(this.accessTokenRefresher=new Q(this),this.accessTokenRefresher.run())}return Object.defineProperty(t.prototype,"authInfo",{get:function(){return this.activeUserAuthInfo},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isLoggedIn",{get:function(){return void 0!==this.currentUser&&this.currentUser.isLoggedIn},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"user",{get:function(){return this.currentUser},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"hasDeviceId",{get:function(){return void 0!==this.activeUserAuthInfo.deviceId&&""!==this.activeUserAuthInfo.deviceId&&"000000000000000000000000"!==this.activeUserAuthInfo.deviceId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"deviceId",{get:function(){if(this.hasDeviceId)return this.activeUserAuthInfo.deviceId},enumerable:!0,configurable:!0}),t.prototype.listUsers=function(){var t=this,e=[];return this.allUsersAuthInfo.forEach(function(n){e.push(t.prepUser(n))}),e},t.prototype.doAuthenticatedRequest=function(t,e){var n=this;try{return this.requestClient.doRequest(this.prepareAuthRequest(t,e||this.activeUserAuthInfo)).catch(function(e){return n.handleAuthFailure(e,t)})}catch(t){return Promise.reject(t)}},t.prototype.doAuthenticatedRequestWithDecoder=function(t,e){return this.doAuthenticatedRequest(t).then(function(t){var n=i.a.parse(t.body,{strict:!1});return e?e.decode(n):n}).catch(function(t){throw S(t)})},t.prototype.openAuthenticatedEventStream=function(t,e){var n=this;if(void 0===e&&(e=!0),!this.isLoggedIn)throw new L(R.MustAuthenticateFirst);var r=t.useRefreshToken?this.activeUserAuthInfo.refreshToken:this.activeUserAuthInfo.accessToken;return this.requestClient.doStreamRequest(t.builder.withPath(t.path+"&stitch_at="+r).build(),e,function(){return n.openAuthenticatedEventStream(t,!1)}).catch(function(r){return n.handleAuthFailureForEventStream(r,t,e)})},t.prototype.openAuthenticatedStreamWithDecoder=function(t,e){return this.openAuthenticatedEventStream(t).then(function(t){return new $(t,e)})},t.prototype.refreshAccessToken=function(){var t=this,e=(new P.Builder).withRefreshToken().withPath(this.authRoutes.sessionRoute).withMethod(N.POST);return this.doAuthenticatedRequest(e.build()).then(function(e){try{var n=nt.fromJSON(JSON.parse(e.body));if(t.activeUserAuthInfo=t.activeUserAuthInfo.merge(n),n.accessToken&&t.user instanceof Y){var r=Z.fromEncoded(n.accessToken).userData;t.user.customData=void 0===r?{}:r}}catch(t){throw new p(t,l.DECODING_ERROR)}try{gt(t.activeUserAuthInfo,t.storage),t.allUsersAuthInfo.set(t.activeUserAuthInfo.userId,t.activeUserAuthInfo),vt(t.allUsersAuthInfo,t.storage)}catch(t){throw new L(R.CouldNotPersistAuthInfo)}})},t.prototype.switchToUserWithId=function(t){var e=this.allUsersAuthInfo.get(t);if(void 0===e)throw new L(R.UserNotFound);if(!e.isLoggedIn)throw new L(R.UserNotLoggedIn);this.activeUserAuthInfo.hasUser&&this.allUsersAuthInfo.set(this.activeUserAuthInfo.userId,this.activeUserAuthInfo.withNewAuthActivityTime());var n=e.withNewAuthActivityTime();this.allUsersAuthInfo.set(t,n),gt(n,this.storage),this.activeUserAuthInfo=n;var i=this.currentUser;return this.currentUser=this.prepUser(n),this.onAuthEvent(),this.dispatchAuthEvent({currentActiveUser:this.currentUser,kind:r.ActiveUserChanged,previousActiveUser:i}),this.currentUser},t.prototype.loginWithCredentialInternal=function(t){var e,n,i=this;if(t instanceof q)return this.processLogin(t,t.authInfo,t.asLink).then(function(t){return i.dispatchAuthEvent({kind:r.UserLoggedIn,loggedInUser:t}),t});if(t.providerCapabilities.reusesExistingSession)try{for(var o=Et(this.allUsersAuthInfo),s=o.next();!s.done;s=o.next()){var a=St(s.value,2),u=a[0],l=a[1];if(l.loggedInProviderType===t.providerType){if(l.isLoggedIn)try{return Promise.resolve(this.switchToUserWithId(u))}catch(t){return Promise.reject(t)}void 0!==l.userId&&this.removeUserWithIdInternal(l.userId)}}}catch(t){e={error:t}}finally{try{s&&!s.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}return this.doLogin(t,!1)},t.prototype.linkUserWithCredentialInternal=function(t,e){return void 0!==this.currentUser&&t.id!==this.currentUser.id?Promise.reject(new L(R.UserNoLongerValid)):this.doLogin(e,!0)},t.prototype.logoutInternal=function(){return this.isLoggedIn&&this.currentUser?this.logoutUserWithIdInternal(this.currentUser.id):Promise.resolve()},t.prototype.logoutUserWithIdInternal=function(t){var e=this,n=this.allUsersAuthInfo.get(t);if(void 0===n)return Promise.reject(new L(R.UserNotFound));if(!n.isLoggedIn)return Promise.resolve();var r=function(){e.clearUserAuthTokens(n.userId),n.loggedInProviderType===V.TYPE&&e.removeUserWithIdInternal(n.userId)};return this.doLogout(n).then(function(){r()}).catch(function(){r()})},t.prototype.removeUserInternal=function(){return this.isLoggedIn&&void 0!==this.currentUser?this.removeUserWithIdInternal(this.currentUser.id):Promise.resolve()},t.prototype.removeUserWithIdInternal=function(t){var e=this,n=this.allUsersAuthInfo.get(t);if(void 0===n)return Promise.reject(new L(R.UserNotFound));var i=function(){e.clearUserAuthTokens(n.userId),e.allUsersAuthInfo.delete(t),vt(e.allUsersAuthInfo,e.storage);var i=e.prepUser(n.loggedOut());e.onAuthEvent(),e.dispatchAuthEvent({kind:r.UserRemoved,removedUser:i})};return n.isLoggedIn?this.doLogout(n).then(function(){i()}).catch(function(t){i()}):(i(),Promise.resolve())},t.prototype.close=function(){this.accessTokenRefresher&&this.accessTokenRefresher.stop()},t.prototype.prepareAuthRequest=function(t,e){if(!e.isLoggedIn)throw new L(R.MustAuthenticateFirst);var n=t.builder,r=n.headers||{};return t.useRefreshToken?r[E.AUTHORIZATION]=E.getAuthorizationBearer(e.refreshToken):r[E.AUTHORIZATION]=E.getAuthorizationBearer(e.accessToken),n.withHeaders(r),n.build()},t.prototype.handleAuthFailureForEventStream=function(t,e,n){var r=this;if(void 0===n&&(n=!0),!(t instanceof b)||t.errorCode!==h.InvalidSession)throw t;if(e.useRefreshToken||!e.shouldRefreshOnFailure)throw this.clearActiveUserAuth(),t;return this.tryRefreshAccessToken(e.startedAt).then(function(){return r.openAuthenticatedEventStream(e.builder.withShouldRefreshOnFailure(!1).build(),n)})},t.prototype.handleAuthFailure=function(t,e){var n=this;if(!(t instanceof b)||t.errorCode!==h.InvalidSession)throw t;if(e.useRefreshToken||!e.shouldRefreshOnFailure)throw this.clearActiveUserAuth(),t;return this.tryRefreshAccessToken(e.startedAt).then(function(){return n.doAuthenticatedRequest(e.builder.withShouldRefreshOnFailure(!1).build())})},t.prototype.tryRefreshAccessToken=function(t){if(!this.isLoggedIn)throw new L(R.LoggedOutDuringRequest);try{if(Z.fromEncoded(this.activeUserAuthInfo.accessToken).issuedAt>=t)return Promise.resolve()}catch(t){}return this.refreshAccessToken()},t.prototype.prepUser=function(t){return this.userFactory.makeUser(t.userId,t.loggedInProviderType,t.loggedInProviderName,t.isLoggedIn,t.lastAuthActivity,t.userProfile)},t.prototype.attachAuthOptions=function(t){var e={};e.device=this.deviceInfo,t.options=e},t.prototype.doLogin=function(t,e){var n=this,i=this.currentUser;return this.doLoginRequest(t,e).then(function(r){return n.processLoginResponse(t,r,e)}).then(function(t){return n.onAuthEvent(),e?n.dispatchAuthEvent({kind:r.UserLinked,linkedUser:t}):(n.dispatchAuthEvent({kind:r.UserLoggedIn,loggedInUser:t}),n.dispatchAuthEvent({currentActiveUser:t,kind:r.ActiveUserChanged,previousActiveUser:i})),t})},t.prototype.doLoginRequest=function(t,e){var n=new D.Builder;n.withMethod(N.POST),e?n.withPath(this.authRoutes.getAuthProviderLinkRoute(t.providerName)):n.withPath(this.authRoutes.getAuthProviderLoginRoute(t.providerName));var r=t.material;if(this.attachAuthOptions(r),n.withDocument(r),!e)return this.requestClient.doRequest(n.build());var i=new x(n.build(),n.document);return this.doAuthenticatedRequest(i)},t.prototype.processLogin=function(t,e,n){var i=this,s=this.activeUserAuthInfo,a=this.currentUser;return e=this.activeUserAuthInfo.merge(new o(e.userId,e.deviceId,e.accessToken,e.refreshToken,t.providerType,t.providerName,void 0,void 0)),this.activeUserAuthInfo=e,this.currentUser=this.userFactory.makeUser(this.activeUserAuthInfo.userId,t.providerType,t.providerName,this.activeUserAuthInfo.isLoggedIn,new Date,void 0,Z.fromEncoded(e.accessToken).userData),this.doGetUserProfile().then(function(n){s.hasUser&&i.allUsersAuthInfo.set(s.userId,s.withNewAuthActivityTime()),e=e.merge(new o(e.userId,e.deviceId,e.accessToken,e.refreshToken,t.providerType,t.providerName,new Date,n));var u=!i.allUsersAuthInfo.has(e.userId);try{gt(e,i.storage),i.allUsersAuthInfo.set(e.userId,e),vt(i.allUsersAuthInfo,i.storage)}catch(t){throw i.activeUserAuthInfo=s,i.currentUser=a,e.userId!==s.userId&&e.userId&&i.allUsersAuthInfo.delete(e.userId),new L(R.CouldNotPersistAuthInfo)}return i.activeUserAuthInfo=e,i.currentUser=i.userFactory.makeUser(i.activeUserAuthInfo.userId,t.providerType,t.providerName,i.activeUserAuthInfo.isLoggedIn,i.activeUserAuthInfo.lastAuthActivity,n,Z.fromEncoded(e.accessToken).userData),u&&(i.onAuthEvent(),i.dispatchAuthEvent({addedUser:i.currentUser,kind:r.UserAdded})),i.currentUser}).catch(function(t){if(t instanceof L)throw t;if(n||s.hasUser){var e=i.activeUserAuthInfo;i.activeUserAuthInfo=s,i.currentUser=a,n&&(i.activeUserAuthInfo=i.activeUserAuthInfo.withAuthProvider(e.loggedInProviderType,e.loggedInProviderName))}else i.clearActiveUserAuth();throw t})},t.prototype.processLoginResponse=function(t,e,n){try{if(!e)throw new b("the login response could not be processed for credential: "+t+";response was undefined");if(!e.body)throw new b("response with status code "+e.statusCode+" has empty body");return this.processLogin(t,nt.fromJSON(JSON.parse(e.body)),n)}catch(t){throw new p(t,l.DECODING_ERROR)}},t.prototype.doGetUserProfile=function(){var t=new P.Builder;return t.withMethod(N.GET).withPath(this.authRoutes.profileRoute),this.doAuthenticatedRequest(t.build()).then(function(t){return ct.fromJSON(JSON.parse(t.body))}).catch(function(t){throw t instanceof c?t:new p(t,l.DECODING_ERROR)})},t.prototype.doLogout=function(t){var e=new P.Builder;return e.withRefreshToken().withPath(this.authRoutes.sessionRoute).withMethod(N.DELETE),this.doAuthenticatedRequest(e.build(),t).then(function(){})},t.prototype.clearActiveUserAuth=function(){this.isLoggedIn&&this.clearUserAuthTokens(this.activeUserAuthInfo.userId)},t.prototype.clearUserAuthTokens=function(t){var e=this.allUsersAuthInfo.get(t);if(void 0===e){if(this.activeUserAuthInfo.userId!==t)throw new L(R.UserNotFound)}else if(!e.isLoggedIn)return;try{var n=void 0;if(e){var i=e.loggedOut();this.allUsersAuthInfo.set(t,i),vt(this.allUsersAuthInfo,this.storage),n=this.userFactory.makeUser(i.userId,i.loggedInProviderType,i.loggedInProviderName,i.isLoggedIn,i.lastAuthActivity,i.userProfile)}var o=!1;this.activeUserAuthInfo.hasUser&&this.activeUserAuthInfo.userId===t&&(o=!0,this.activeUserAuthInfo=this.activeUserAuthInfo.withClearedUser(),this.currentUser=void 0,gt(this.activeUserAuthInfo,this.storage)),n&&(this.onAuthEvent(),this.dispatchAuthEvent({kind:r.UserLoggedOut,loggedOutUser:n}),o&&this.dispatchAuthEvent({currentActiveUser:void 0,kind:r.ActiveUserChanged,previousActiveUser:n}))}catch(t){throw new L(R.CouldNotPersistAuthInfo)}},t}();!function(t){t.DEVICE_ID="deviceId",t.APP_ID="appId",t.APP_VERSION="appVersion",t.PLATFORM="platform",t.PLATFORM_VERSION="platformVersion",t.SDK_VERSION="sdkVersion"}(bt||(bt={}));var Nt,Tt=bt,Ot=function(){return function(t){void 0===t&&(t=!1),this.reusesExistingSession=t}}(),Pt=function(){return function(t){void 0===t&&(t=V.DEFAULT_NAME),this.providerType=V.TYPE,this.material={},this.providerCapabilities=new Ot(!0),this.providerName=t}}(),Ct=function(){function t(){}return t.TYPE="custom-token",t.DEFAULT_NAME="custom-token",t}();(Nt||(Nt={})).TOKEN="token";var xt,It=function(){return function(t,e){var n;void 0===e&&(e=Ct.DEFAULT_NAME),this.providerType=Ct.TYPE,this.providerCapabilities=new Ot(!1),this.providerName=e,this.token=t,this.material=((n={})[Nt.TOKEN]=this.token,n)}}(),Rt=function(){function t(){}return t.TYPE="oauth2-facebook",t.DEFAULT_NAME="oauth2-facebook",t}();(xt||(xt={})).ACCESS_TOKEN="accessToken";var Bt,Dt=function(){function t(t,e){var n;void 0===e&&(e=Rt.DEFAULT_NAME),this.providerType=Rt.TYPE,this.providerName=e,this.accessToken=t,this.material=((n={})[xt.ACCESS_TOKEN]=this.accessToken,n)}return Object.defineProperty(t.prototype,"providerCapabilities",{get:function(){return new Ot(!1)},enumerable:!0,configurable:!0}),t}(),Mt=function(){function t(){}return t.TYPE="custom-function",t.DEFAULT_NAME="custom-function",t}(),Ut=function(){function t(t,e){void 0===e&&(e=Mt.DEFAULT_NAME),this.providerType=Mt.TYPE,this.providerName=e,this.material=t}return Object.defineProperty(t.prototype,"providerCapabilities",{get:function(){return new Ot(!1)},enumerable:!0,configurable:!0}),t}(),kt=function(){function t(){}return t.TYPE="oauth2-google",t.DEFAULT_NAME="oauth2-google",t}();(Bt||(Bt={})).AUTH_CODE="authCode";var Lt,Ft=function(){return function(t,e){var n;void 0===e&&(e=kt.DEFAULT_NAME),this.providerType=kt.TYPE,this.providerCapabilities=new Ot(!1),this.providerName=e,this.authCode=t,this.material=((n={})[Bt.AUTH_CODE]=this.authCode,n)}}(),jt=function(){function t(){}return t.TYPE="api-key",t.DEFAULT_NAME="api-key",t}();(Lt||(Lt={})).KEY="key";var $t,zt=function(){return function(t,e){var n;void 0===e&&(e=jt.DEFAULT_NAME),this.providerType=jt.TYPE,this.providerCapabilities=new Ot(!1),this.providerName=e,this.key=t,this.material=((n={})[Lt.KEY]=this.key,n)}}(),Yt=function(){return function(t,e,n){this.providerName=t,this.requestClient=e,this.baseRoute=n}}();!function(t){t.ID="_id",t.KEY="key",t.NAME="name",t.DISABLED="disabled"}($t||($t={}));var Vt,qt=function(){function t(t,e,n,r){this.id=i.b.ObjectID.createFromHexString(t),this.key=e,this.name=n,this.disabled=r}return t.readFromApi=function(e){var n="string"==typeof e?JSON.parse(e):e;return rt.keyPresent($t.ID,n),rt.keyPresent($t.NAME,n),rt.keyPresent($t.DISABLED,n),new t(n[$t.ID],n[$t.KEY],n[$t.NAME],n[$t.DISABLED])},t.prototype.toJSON=function(){var t;return(t={})[$t.ID]=this.id,t[$t.KEY]=this.key,t[$t.NAME]=this.name,t[$t.DISABLED]=this.disabled,t},t}(),Ht=function(){function t(){}return t.TYPE="api-key",t.DEFAULT_NAME="api-key",t}(),Wt=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t.NAME="name"}(Vt||(Vt={}));var Jt,Kt=function(t){function e(e,n){var r=n.baseAuthRoute+"/api_keys",i=Ht.DEFAULT_NAME;return t.call(this,i,e,r)||this}return Wt(e,t),e.prototype.createApiKey=function(t){var e,n=new x.Builder;return n.withMethod(N.POST).withPath(this.baseRoute).withDocument((e={},e[Vt.NAME]=t,e)).withRefreshToken(),this.requestClient.doAuthenticatedRequest(n.build()).then(function(t){return qt.readFromApi(t.body)}).catch(function(t){throw S(t)})},e.prototype.fetchApiKey=function(t){var e=new P.Builder;return e.withMethod(N.GET).withPath(this.getApiKeyRoute(t.toHexString())),e.withRefreshToken(),this.requestClient.doAuthenticatedRequest(e.build()).then(function(t){return qt.readFromApi(t.body)}).catch(function(t){throw S(t)})},e.prototype.fetchApiKeys=function(){var t=new P.Builder;return t.withMethod(N.GET).withPath(this.baseRoute),t.withRefreshToken(),this.requestClient.doAuthenticatedRequest(t.build()).then(function(t){var e=JSON.parse(t.body);if(Array.isArray(e))return e.map(function(t){return qt.readFromApi(t)});throw new p(new Error("unexpected non-array response from server"),l.DECODING_ERROR)}).catch(function(t){throw S(t)})},e.prototype.deleteApiKey=function(t){var e=new P.Builder;return e.withMethod(N.DELETE).withPath(this.getApiKeyRoute(t.toHexString())),e.withRefreshToken(),this.requestClient.doAuthenticatedRequest(e.build()).then(function(){})},e.prototype.enableApiKey=function(t){var e=new P.Builder;return e.withMethod(N.PUT).withPath(this.getApiKeyEnableRoute(t.toHexString())),e.withRefreshToken(),this.requestClient.doAuthenticatedRequest(e.build()).then(function(){})},e.prototype.disableApiKey=function(t){var e=new P.Builder;return e.withMethod(N.PUT).withPath(this.getApiKeyDisableRoute(t.toHexString())),e.withRefreshToken(),this.requestClient.doAuthenticatedRequest(e.build()).then(function(){})},e.prototype.getApiKeyRoute=function(t){return this.baseRoute+"/"+t},e.prototype.getApiKeyEnableRoute=function(t){return this.getApiKeyRoute(t)+"/enable"},e.prototype.getApiKeyDisableRoute=function(t){return this.getApiKeyRoute(t)+"/disable"},e}(Yt);(Jt||(Jt={})).KEY="key";var Gt,Xt,Zt=function(){return function(t,e){var n;void 0===e&&(e=Ht.DEFAULT_NAME),this.providerType=Ht.TYPE,this.providerCapabilities=new Ot(!1),this.providerName=e,this.key=t,this.material=((n={})[Jt.KEY]=this.key,n)}}(),Qt=function(){function t(){}return t.TYPE="local-userpass",t.DEFAULT_NAME="local-userpass",t}(),te=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t.EMAIL="email",t.PASSWORD="password"}(Gt||(Gt={})),function(t){t.EMAIL="email",t.PASSWORD="password",t.TOKEN="token",t.TOKEN_ID="tokenId",t.ARGS="arguments"}(Xt||(Xt={}));var ee,ne=function(t){function e(e,n,r){void 0===e&&(e=Qt.DEFAULT_NAME);var i=r.getAuthProviderRoute(e);return t.call(this,e,n,i)||this}return te(e,t),e.prototype.registerWithEmailInternal=function(t,e){var n,r=new D.Builder;return r.withMethod(N.POST).withPath(this.getRegisterWithEmailRoute()),r.withDocument(((n={})[Gt.EMAIL]=t,n[Gt.PASSWORD]=e,n)),this.requestClient.doRequest(r.build()).then(function(){})},e.prototype.confirmUserInternal=function(t,e){var n,r=new D.Builder;return r.withMethod(N.POST).withPath(this.getConfirmUserRoute()),r.withDocument(((n={})[Xt.TOKEN]=t,n[Xt.TOKEN_ID]=e,n)),this.requestClient.doRequest(r.build()).then(function(){})},e.prototype.resendConfirmationEmailInternal=function(t){var e,n=new D.Builder;return n.withMethod(N.POST).withPath(this.getResendConfirmationEmailRoute()),n.withDocument(((e={})[Xt.EMAIL]=t,e)),this.requestClient.doRequest(n.build()).then(function(){})},e.prototype.resetPasswordInternal=function(t,e,n){var r,i=new D.Builder;return i.withMethod(N.POST).withPath(this.getResetPasswordRoute()),i.withDocument(((r={})[Xt.TOKEN]=t,r[Xt.TOKEN_ID]=e,r[Xt.PASSWORD]=n,r)),this.requestClient.doRequest(i.build()).then(function(){})},e.prototype.sendResetPasswordEmailInternal=function(t){var e,n=new D.Builder;return n.withMethod(N.POST).withPath(this.getSendResetPasswordEmailRoute()),n.withDocument(((e={})[Xt.EMAIL]=t,e)),this.requestClient.doRequest(n.build()).then(function(){})},e.prototype.callResetPasswordFunctionInternal=function(t,e,n){var r,i=new D.Builder;return i.withMethod(N.POST).withPath(this.getCallResetPasswordFunctionRoute()),i.withDocument(((r={})[Xt.EMAIL]=t,r[Xt.PASSWORD]=e,r[Xt.ARGS]=n,r)),this.requestClient.doRequest(i.build()).then(function(){})},e.prototype.getRegisterWithEmailRoute=function(){return this.getExtensionRoute("register")},e.prototype.getConfirmUserRoute=function(){return this.getExtensionRoute("confirm")},e.prototype.getResendConfirmationEmailRoute=function(){return this.getExtensionRoute("confirm/send")},e.prototype.getResetPasswordRoute=function(){return this.getExtensionRoute("reset")},e.prototype.getSendResetPasswordEmailRoute=function(){return this.getExtensionRoute("reset/send")},e.prototype.getCallResetPasswordFunctionRoute=function(){return this.getExtensionRoute("reset/call")},e.prototype.getExtensionRoute=function(t){return this.baseRoute+"/"+t},e}(Yt);!function(t){t.USERNAME="username",t.PASSWORD="password"}(ee||(ee={}));var re,ie=function(){return function(t,e,n){var r;void 0===n&&(n=Qt.DEFAULT_NAME),this.username=t,this.password=e,this.providerName=n,this.providerType=Qt.TYPE,this.providerCapabilities=new Ot(!1),this.material=((r={})[ee.USERNAME]=this.username,r[ee.PASSWORD]=this.password,r)}}();!function(t){t.Normal="normal",t.Server="server",t.Unknown="unknown"}(re||(re={}));var oe,se=re,ae=function(){function t(t){this.suiteName=t,this.storage={}}return t.prototype.get=function(t){return this.storage[this.suiteName+"."+t]},t.prototype.set=function(t,e){this.storage[this.suiteName+"."+t]=e},t.prototype.remove=function(t){delete this.storage[this.suiteName+"."+t]},t}(),ue=function(){return function(){}}();!function(t){t[t.AUTH_EVENT=0]="AUTH_EVENT"}(oe||(oe={}));var le=function(){function t(t,e,n){this.serviceField="service",this.argumentsField="arguments",this.requestClient=t,this.serviceRoutes=e,this.serviceName=n,this.serviceBinders=[],this.allocatedStreams=[]}return t.prototype.callFunction=function(t,e,n){return this.requestClient.doAuthenticatedRequestWithDecoder(this.getCallServiceFunctionRequest(t,e),n)},t.prototype.streamFunction=function(t,e,n){var r=this;return this.requestClient.openAuthenticatedStreamWithDecoder(this.getStreamServiceFunctionRequest(t,e),n).then(function(t){return r.allocatedStreams.push(t),t})},t.prototype.bind=function(t){this.serviceBinders.push(t)},t.prototype.onRebindEvent=function(t){switch(t.type){case oe.AUTH_EVENT:t.event.kind===r.ActiveUserChanged&&this.closeAllocatedStreams()}this.serviceBinders.forEach(function(e){e.onRebindEvent(t)})},t.prototype.getStreamServiceFunctionRequest=function(t,e){var n={name:t};void 0!==this.serviceName&&(n[this.serviceField]=this.serviceName),n[this.argumentsField]=e;var r=new P.Builder;return r.withMethod(N.GET).withPath(this.serviceRoutes.functionCallRoute+"?stitch_request="+encodeURIComponent(J(i.a.stringify(n)))),r.build()},t.prototype.getCallServiceFunctionRequest=function(t,e){var n={name:t};void 0!==this.serviceName&&(n[this.serviceField]=this.serviceName),n[this.argumentsField]=e;var r=new x.Builder;return r.withMethod(N.POST).withPath(this.serviceRoutes.functionCallRoute),r.withDocument(n),r.build()},t.prototype.closeAllocatedStreams=function(){this.allocatedStreams.forEach(function(t){t.isOpen()&&t.close()}),this.allocatedStreams=[]},t}(),ce=function(){function t(t,e){this.functionService=new le(t,e.serviceRoutes)}return t.prototype.callFunction=function(t,e,n){return this.functionService.callFunction(t,e,n)},t}(),he=function(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}},fe=function(){function t(t){this.reconnecter=t,this.closed=!1,this.events=[],this.listeners=[],this.lastErr=void 0}return t.prototype.isOpen=function(){return!this.closed},t.prototype.addListener=function(t){var e=this;this.closed?setTimeout(function(){return t.onEvent(new F(j.ERROR_EVENT_NAME,"stream closed"))},0):void 0===this.lastErr?(this.listeners.push(t),this.poll()):setTimeout(function(){return t.onEvent(new F(j.ERROR_EVENT_NAME,e.lastErr))},0)},t.prototype.removeListener=function(t){var e=this.listeners.indexOf(t);-1!==e&&this.listeners.splice(e,1)},t.prototype.nextEvent=function(){var t=this;return this.closed?Promise.reject(new F(j.ERROR_EVENT_NAME,"stream closed")):void 0!==this.lastErr?Promise.reject(new F(j.ERROR_EVENT_NAME,this.lastErr)):new Promise(function(e,n){t.listenOnce({onEvent:function(t){e(t)}})})},t.prototype.close=function(){this.closed||(this.closed=!0,this.afterClose())},t.prototype.reconnect=function(e){var n=this;this.reconnecter?this.reconnecter().then(function(t){n.onReconnect(t)}).catch(function(r){if(!(r instanceof c&&r instanceof p))return n.closed=!0,n.events.push(new F(j.ERROR_EVENT_NAME,"stream closed: "+e)),void n.poll();setTimeout(function(){return n.reconnect(r)},t.RETRY_TIMEOUT_MILLIS)}):this.closed||(this.closed=!0,this.events.push(new F(j.ERROR_EVENT_NAME,"stream closed: "+e)),this.poll())},t.prototype.poll=function(){for(var t,e;0!==this.events.length;){var n=this.events.pop();try{for(var r=he(this.listeners),i=r.next();!i.done;i=r.next()){var o=i.value;o.onEvent&&o.onEvent(n)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=r.return)&&e.call(r)}finally{if(t)throw t.error}}}},t.prototype.listenOnce=function(t){var e=this;if(this.closed)setTimeout(function(){return t.onEvent(new F(j.ERROR_EVENT_NAME,"stream closed"))},0);else if(void 0===this.lastErr){var n={onEvent:function(r){e.removeListener(n),t.onEvent(r)}};this.addListener(n)}else setTimeout(function(){return t.onEvent(new F(j.ERROR_EVENT_NAME,e.lastErr))},0)},t.RETRY_TIMEOUT_MILLIS=5e3,t}(),de=function(){return function(t,e,n,r){this.method=t,this.url=e,this.headers=n,this.body=r}}();!function(t){var e=function(){function e(t){t&&(this.method=t.method,this.url=t.url,this.headers=t.headers,this.body=t.body)}return e.prototype.withMethod=function(t){return this.method=t,this},e.prototype.withUrl=function(t){return this.url=t,this},e.prototype.withHeaders=function(t){return this.headers=t,this},e.prototype.withBody=function(t){return this.body=t,this},e.prototype.build=function(){if(void 0===this.method)throw new Error("must set method");if(void 0===this.url)throw new Error("must set non-empty url");return new t(this.method,this.url,void 0===this.headers?{}:this.headers,this.body)},e}();t.Builder=e}(de||(de={}));var pe=function(){return function(t,e,n){var r=this;this.statusCode=e,this.body=n,this.headers={},Object.keys(t).map(function(e,n){r.headers[e.toLocaleLowerCase()]=t[e]})}}(),_e="/api/client/v2.0";function ye(t){return _e+"/app/"+t}function me(t){return ye(t)+"/functions/call"}function ge(t,e){return ye(t)+"/auth/providers/"+e}function ve(t,e){return ge(t,e)+"/login"}var be,we=function(){function t(t){var e=this;this.baseAuthRoute=_e+"/auth",this.sessionRoute=e.baseAuthRoute+"/session",this.profileRoute=e.baseAuthRoute+"/profile",this.clientAppId=t}return t.prototype.getAuthProviderRoute=function(t){return ge(this.clientAppId,t)},t.prototype.getAuthProviderLoginRoute=function(t){return ve(this.clientAppId,t)},t.prototype.getAuthProviderLinkRoute=function(t){return function(t,e){return ve(t,e)+"?link=true"}(this.clientAppId,t)},t.prototype.getAuthProviderExtensionRoute=function(t,e){return this.getAuthProviderRoute(t)+"/"+e},t}();!function(t){t.DEPLOYMENT_MODEL="deployment_model",t.LOCATION="location",t.HOSTNAME="hostname"}(be||(be={}));var Ee=function(){function t(t,e,n){this.deploymentModel=t,this.location=e,this.hostname=n}return t.fromJSON=function(e){return new t(e[be.DEPLOYMENT_MODEL],e[be.LOCATION],e[be.HOSTNAME])},t.prototype.toJSON=function(){var t;return(t={})[be.DEPLOYMENT_MODEL]=this.deploymentModel,t[be.LOCATION]=this.location,t[be.HOSTNAME]=this.hostname,t},t}();var Se=function(){function t(t,e){this.baseUrl=t,this.transport=e}return t.prototype.doRequestToURL=function(t,e){return this.transport.roundTrip(this.buildRequest(t,e)).catch(function(t){throw new p(t,l.TRANSPORT_ERROR)}).then(function(t){return function(t,e,n){return n.statusCode>=200&&n.statusCode<300?n:A(n)}(0,0,t)})},t.prototype.doStreamRequestToURL=function(t,e,n,r){return void 0===n&&(n=!0),this.transport.stream(this.buildRequest(t,e),n,r).catch(function(t){if(t instanceof c)throw t;throw new p(t,l.TRANSPORT_ERROR)})},t.prototype.buildRequest=function(t,e){return(new de.Builder).withMethod(t.method).withUrl(""+e+t.path).withHeaders(t.headers).withBody(t.body).build()},t}(),Ae=function(){return function(t){this.clientAppId=t,this.functionCallRoute=me(t)}}(),Ne=function(){return function(t){this.clientAppId=t,this.authRoutes=new we(t),this.serviceRoutes=new Ae(t),this.appMetadataRoute=function(t){return ye(t)+"/location"}(t),this.functionCallRoute=me(t)}}(),Te=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Oe=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,a)}u((r=r.apply(t,e||[])).next())})},Pe=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},Ce=function(t){function e(e,n,r){var i=t.call(this,n,r)||this;return i.clientAppId=e,i.routes=new Ne(e),i}return Te(e,t),e.prototype.doRequest=function(e){var n=this;return this.initAppMetadata().then(function(r){return t.prototype.doRequestToURL.call(n,e,r.hostname)})},e.prototype.doStreamRequest=function(e,n,r){var i=this;return void 0===n&&(n=!0),this.initAppMetadata().then(function(o){return t.prototype.doStreamRequestToURL.call(i,e,o.hostname,n,r)})},e.prototype.getBaseURL=function(){return Oe(this,void 0,void 0,function(){return Pe(this,function(t){return[2,this.initAppMetadata().then(function(t){return t.hostname})]})})},e.prototype.initAppMetadata=function(){var e=this;if(this.appMetadata)return Promise.resolve(this.appMetadata);var n=(new T.Builder).withMethod(N.GET).withPath(this.routes.appMetadataRoute).build();return t.prototype.doRequestToURL.call(this,n,this.baseUrl).then(function(t){return e.appMetadata=Ee.fromJSON(i.a.parse(t.body)),e.appMetadata})},e}(Se),xe=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ie=(function(t){function e(e,n){return t.call(this,e,n)||this}xe(e,t),e.prototype.doRequest=function(e){return t.prototype.doRequestToURL.call(this,e,this.baseUrl)},e.prototype.doStreamRequest=function(e,n,r){return void 0===n&&(n=!0),t.prototype.doStreamRequestToURL.call(this,e,this.baseUrl,n,r)},e.prototype.getBaseURL=function(){return Promise.resolve(this.baseUrl)}}(Se),function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),Re=function(t){function e(e){var n=t.call(this)||this;return n.type=oe.AUTH_EVENT,n.event=e,n}return Ie(e,t),e}(ue),Be=function(){function t(t,e,n,r){this.baseUrl=t,this.storage=e,this.dataDirectory=n,this.transport=r}return t.prototype.builder=function(){return new t.Builder(this)},t}();!function(t){var e=function(){function e(t){t&&(this.baseUrl=t.baseUrl,this.storage=t.storage,this.dataDirectory=t.dataDirectory,this.transport=t.transport)}return e.prototype.withBaseUrl=function(t){return this.baseUrl=t,this},e.prototype.withStorage=function(t){return this.storage=t,this},e.prototype.withDataDirectory=function(t){return this.dataDirectory=t,this},e.prototype.withTransport=function(t){return this.transport=t,this},e.prototype.build=function(){return new t(this.baseUrl,this.storage,this.dataDirectory,this.transport)},e}();t.Builder=e}(Be||(Be={}));var De=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Me=function(t){function e(e,n,r){var i=t.call(this,e.baseUrl,e.storage,e.dataDirectory,e.transport)||this;return i.localAppVersion=r,i.localAppName=n,i}return De(e,t),e.prototype.builder=function(){return new e.Builder(this)},e}(Be);!function(t){var e=function(e){function n(t){var n=e.call(this,t)||this;return t&&(n.localAppVersion=t.localAppVersion,n.localAppName=t.localAppName),n}return De(n,e),n.prototype.withLocalAppName=function(t){return this.localAppName=t,this},n.prototype.withLocalAppVersion=function(t){return this.localAppVersion=t,this},n.prototype.build=function(){var n=e.prototype.build.call(this);return new t(n,this.localAppName,this.localAppVersion)},n}(Be.Builder);t.Builder=e}(Me||(Me={}));var Ue,ke=function(){return function(t,e,n,r){this.clientAppId=t,this.dataDirectory=e,this.localAppName=n,this.localAppVersion=r}}(),Le=function(){return function(t,e,n){void 0===e&&(e=Rt.DEFAULT_NAME),void 0===n&&(n=Rt.TYPE),this.redirectUrl=t,this.providerName=e,this.providerType=n}}(),Fe=function(){return function(t,e,n){void 0===e&&(e=kt.DEFAULT_NAME),void 0===n&&(n=kt.TYPE),this.redirectUrl=t,this.providerName=e,this.providerType=n}}(),je=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),$e=function(t){function e(e,n){return t.call(this,e,n)||this}return je(e,t),e.prototype.createApiKey=function(e){return t.prototype.createApiKey.call(this,e)},e.prototype.fetchApiKey=function(e){return t.prototype.fetchApiKey.call(this,e)},e.prototype.fetchApiKeys=function(){return t.prototype.fetchApiKeys.call(this)},e.prototype.deleteApiKey=function(e){return t.prototype.deleteApiKey.call(this,e)},e.prototype.enableApiKey=function(e){return t.prototype.enableApiKey.call(this,e)},e.prototype.disableApiKey=function(e){return t.prototype.disableApiKey.call(this,e)},e}(Kt);(Ue||(Ue={})).factory=new(function(){function t(){}return t.prototype.getClient=function(t,e,n){return new $e(t,n)},t}());var ze,Ye=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ve=function(t){function e(e,n){return t.call(this,Qt.DEFAULT_NAME,e,n)||this}return Ye(e,t),e.prototype.registerWithEmail=function(e,n){return t.prototype.registerWithEmailInternal.call(this,e,n)},e.prototype.confirmUser=function(e,n){return t.prototype.confirmUserInternal.call(this,e,n)},e.prototype.resendConfirmationEmail=function(e){return t.prototype.resendConfirmationEmailInternal.call(this,e)},e.prototype.resetPassword=function(e,n,r){return t.prototype.resetPasswordInternal.call(this,e,n,r)},e.prototype.sendResetPasswordEmail=function(e){return t.prototype.sendResetPasswordEmailInternal.call(this,e)},e.prototype.callResetPasswordFunction=function(e,n,r){return t.prototype.callResetPasswordFunctionInternal.call(this,e,n,r)},e}(ne);(ze||(ze={})).factory=new(function(){function t(){}return t.prototype.getClient=function(t,e,n){return new Ve(e,n)},t}());var qe={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(qe.arrayBuffer)var He=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],We=ArrayBuffer.isView||function(t){return t&&He.indexOf(Object.prototype.toString.call(t))>-1};function Je(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function Ke(t){return"string"!=typeof t&&(t=String(t)),t}function Ge(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return qe.iterable&&(e[Symbol.iterator]=function(){return e}),e}function Xe(t){this.map={},t instanceof Xe?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function Ze(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function Qe(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function tn(t){var e=new FileReader,n=Qe(e);return e.readAsArrayBuffer(t),n}function en(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function nn(){return this.bodyUsed=!1,this._initBody=function(t){this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:qe.blob&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:qe.formData&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:qe.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():qe.arrayBuffer&&qe.blob&&function(t){return t&&DataView.prototype.isPrototypeOf(t)}(t)?(this._bodyArrayBuffer=en(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):qe.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(t)||We(t))?this._bodyArrayBuffer=en(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):qe.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},qe.blob&&(this.blob=function(){var t=Ze(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?Ze(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(tn)}),this.text=function(){var t=Ze(this);if(t)return t;if(this._bodyBlob)return function(t){var e=new FileReader,n=Qe(e);return e.readAsText(t),n}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),n=new Array(e.length),r=0;r<e.length;r++)n[r]=String.fromCharCode(e[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},qe.formData&&(this.formData=function(){return this.text().then(sn)}),this.json=function(){return this.text().then(JSON.parse)},this}Xe.prototype.append=function(t,e){t=Je(t),e=Ke(e);var n=this.map[t];this.map[t]=n?n+", "+e:e},Xe.prototype.delete=function(t){delete this.map[Je(t)]},Xe.prototype.get=function(t){return t=Je(t),this.has(t)?this.map[t]:null},Xe.prototype.has=function(t){return this.map.hasOwnProperty(Je(t))},Xe.prototype.set=function(t,e){this.map[Je(t)]=Ke(e)},Xe.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},Xe.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),Ge(t)},Xe.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),Ge(t)},Xe.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),Ge(t)},qe.iterable&&(Xe.prototype[Symbol.iterator]=Xe.prototype.entries);var rn=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function on(t,e){var n=(e=e||{}).body;if(t instanceof on){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new Xe(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,n||null==t._bodyInit||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new Xe(e.headers)),this.method=function(t){var e=t.toUpperCase();return rn.indexOf(e)>-1?e:t}(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function sn(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),i=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(i))}}),e}function an(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new Xe(e.headers),this.url=e.url||"",this._initBody(t)}on.prototype.clone=function(){return new on(this,{body:this._bodyInit})},nn.call(on.prototype),nn.call(an.prototype),an.prototype.clone=function(){return new an(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new Xe(this.headers),url:this.url})},an.error=function(){var t=new an(null,{status:0,statusText:""});return t.type="error",t};var un=[301,302,303,307,308];an.redirect=function(t,e){if(-1===un.indexOf(e))throw new RangeError("Invalid status code");return new an(null,{status:e,headers:{location:t}})};var ln=self.DOMException;try{new ln}catch(t){(ln=function(t,e){this.message=t,this.name=e;var n=Error(t);this.stack=n.stack}).prototype=Object.create(Error.prototype),ln.prototype.constructor=ln}function cn(t,e){return new Promise(function(n,r){var i=new on(t,e);if(i.signal&&i.signal.aborted)return r(new ln("Aborted","AbortError"));var o=new XMLHttpRequest;function s(){o.abort()}o.onload=function(){var t={status:o.status,statusText:o.statusText,headers:function(t){var e=new Xe;return t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var n=t.split(":"),r=n.shift().trim();if(r){var i=n.join(":").trim();e.append(r,i)}}),e}(o.getAllResponseHeaders()||"")};t.url="responseURL"in o?o.responseURL:t.headers.get("X-Request-URL");var e="response"in o?o.response:o.responseText;n(new an(e,t))},o.onerror=function(){r(new TypeError("Network request failed"))},o.ontimeout=function(){r(new TypeError("Network request failed"))},o.onabort=function(){r(new ln("Aborted","AbortError"))},o.open(i.method,i.url,!0),"include"===i.credentials?o.withCredentials=!0:"omit"===i.credentials&&(o.withCredentials=!1),"responseType"in o&&qe.blob&&(o.responseType="blob"),i.headers.forEach(function(t,e){o.setRequestHeader(e,t)}),i.signal&&(i.signal.addEventListener("abort",s),o.onreadystatechange=function(){4===o.readyState&&i.signal.removeEventListener("abort",s)}),o.send(void 0===i._bodyInit?null:i._bodyInit)})}cn.polyfill=!0,self.fetch||(self.fetch=cn,self.Headers=Xe,self.Request=on,self.Response=an);var hn,fn=function(){function t(){}return t.prototype.roundTrip=function(t){var e=cn(t.url,{body:t.body,headers:t.headers,method:t.method,mode:"cors"}),n=e.then(function(t){return t.text()});return Promise.all([e,n]).then(function(t){var e=t[0],n=t[1],r={};return e.headers.forEach(function(t,e){r[e]=t}),new pe(r,e.status,n)})},t.prototype.stream=function(t,e,n){throw void 0===e&&(e=!0),new L(R.StreamingNotSupported)},t}(),dn=function(){function t(t){this.suiteName=t}return t.prototype.get=function(t){return localStorage.getItem(this.getKey(t))},t.prototype.set=function(t,e){localStorage.setItem(this.getKey(t),e)},t.prototype.remove=function(t){localStorage.removeItem(this.getKey(t))},t.prototype.getKey=function(t){return"__stitch.client."+this.suiteName+"."+t},t}(),pn=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),_n=function(t){function e(e,n,r,i){var o=t.call(this,i)||this;return o.evtSrc=e,o.onOpenError=r,o.openedOnce=!1,o.evtSrc.onopen=function(t){n(o),o.openedOnce=!0},o.reset(),o}return pn(e,t),e.prototype.open=function(){if(this.closed)throw new L(R.StreamClosed)},e.prototype.afterClose=function(){this.evtSrc.close()},e.prototype.onReconnect=function(t){this.evtSrc=t.evtSrc,this.reset(),this.events=t.events.concat(this.events)},e.prototype.reset=function(){var t=this;this.evtSrc.onmessage=function(e){t.events.push(new F(F.MESSAGE_EVENT,e.data)),t.poll()},this.evtSrc.onerror=function(e){return e instanceof MessageEvent?(t.lastErr=e.data,t.events.push(new F(j.ERROR_EVENT_NAME,t.lastErr)),t.close(),void t.poll()):t.openedOnce?(t.evtSrc.close(),void t.reconnect()):(t.close(),void t.onOpenError(new Error("event source failed to open and will not reconnect; check network log for more details")))}},e}(fe),yn=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),mn=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},gn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return yn(e,t),e.prototype.stream=function(t,e,n){void 0===e&&(e=!0);var r=mn({},t.headers);return r[E.ACCEPT]=w.TEXT_EVENT_STREAM,r[E.CONTENT_TYPE]=w.TEXT_EVENT_STREAM,cn(t.url+"&stitch_validate=true",{body:t.body,headers:r,method:t.method,mode:"cors"}).then(function(e){var r={};return e.headers.forEach(function(t,e){r[e]=t}),e.status<200||e.status>=300?e.text().then(function(t){return A(new pe(r,e.status,t))}):new Promise(function(e,r){return new _n(new EventSource(t.url),function(t){return e(t)},function(t){return r(t)},n?function(){return n().then(function(t){return t})}:void 0)})})},e}(fn),vn=function(){function t(t){this.proxy=t}return t.prototype.callFunction=function(t,e,n){return this.proxy.callFunction(t,e,n)},t.prototype.streamFunction=function(t,e,n){return this.proxy.streamFunction(t,e,n)},t}(),bn=n(25);!function(t){t.StitchError="_stitch_error",t.State="_stitch_state",t.UserAuth="_stitch_ua",t.LinkUser="_stitch_link_user",t.StitchLink="_stitch_link",t.ClientAppId="_stitch_client_app_id"}(hn||(hn={}));var wn,En=hn;!function(t){t.ProviderName="_stitch_redirect_provider_name",t.ProviderType="_stitch_redirect_provider_type",t.State="_stitch_redirect_state"}(wn||(wn={}));var Sn=wn,An=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Nn=function(t){function e(e){return t.call(this,e)||this}return An(e,t),e}(c),Tn=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),On=function(t){function e(e,n,r,i,o,s,a,u){var l=t.call(this,e,n,r,i,o,s,u)||this;return l.auth=a,l}return Tn(e,t),e.prototype.linkWithCredential=function(t){return this.auth.linkWithCredential(this,t)},e.prototype.linkUserWithRedirect=function(t){return this.auth.linkWithRedirectInternal(this,t)},e}(Y),Pn=function(){function t(t){this.auth=t}return t.prototype.makeUser=function(t,e,n,r,i,o,s){return new On(t,e,n,r,i,o,this.auth,s)},t}(),Cn=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),xn=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s},In="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",Rn=function(t){function e(e,n,r,i,o){void 0===o&&(o=window);var s=t.call(this,e,n,r)||this;return s.browserAuthRoutes=n,s.authStorage=r,s.appInfo=i,s.jsdomWindow=o,s.listeners=new Set,s.synchronousListeners=new Set,s}return Cn(e,t),Object.defineProperty(e.prototype,"userFactory",{get:function(){return new Pn(this)},enumerable:!0,configurable:!0}),e.prototype.getProviderClient=function(t,e){return function(t){return void 0!==t.getClient}(t)?t.getClient(this,this.requestClient,this.authRoutes):t.getNamedClient(e,this.requestClient,this.authRoutes)},e.prototype.loginWithCredential=function(e){return t.prototype.loginWithCredentialInternal.call(this,e)},e.prototype.loginWithRedirect=function(t){var e=this,n=this.prepareRedirect(t),r=n.redirectUrl,i=n.state;this.requestClient.getBaseURL().then(function(n){e.jsdomWindow.location.replace(n+e.browserAuthRoutes.getAuthProviderRedirectRoute(t,r,i,e.deviceInfo))})},e.prototype.linkWithRedirectInternal=function(t,n){var r=this;if(void 0!==this.user&&t.id!==this.user.id)return Promise.reject(new L(R.UserNoLongerValid));var i=this.prepareRedirect(n),o=i.redirectUrl,s=i.state;return this.requestClient.getBaseURL().then(function(t){var i=t+r.browserAuthRoutes.getAuthProviderLinkRedirectRoute(n,o,s,r.deviceInfo);return(e.injectedFetch?e.injectedFetch:fetch)(new Request(i,{credentials:"include",headers:{Authorization:"Bearer "+r.authInfo.accessToken},mode:"cors"}))}).then(function(t){r.jsdomWindow.location.replace(t.headers.get("X-Stitch-Location"))})},e.prototype.hasRedirectResult=function(){var t=!1;try{return t=this.parseRedirect().isValid}catch(t){return!1}finally{t||this.cleanupRedirect()}},e.prototype.handleRedirectResult=function(){try{var t=this.authStorage.get(Sn.ProviderName),e=this.authStorage.get(Sn.ProviderType),n=this.parseRedirect();return this.loginWithCredentialInternal(new q(this.processRedirectResult(n),e,t,n.asLink)).then(function(t){return t})}catch(t){return Promise.reject(t)}},e.prototype.linkWithCredential=function(e,n){return t.prototype.linkUserWithCredentialInternal.call(this,e,n)},e.prototype.logout=function(){return arguments.length>0?Promise.reject(new L(R.UnexpectedArguments)):t.prototype.logoutInternal.call(this)},e.prototype.logoutUserWithId=function(e){return t.prototype.logoutUserWithIdInternal.call(this,e)},e.prototype.removeUser=function(){return arguments.length>0?Promise.reject(new L(R.UnexpectedArguments)):t.prototype.removeUserInternal.call(this)},e.prototype.removeUserWithId=function(e){return t.prototype.removeUserWithIdInternal.call(this,e)},Object.defineProperty(e.prototype,"deviceInfo",{get:function(){var t={};this.hasDeviceId&&(t[Tt.DEVICE_ID]=this.deviceId),void 0!==this.appInfo.localAppName&&(t[Tt.APP_ID]=this.appInfo.localAppName),void 0!==this.appInfo.localAppVersion&&(t[Tt.APP_VERSION]=this.appInfo.localAppVersion);var e=Object(bn.detect)();return e?(t[Tt.PLATFORM]=e.name,t[Tt.PLATFORM_VERSION]=e.version):(t[Tt.PLATFORM]="web",t[Tt.PLATFORM_VERSION]="0.0.0"),t[Tt.SDK_VERSION]="4.8.0",t},enumerable:!0,configurable:!0}),e.prototype.addAuthListener=function(t){this.listeners.add(t),this.onAuthEvent(t),this.dispatchAuthEvent({kind:r.ListenerRegistered})},e.prototype.addSynchronousAuthListener=function(t){this.listeners.add(t),this.onAuthEvent(t),this.dispatchAuthEvent({kind:r.ListenerRegistered})},e.prototype.removeAuthListener=function(t){this.listeners.delete(t)},e.prototype.onAuthEvent=function(t){var e=this;if(t)new Promise(function(n){t.onAuthEvent&&t.onAuthEvent(e),n(void 0)});else this.listeners.forEach(function(t){e.onAuthEvent(t)})},e.prototype.dispatchAuthEvent=function(t){var e=this;switch(t.kind){case r.ActiveUserChanged:this.dispatchBlockToListeners(function(n){n.onActiveUserChanged&&n.onActiveUserChanged(e,t.currentActiveUser,t.previousActiveUser)});break;case r.ListenerRegistered:this.dispatchBlockToListeners(function(t){t.onListenerRegistered&&t.onListenerRegistered(e)});break;case r.UserAdded:this.dispatchBlockToListeners(function(n){n.onUserAdded&&n.onUserAdded(e,t.addedUser)});break;case r.UserLinked:this.dispatchBlockToListeners(function(n){n.onUserLinked&&n.onUserLinked(e,t.linkedUser)});break;case r.UserLoggedIn:this.dispatchBlockToListeners(function(n){n.onUserLoggedIn&&n.onUserLoggedIn(e,t.loggedInUser)});break;case r.UserLoggedOut:this.dispatchBlockToListeners(function(n){n.onUserLoggedOut&&n.onUserLoggedOut(e,t.loggedOutUser)});break;case r.UserRemoved:this.dispatchBlockToListeners(function(n){n.onUserRemoved&&n.onUserRemoved(e,t.removedUser)});break;default:return this.assertNever(t)}},e.prototype.refreshCustomData=function(){return this.refreshAccessToken()},e.prototype.assertNever=function(t){throw new Error("unexpected object: "+t)},e.prototype.dispatchBlockToListeners=function(t){this.synchronousListeners.forEach(t),this.listeners.forEach(function(e){new Promise(function(n){t(e),n(void 0)})})},e.prototype.cleanupRedirect=function(){this.jsdomWindow.history.replaceState(null,"",this.pageRootUrl()),this.authStorage.remove(Sn.State),this.authStorage.remove(Sn.ProviderName),this.authStorage.remove(Sn.ProviderType)},e.prototype.parseRedirect=function(){if(void 0===this.jsdomWindow)throw new Nn("running in a non-browser environment");if(!this.jsdomWindow.location||!this.jsdomWindow.location.hash)throw new Nn("window location hash was undefined");var t=this.authStorage.get(Sn.State);return function(t,e,n){var r=t.split("&"),i=new Bn;return r.forEach(function(t){var r=t.split("=");switch(decodeURIComponent(r[0])){case En.StitchError:i.lastError=decodeURIComponent(r[1]);break;case En.UserAuth:try{i.authInfo=function(t){var e=t.split("$");if(4!==e.length)throw new Nn("invalid user auth data provided while marshalling user authentication data: "+t);var n=xn(e,4),r=n[0],i=n[1],s=n[2],a=n[3];return new o(s,a,r,i)}(decodeURIComponent(r[1]))}catch(t){i.lastError=t}break;case En.StitchLink:"ok"===r[1]&&(i.asLink=!0);break;case En.State:var s=decodeURIComponent(r[1]);e===s&&(i.stateValid=!0);break;case En.ClientAppId:var a=decodeURIComponent(r[1]);n===a&&(i.clientAppIdValid=!0)}}),i}(this.jsdomWindow.location.hash.substring(1),t,this.appInfo.clientAppId)},e.prototype.processRedirectResult=function(t){try{if(!t.isValid)throw new Nn("invalid redirect result");if(t.lastError)throw new Nn("error handling redirect: "+t.lastError);if(!t.authInfo)throw new Nn("no user auth value was found: it could not be decoded from fragment")}catch(t){throw t}finally{this.cleanupRedirect()}return t.authInfo},e.prototype.prepareRedirect=function(t){this.authStorage.set(Sn.ProviderName,t.providerName),this.authStorage.set(Sn.ProviderType,t.providerType);var e=t.redirectUrl;void 0===e&&(e=this.pageRootUrl());var n=function(){for(var t="",e=0;e<64;++e)t+=In.charAt(Math.floor(Math.random()*In.length));return t}();return this.authStorage.set(Sn.State,n),{redirectUrl:e,state:n}},e.prototype.pageRootUrl=function(){return[this.jsdomWindow.location.protocol,"//",this.jsdomWindow.location.host,this.jsdomWindow.location.pathname].join("")},e}(At);var Bn=function(){function t(){this.stateValid=!1,this.clientAppIdValid=!1,this.asLink=!1}return Object.defineProperty(t.prototype,"isValid",{get:function(){return this.stateValid&&this.clientAppIdValid},enumerable:!0,configurable:!0}),t}();var Dn=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Mn=function(t){function e(e){return t.call(this,e)||this}return Dn(e,t),e.prototype.getAuthProviderRedirectRoute=function(t,e,n,r){return this.getAuthProviderLoginRoute(t.providerName)+"?redirect="+encodeURI(e)+"&state="+n+"&device="+this.uriEncodeObject(r)},e.prototype.getAuthProviderLinkRedirectRoute=function(t,e,n,r){return this.getAuthProviderLoginRoute(t.providerName)+"?redirect="+encodeURI(e)+"&state="+n+"&device="+this.uriEncodeObject(r)+"&link=true&providerRedirectHeader=true"},e.prototype.uriEncodeObject=function(t){return encodeURIComponent(J(JSON.stringify(t)))},e}(we),Un=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),kn=function(t){function e(e){var n=t.call(this,e)||this;return n.authRoutes=new Mn(e),n}return Un(e,t),e}(Ne),Ln=function(){function t(t,e){this.info=new ke(t,e.dataDirectory,e.localAppName,e.localAppVersion),this.routes=new kn(this.info.clientAppId);var n=new Ce(t,e.baseUrl,e.transport);this.auth=new Rn(n,this.routes.authRoutes,e.storage,this.info),this.coreClient=new ce(this.auth,this.routes),this.serviceClients=[],this.auth.addSynchronousAuthListener(this)}return t.prototype.getServiceClient=function(t,e){if(function(t){return void 0!==t.getClient}(t)){var n=new le(this.auth,this.routes.serviceRoutes,"");return this.bindServiceClient(n),t.getClient(n,this.info)}n=new le(this.auth,this.routes.serviceRoutes,e);return this.bindServiceClient(n),t.getNamedClient(n,this.info)},t.prototype.getGeneralServiceClient=function(t){var e=new le(this.auth,this.routes.serviceRoutes,t);return this.bindServiceClient(e),new vn(e)},t.prototype.callFunction=function(t,e){return this.coreClient.callFunction(t,e)},t.prototype.onActiveUserChanged=function(t,e,n){this.onRebindEvent(new Re({currentActiveUser:e,kind:r.ActiveUserChanged,previousActiveUser:n}))},t.prototype.bindServiceClient=function(t){this.serviceClients.push(t)},t.prototype.onRebindEvent=function(t){this.serviceClients.forEach(function(e){e.onRebindEvent(t)})},t}();var Fn,jn={},$n=function(){function t(){}return Object.defineProperty(t,"defaultAppClient",{get:function(){if(void 0===t.defaultClientAppId)throw new Error("default app client has not yet been initialized/set");return jn[t.defaultClientAppId]},enumerable:!0,configurable:!0}),t.getAppClient=function(t){if(void 0===jn[t])throw new Error("client for app '"+t+"' has not yet been initialized");return jn[t]},t.hasAppClient=function(t){return void 0!==jn[t]},t.initializeDefaultAppClient=function(e,n){if(void 0===n&&(n=(new Me.Builder).build()),void 0===e||""===e)throw new Error("clientAppId must be set to a non-empty string");if(void 0!==t.defaultClientAppId)throw new Error("default app can only be set once; currently set to '"+t.defaultClientAppId+"'");var r=t.initializeAppClient(e,n);return t.defaultClientAppId=e,r},t.initializeAppClient=function(e,n){if(void 0===n&&(n=(new Me.Builder).build()),void 0===e||""===e)throw new Error("clientAppId must be set to a non-empty string");if(void 0!==jn[e])throw new Error("client for app '"+e+"' has already been initialized");var r=n.builder?n.builder():new Me.Builder(n);void 0===r.storage&&r.withStorage(new dn(e)),void 0===r.transport&&(window.EventSource?r.withTransport(new gn):r.withTransport(new fn)),void 0!==r.baseUrl&&""!==r.baseUrl||r.withBaseUrl("https://stitch.mongodb.com"),void 0!==r.localAppName&&""!==r.localAppName||r.withLocalAppName(t.localAppName),void 0!==r.localAppVersion&&""!==r.localAppVersion||r.withLocalAppVersion(t.localAppVersion);var i=new Ln(e,r.build());return jn[e]=i,i},t.clearApps=function(){jn={}},t}(),zn=function(){function t(t,e,n,r){this.command=t,this.args=e,this.service=n,r&&(this.collectionDecoder=new(function(){function t(){}return t.prototype.decode=function(t){return t instanceof Array?t.map(function(t){return r.decode(t)}):[r.decode(t)]},t}()))}return t.prototype.iterator=function(){return this.executeRead().then(function(t){return t[Symbol.iterator]()})},t.prototype.first=function(){return this.executeRead().then(function(t){return t[0]})},t.prototype.toArray=function(){return this.executeRead()},t.prototype.asArray=function(){return this.toArray()},t.prototype.executeRead=function(){return this.service.callFunction(this.command,[this.args],this.collectionDecoder)},t}();function Yn(t){switch(t){case"insert":return Fn.Insert;case"delete":return Fn.Delete;case"replace":return Fn.Replace;case"update":return Fn.Update;default:return Fn.Unknown}}!function(t){t.Insert="insert",t.Delete="delete",t.Replace="replace",t.Update="update",t.Unknown="unknown"}(Fn||(Fn={}));var Vn,qn,Hn,Wn,Jn,Kn,Gn,Xn=function(){return function(t){var e={};t.forEach(function(t,n){e[n]=t}),this.insertedIds=e}}();!function(t){t.InsertedIds="insertedIds"}(Vn||(Vn={})),function(t){t.InsertedId="insertedId"}(qn||(qn={})),function(t){t.MatchedCount="matchedCount",t.ModifiedCount="modifiedCount",t.UpsertedId="upsertedId"}(Hn||(Hn={})),function(t){t.DeletedCount="deletedCount"}(Wn||(Wn={})),function(t){t.UpdatedFields="updatedFields",t.RemovedFields="removedFields"}(Jn||(Jn={})),function(t){t.Id="_id",t.OperationType="operationType",t.FullDocument="fullDocument",t.DocumentKey="documentKey",t.Namespace="ns",t.NamespaceDb="db",t.NamespaceColl="coll",t.UpdateDescription="updateDescription"}(Kn||(Kn={})),function(t){t.OperationType="ot",t.FullDocument="fd",t.DocumentKey="dk",t.UpdateDescription="ud",t.StitchDocumentVersion="sdv",t.StitchDocumentHash="sdh"}(Gn||(Gn={}));var Zn=function(){function t(){}return t.prototype.decode=function(t){return new Xn(t[Vn.InsertedIds])},t}(),Qn=function(){function t(){}return t.prototype.decode=function(t){return{insertedId:t[qn.InsertedId]}},t}(),tr=function(){function t(){}return t.prototype.decode=function(t){return{matchedCount:t[Hn.MatchedCount],modifiedCount:t[Hn.ModifiedCount],upsertedId:t[Hn.UpsertedId]}},t}(),er=function(){function t(){}return t.prototype.decode=function(t){return{deletedCount:t[Wn.DeletedCount]}},t}(),nr=function(){function t(){}return t.prototype.decode=function(t){return rt.keyPresent(Jn.UpdatedFields,t),rt.keyPresent(Jn.RemovedFields,t),{removedFields:t[Jn.RemovedFields],updatedFields:t[Jn.UpdatedFields]}},t}();function rr(t,e,n,r){var i,o;return i=e in t?ar.updateDescriptionDecoder.decode(t[e]):void 0,n in t?(o=t[n],r&&(o=r.decode(o))):o=void 0,{updateDescription:i,fullDocument:o}}var ir,or=function(){function t(t){this.decoder=t}return t.prototype.decode=function(t){rt.keyPresent(Kn.Id,t),rt.keyPresent(Kn.OperationType,t),rt.keyPresent(Kn.Namespace,t),rt.keyPresent(Kn.DocumentKey,t);var e=t[Kn.Namespace],n=rr(t,Kn.UpdateDescription,Kn.FullDocument,this.decoder),r=n.updateDescription,i=n.fullDocument;return{documentKey:t[Kn.DocumentKey],fullDocument:i,id:t[Kn.Id],namespace:{collection:e[Kn.NamespaceColl],database:e[Kn.NamespaceDb]},operationType:Yn(t[Kn.OperationType]),updateDescription:r}},t}(),sr=function(){function t(t){this.decoder=t}return t.prototype.decode=function(t){rt.keyPresent(Gn.OperationType,t),rt.keyPresent(Gn.DocumentKey,t);var e,n,r=rr(t,Gn.UpdateDescription,Gn.FullDocument,this.decoder),i=r.updateDescription,o=r.fullDocument;return e=Gn.StitchDocumentVersion in t?t[Gn.StitchDocumentVersion]:void 0,n=Gn.StitchDocumentHash in t?t[Gn.StitchDocumentHash]:void 0,{documentKey:t[Gn.DocumentKey],fullDocument:o,operationType:Yn(t[Gn.OperationType]),stitchDocumentHash:n,stitchDocumentVersion:e,updateDescription:i}},t}(),ar=function(){function t(){}return t.remoteInsertManyResultDecoder=new Zn,t.remoteInsertOneResultDecoder=new Qn,t.remoteUpdateResultDecoder=new tr,t.remoteDeleteResultDecoder=new er,t.updateDescriptionDecoder=new nr,t.ChangeEventDecoder=or,t.CompactChangeEventDecoder=sr,t}(),ur=ar,lr=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},cr=function(){function t(t,e,n,r){var i=this;this.name=t,this.databaseName=e,this.service=n,this.codec=r,this.namespace=this.databaseName+"."+this.name,this.baseOperationArgs={collection:i.name,database:i.databaseName}}return t.prototype.withCollectionType=function(e){return new t(this.name,this.databaseName,this.service,e)},t.prototype.find=function(t,e){void 0===t&&(t={});var n=lr({},this.baseOperationArgs);return n.query=t,e&&(e.limit&&(n.limit=e.limit),e.projection&&(n.project=e.projection),e.sort&&(n.sort=e.sort)),new zn("find",n,this.service,this.codec)},t.prototype.findOne=function(t,e){void 0===t&&(t={});var n=lr({},this.baseOperationArgs);return n.query=t,e&&(e.projection&&(n.project=e.projection),e.sort&&(n.sort=e.sort)),this.service.callFunction("findOne",[n],this.codec)},t.prototype.findOneAndUpdate=function(t,e,n){var r=lr({},this.baseOperationArgs);return r.filter=t,r.update=e,n&&(n.projection&&(r.projection=n.projection),n.sort&&(r.sort=n.sort),n.upsert&&(r.upsert=!0),n.returnNewDocument&&(r.returnNewDocument=!0)),this.service.callFunction("findOneAndUpdate",[r],this.codec)},t.prototype.findOneAndReplace=function(t,e,n){var r=lr({},this.baseOperationArgs);return r.filter=t,r.update=e,n&&(n.projection&&(r.projection=n.projection),n.sort&&(r.sort=n.sort),n.upsert&&(r.upsert=!0),n.returnNewDocument&&(r.returnNewDocument=!0)),this.service.callFunction("findOneAndReplace",[r],this.codec)},t.prototype.findOneAndDelete=function(t,e){var n=lr({},this.baseOperationArgs);return n.filter=t,e&&(e.projection&&(n.projection=e.projection),e.sort&&(n.sort=e.sort)),this.service.callFunction("findOneAndDelete",[n],this.codec)},t.prototype.aggregate=function(t){var e=lr({},this.baseOperationArgs);return e.pipeline=t,new zn("aggregate",e,this.service,this.codec)},t.prototype.count=function(t,e){void 0===t&&(t={});var n=lr({},this.baseOperationArgs);return n.query=t,e&&e.limit&&(n.limit=e.limit),this.service.callFunction("count",[n])},t.prototype.insertOne=function(t){var e=lr({},this.baseOperationArgs);return e.document=this.generateObjectIdIfMissing(this.codec?this.codec.encode(t):t),this.service.callFunction("insertOne",[e],ur.remoteInsertOneResultDecoder)},t.prototype.insertMany=function(t){var e=this,n=lr({},this.baseOperationArgs);return n.documents=t.map(function(t){return e.generateObjectIdIfMissing(e.codec?e.codec.encode(t):t)}),this.service.callFunction("insertMany",[n],ur.remoteInsertManyResultDecoder)},t.prototype.deleteOne=function(t){return this.executeDelete(t,!1)},t.prototype.deleteMany=function(t){return this.executeDelete(t,!0)},t.prototype.updateOne=function(t,e,n){return this.executeUpdate(t,e,n,!1)},t.prototype.updateMany=function(t,e,n){return this.executeUpdate(t,e,n,!0)},t.prototype.watch=function(t){var e=lr({},this.baseOperationArgs);return void 0!==t&&(t instanceof Array?0!==t.length&&(e.ids=t):t instanceof Object&&(e.filter=t)),e.useCompactEvents=!1,this.service.streamFunction("watch",[e],new ur.ChangeEventDecoder(this.codec))},t.prototype.watchCompact=function(t){var e=lr({},this.baseOperationArgs);return e.ids=t,e.useCompactEvents=!0,this.service.streamFunction("watch",[e],new ur.CompactChangeEventDecoder(this.codec))},t.prototype.executeDelete=function(t,e){var n=lr({},this.baseOperationArgs);return n.query=t,this.service.callFunction(e?"deleteMany":"deleteOne",[n],ur.remoteDeleteResultDecoder)},t.prototype.executeUpdate=function(t,e,n,r){void 0===r&&(r=!1);var i=lr({},this.baseOperationArgs);return i.query=t,i.update=e,n&&n.upsert&&(i.upsert=n.upsert),this.service.callFunction(r?"updateMany":"updateOne",[i],ur.remoteUpdateResultDecoder)},t.prototype.generateObjectIdIfMissing=function(t){if(!t._id){var e=t;return e._id=new i.b.ObjectID,e}return t},t}(),hr=function(){function t(t,e){this.name=t,this.service=e}return t.prototype.collection=function(t,e){return new cr(t,this.name,this.service,e)},t}(),fr=function(){function t(t){this.service=t}return t.prototype.db=function(t){return new hr(t,this.service)},t}(),dr=function(){function t(t){this.proxy=t}return t.prototype.next=function(){return Promise.resolve(this.proxy.next().value)},t}(),pr=function(){function t(t){this.proxy=t}return t.prototype.first=function(){return this.proxy.first()},t.prototype.toArray=function(){return this.proxy.toArray()},t.prototype.asArray=function(){return this.toArray()},t.prototype.iterator=function(){return this.proxy.iterator().then(function(t){return new dr(t)})},t}(),_r=function(){function t(t){this.proxy=t,this.namespace=this.proxy.namespace}return t.prototype.withCollectionType=function(e){return new t(this.proxy.withCollectionType(e))},t.prototype.count=function(t,e){return this.proxy.count(t,e)},t.prototype.find=function(t,e){return new pr(this.proxy.find(t,e))},t.prototype.findOne=function(t,e){return this.proxy.findOne(t,e)},t.prototype.findOneAndUpdate=function(t,e,n){return this.proxy.findOneAndUpdate(t,e,n)},t.prototype.findOneAndReplace=function(t,e,n){return this.proxy.findOneAndReplace(t,e,n)},t.prototype.findOneAndDelete=function(t,e){return this.proxy.findOneAndDelete(t,e)},t.prototype.aggregate=function(t){return new pr(this.proxy.aggregate(t))},t.prototype.insertOne=function(t){return this.proxy.insertOne(t)},t.prototype.insertMany=function(t){return this.proxy.insertMany(t)},t.prototype.deleteOne=function(t){return this.proxy.deleteOne(t)},t.prototype.deleteMany=function(t){return this.proxy.deleteMany(t)},t.prototype.updateOne=function(t,e,n){return this.proxy.updateOne(t,e,n)},t.prototype.updateMany=function(t,e,n){return this.proxy.updateMany(t,e,n)},t.prototype.watch=function(t){return this.proxy.watch(t)},t.prototype.watchCompact=function(t){return this.proxy.watchCompact(t)},t}(),yr=function(){function t(t){this.proxy=t,this.name=this.proxy.name}return t.prototype.collection=function(t,e){return new _r(this.proxy.collection(t,e))},t}(),mr=function(){function t(t){this.proxy=t}return t.prototype.db=function(t){return new yr(this.proxy.db(t))},t}();(ir||(ir={})).factory=new(function(){function t(){}return t.prototype.getNamedClient=function(t,e){return new mr(new fr(t))},t}()),n.d(e,"AnonymousAuthProvider",function(){return V}),n.d(e,"AnonymousCredential",function(){return Pt}),n.d(e,"BSON",function(){return i.b}),n.d(e,"BrowserFetchTransport",function(){return fn}),n.d(e,"CustomAuthProvider",function(){return Ct}),n.d(e,"CustomCredential",function(){return It}),n.d(e,"FacebookAuthProvider",function(){return Rt}),n.d(e,"FacebookCredential",function(){return Dt}),n.d(e,"FacebookRedirectCredential",function(){return Le}),n.d(e,"FunctionAuthProvider",function(){return Mt}),n.d(e,"FunctionCredential",function(){return Ut}),n.d(e,"GoogleAuthProvider",function(){return kt}),n.d(e,"GoogleCredential",function(){return Ft}),n.d(e,"GoogleRedirectCredential",function(){return Fe}),n.d(e,"MemoryStorage",function(){return ae}),n.d(e,"ServerApiKeyAuthProvider",function(){return jt}),n.d(e,"ServerApiKeyCredential",function(){return zt}),n.d(e,"Stitch",function(){return $n}),n.d(e,"StitchAppClientConfiguration",function(){return Me}),n.d(e,"StitchAppClientInfo",function(){return ke}),n.d(e,"StitchClientError",function(){return L}),n.d(e,"StitchClientErrorCode",function(){return R}),n.d(e,"StitchRequestError",function(){return p}),n.d(e,"StitchRequestErrorCode",function(){return l}),n.d(e,"StitchServiceError",function(){return b}),n.d(e,"StitchServiceErrorCode",function(){return h}),n.d(e,"StitchUserIdentity",function(){return it}),n.d(e,"Stream",function(){return $}),n.d(e,"UserApiKey",function(){return qt}),n.d(e,"UserApiKeyAuthProvider",function(){return Ht}),n.d(e,"UserApiKeyAuthProviderClient",function(){return Ue}),n.d(e,"UserApiKeyCredential",function(){return Zt}),n.d(e,"UserPasswordAuthProvider",function(){return Qt}),n.d(e,"UserPasswordAuthProviderClient",function(){return ze}),n.d(e,"UserPasswordCredential",function(){return ie}),n.d(e,"UserType",function(){return se}),n.d(e,"RemoteInsertManyResult",function(){return Xn}),n.d(e,"RemoteMongoReadOperation",function(){return pr}),n.d(e,"RemoteMongoClient",function(){return ir})},8:function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},9:function(t,e,n){"use strict";e.byteLength=function(t){var e=l(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){for(var e,n=l(t),r=n[0],s=n[1],a=new o(function(t,e,n){return 3*(e+n)/4-n}(0,r,s)),u=0,c=s>0?r-4:r,h=0;h<c;h+=4)e=i[t.charCodeAt(h)]<<18|i[t.charCodeAt(h+1)]<<12|i[t.charCodeAt(h+2)]<<6|i[t.charCodeAt(h+3)],a[u++]=e>>16&255,a[u++]=e>>8&255,a[u++]=255&e;2===s&&(e=i[t.charCodeAt(h)]<<2|i[t.charCodeAt(h+1)]>>4,a[u++]=255&e);1===s&&(e=i[t.charCodeAt(h)]<<10|i[t.charCodeAt(h+1)]<<4|i[t.charCodeAt(h+2)]>>2,a[u++]=e>>8&255,a[u++]=255&e);return a},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],s=0,a=n-i;s<a;s+=16383)o.push(h(t,s,s+16383>a?a:s+16383));1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)r[a]=s[a],i[s.charCodeAt(a)]=a;function l(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function c(t){return r[t>>18&63]+r[t>>12&63]+r[t>>6&63]+r[63&t]}function h(t,e,n){for(var r,i=[],o=e;o<n;o+=3)r=(t[o]<<16&16711680)+(t[o+1]<<8&65280)+(255&t[o+2]),i.push(c(r));return i.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,